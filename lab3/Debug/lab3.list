
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08017180  08017180  00018180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080177a8  080177a8  000191dc  2**0
                  CONTENTS
  4 .ARM          00000008  080177a8  080177a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080177b0  080177b0  000191dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080177b0  080177b0  000187b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080177b4  080177b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080177b8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001dc  08017994  000191dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08017994  00019404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6c5  00000000  00000000  0001920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245a  00000000  00000000  000288d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  0002ad30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000067  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002338d  00000000  00000000  0002afdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010236  00000000  00000000  0004e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4be1  00000000  00000000  0005e5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  001331c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00138714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017168 	.word	0x08017168

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08017168 	.word	0x08017168

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 fe78 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f81a 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f000 f934 	bl	8000488 <MX_GPIO_Init>
  MX_DAC_Init();
 8000220:	f000 f882 	bl	8000328 <MX_DAC_Init>
  MX_TIM1_Init();
 8000224:	f000 f8aa 	bl	800037c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000228:	f000 f904 	bl	8000434 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, UART_BUFFER_SIZE);
 800022c:	2205      	movs	r2, #5
 800022e:	4905      	ldr	r1, [pc, #20]	@ (8000244 <main+0x34>)
 8000230:	4805      	ldr	r0, [pc, #20]	@ (8000248 <main+0x38>)
 8000232:	f00e f915 	bl	800e460 <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000236:	2100      	movs	r1, #0
 8000238:	4804      	ldr	r0, [pc, #16]	@ (800024c <main+0x3c>)
 800023a:	f001 fc12 	bl	8001a62 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	bf00      	nop
 8000240:	e7fd      	b.n	800023e <main+0x2e>
 8000242:	bf00      	nop
 8000244:	200002a8 	.word	0x200002a8
 8000248:	20000254 	.word	0x20000254
 800024c:	200001f8 	.word	0x200001f8

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	@ 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 031c 	add.w	r3, r7, #28
 800025a:	2234      	movs	r2, #52	@ 0x34
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f012 fb79 	bl	8012956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000274:	2300      	movs	r3, #0
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	4b29      	ldr	r3, [pc, #164]	@ (8000320 <SystemClock_Config+0xd0>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027c:	4a28      	ldr	r2, [pc, #160]	@ (8000320 <SystemClock_Config+0xd0>)
 800027e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000282:	6413      	str	r3, [r2, #64]	@ 0x40
 8000284:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <SystemClock_Config+0xd0>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000290:	2300      	movs	r3, #0
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	4b23      	ldr	r3, [pc, #140]	@ (8000324 <SystemClock_Config+0xd4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a22      	ldr	r2, [pc, #136]	@ (8000324 <SystemClock_Config+0xd4>)
 800029a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <SystemClock_Config+0xd4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ac:	2301      	movs	r3, #1
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 80002c0:	230a      	movs	r3, #10
 80002c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 150;
 80002c4:	2396      	movs	r3, #150	@ 0x96
 80002c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c8:	2302      	movs	r3, #2
 80002ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 031c 	add.w	r3, r7, #28
 80002d8:	4618      	mov	r0, r3
 80002da:	f005 f95f 	bl	800559c <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e4:	f000 fab8 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80002f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000300:	f107 0308 	add.w	r3, r7, #8
 8000304:	2104      	movs	r1, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f003 fc28 	bl	8003b5c <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000312:	f000 faa1 	bl	8000858 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3750      	adds	r7, #80	@ 0x50
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40007000 	.word	0x40007000

08000328 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800032e:	463b      	mov	r3, r7
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000336:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_DAC_Init+0x4c>)
 8000338:	4a0f      	ldr	r2, [pc, #60]	@ (8000378 <MX_DAC_Init+0x50>)
 800033a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800033c:	480d      	ldr	r0, [pc, #52]	@ (8000374 <MX_DAC_Init+0x4c>)
 800033e:	f001 fb3d 	bl	80019bc <HAL_DAC_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000348:	f000 fa86 	bl	8000858 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800034c:	2300      	movs	r3, #0
 800034e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000354:	463b      	mov	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	@ (8000374 <MX_DAC_Init+0x4c>)
 800035c:	f001 fdcb 	bl	8001ef6 <HAL_DAC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000366:	f000 fa77 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200001f8 	.word	0x200001f8
 8000378:	40007400 	.word	0x40007400

0800037c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <MX_TIM1_Init+0xb0>)
 800039a:	4a25      	ldr	r2, [pc, #148]	@ (8000430 <MX_TIM1_Init+0xb4>)
 800039c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 149;
 800039e:	4b23      	ldr	r3, [pc, #140]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003a0:	2295      	movs	r2, #149	@ 0x95
 80003a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003aa:	4b20      	ldr	r3, [pc, #128]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b2:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c4:	4819      	ldr	r0, [pc, #100]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003c6:	f005 fc23 	bl	8005c10 <HAL_TIM_Base_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003d0:	f000 fa42 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	4812      	ldr	r0, [pc, #72]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003e2:	f00a fa19 	bl	800a818 <HAL_TIM_ConfigClockSource>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80003ec:	f000 fa34 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003f0:	2320      	movs	r3, #32
 80003f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	480b      	ldr	r0, [pc, #44]	@ (800042c <MX_TIM1_Init+0xb0>)
 80003fe:	f00d fb07 	bl	800da10 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000408:	f000 fa26 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	2100      	movs	r1, #0
 8000410:	2019      	movs	r0, #25
 8000412:	f001 f95e 	bl	80016d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000416:	2019      	movs	r0, #25
 8000418:	f001 f977 	bl	800170a <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim1);
 800041c:	4803      	ldr	r0, [pc, #12]	@ (800042c <MX_TIM1_Init+0xb0>)
 800041e:	f005 fd3c 	bl	8005e9a <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000020c 	.word	0x2000020c
 8000430:	40010000 	.word	0x40010000

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <MX_USART2_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800043e:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000440:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_USART2_UART_Init+0x4c>)
 800046c:	f00d fcd6 	bl	800de1c <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000476:	f000 f9ef 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000254 	.word	0x20000254
 8000484:	40004400 	.word	0x40004400

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <MX_GPIO_Init+0x4c>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000496:	4a0f      	ldr	r2, [pc, #60]	@ (80004d4 <MX_GPIO_Init+0x4c>)
 8000498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800049c:	6313      	str	r3, [r2, #48]	@ 0x30
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <MX_GPIO_Init+0x4c>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_GPIO_Init+0x4c>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b2:	4a08      	ldr	r2, [pc, #32]	@ (80004d4 <MX_GPIO_Init+0x4c>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_GPIO_Init+0x4c>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40023800 	.word	0x40023800

080004d8 <calculate_dac_value>:

/* USER CODE BEGIN 4 */
uint32_t calculate_dac_value(float sine_voltage) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)((sine_voltage / VREF) * 4095);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f010 fd30 	bl	8010f48 <__aeabi_f2d>
 80004e8:	a30d      	add	r3, pc, #52	@ (adr r3, 8000520 <calculate_dac_value+0x48>)
 80004ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ee:	f010 fead 	bl	801124c <__aeabi_ddiv>
 80004f2:	4602      	mov	r2, r0
 80004f4:	460b      	mov	r3, r1
 80004f6:	4610      	mov	r0, r2
 80004f8:	4619      	mov	r1, r3
 80004fa:	a30b      	add	r3, pc, #44	@ (adr r3, 8000528 <calculate_dac_value+0x50>)
 80004fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000500:	f010 fd7a 	bl	8010ff8 <__aeabi_dmul>
 8000504:	4602      	mov	r2, r0
 8000506:	460b      	mov	r3, r1
 8000508:	4610      	mov	r0, r2
 800050a:	4619      	mov	r1, r3
 800050c:	f011 f84c 	bl	80115a8 <__aeabi_d2uiz>
 8000510:	4603      	mov	r3, r0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	f3af 8000 	nop.w
 8000520:	66666666 	.word	0x66666666
 8000524:	400a6666 	.word	0x400a6666
 8000528:	00000000 	.word	0x00000000
 800052c:	40affe00 	.word	0x40affe00

08000530 <update_sine_wave>:

void update_sine_wave(void) {
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
    float delta_theta = 2.0f * M_PI * frequency / SAMPLE_RATE;
 8000536:	4b46      	ldr	r3, [pc, #280]	@ (8000650 <update_sine_wave+0x120>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f010 fd04 	bl	8010f48 <__aeabi_f2d>
 8000540:	a33f      	add	r3, pc, #252	@ (adr r3, 8000640 <update_sine_wave+0x110>)
 8000542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000546:	f010 fd57 	bl	8010ff8 <__aeabi_dmul>
 800054a:	4602      	mov	r2, r0
 800054c:	460b      	mov	r3, r1
 800054e:	4610      	mov	r0, r2
 8000550:	4619      	mov	r1, r3
 8000552:	f04f 0200 	mov.w	r2, #0
 8000556:	4b3f      	ldr	r3, [pc, #252]	@ (8000654 <update_sine_wave+0x124>)
 8000558:	f010 fe78 	bl	801124c <__aeabi_ddiv>
 800055c:	4602      	mov	r2, r0
 800055e:	460b      	mov	r3, r1
 8000560:	4610      	mov	r0, r2
 8000562:	4619      	mov	r1, r3
 8000564:	f011 f840 	bl	80115e8 <__aeabi_d2f>
 8000568:	4603      	mov	r3, r0
 800056a:	607b      	str	r3, [r7, #4]
    phase += delta_theta;
 800056c:	4b3a      	ldr	r3, [pc, #232]	@ (8000658 <update_sine_wave+0x128>)
 800056e:	ed93 7a00 	vldr	s14, [r3]
 8000572:	edd7 7a01 	vldr	s15, [r7, #4]
 8000576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <update_sine_wave+0x128>)
 800057c:	edc3 7a00 	vstr	s15, [r3]
    if (phase > 2.0f * M_PI) {
 8000580:	4b35      	ldr	r3, [pc, #212]	@ (8000658 <update_sine_wave+0x128>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f010 fcdf 	bl	8010f48 <__aeabi_f2d>
 800058a:	a32d      	add	r3, pc, #180	@ (adr r3, 8000640 <update_sine_wave+0x110>)
 800058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000590:	f010 ffc2 	bl	8011518 <__aeabi_dcmpgt>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d012      	beq.n	80005c0 <update_sine_wave+0x90>
        phase -= 2.0f * M_PI;
 800059a:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <update_sine_wave+0x128>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f010 fcd2 	bl	8010f48 <__aeabi_f2d>
 80005a4:	a326      	add	r3, pc, #152	@ (adr r3, 8000640 <update_sine_wave+0x110>)
 80005a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005aa:	f010 fb6d 	bl	8010c88 <__aeabi_dsub>
 80005ae:	4602      	mov	r2, r0
 80005b0:	460b      	mov	r3, r1
 80005b2:	4610      	mov	r0, r2
 80005b4:	4619      	mov	r1, r3
 80005b6:	f011 f817 	bl	80115e8 <__aeabi_d2f>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <update_sine_wave+0x128>)
 80005be:	6013      	str	r3, [r2, #0]
    }

    dac_output_voltage = VREF / 2 + amplitude_volts * sin(phase);
 80005c0:	4b26      	ldr	r3, [pc, #152]	@ (800065c <update_sine_wave+0x12c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f010 fcbf 	bl	8010f48 <__aeabi_f2d>
 80005ca:	4604      	mov	r4, r0
 80005cc:	460d      	mov	r5, r1
 80005ce:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <update_sine_wave+0x128>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f010 fcb8 	bl	8010f48 <__aeabi_f2d>
 80005d8:	4602      	mov	r2, r0
 80005da:	460b      	mov	r3, r1
 80005dc:	ec43 2b10 	vmov	d0, r2, r3
 80005e0:	f015 fd92 	bl	8016108 <sin>
 80005e4:	ec53 2b10 	vmov	r2, r3, d0
 80005e8:	4620      	mov	r0, r4
 80005ea:	4629      	mov	r1, r5
 80005ec:	f010 fd04 	bl	8010ff8 <__aeabi_dmul>
 80005f0:	4602      	mov	r2, r0
 80005f2:	460b      	mov	r3, r1
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	a313      	add	r3, pc, #76	@ (adr r3, 8000648 <update_sine_wave+0x118>)
 80005fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005fe:	f010 fb45 	bl	8010c8c <__adddf3>
 8000602:	4602      	mov	r2, r0
 8000604:	460b      	mov	r3, r1
 8000606:	4610      	mov	r0, r2
 8000608:	4619      	mov	r1, r3
 800060a:	f010 ffed 	bl	80115e8 <__aeabi_d2f>
 800060e:	4603      	mov	r3, r0
 8000610:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <update_sine_wave+0x130>)
 8000612:	6013      	str	r3, [r2, #0]

    dac_value = calculate_dac_value(dac_output_voltage);
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <update_sine_wave+0x130>)
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	eeb0 0a67 	vmov.f32	s0, s15
 800061e:	f7ff ff5b 	bl	80004d8 <calculate_dac_value>
 8000622:	4603      	mov	r3, r0
 8000624:	4a0f      	ldr	r2, [pc, #60]	@ (8000664 <update_sine_wave+0x134>)
 8000626:	6013      	str	r3, [r2, #0]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <update_sine_wave+0x134>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	480d      	ldr	r0, [pc, #52]	@ (8000668 <update_sine_wave+0x138>)
 8000632:	f001 fbf4 	bl	8001e1e <HAL_DAC_SetValue>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bdb0      	pop	{r4, r5, r7, pc}
 800063e:	bf00      	nop
 8000640:	54442d18 	.word	0x54442d18
 8000644:	401921fb 	.word	0x401921fb
 8000648:	66666666 	.word	0x66666666
 800064c:	3ffa6666 	.word	0x3ffa6666
 8000650:	20000000 	.word	0x20000000
 8000654:	408f4000 	.word	0x408f4000
 8000658:	2000029c 	.word	0x2000029c
 800065c:	20000004 	.word	0x20000004
 8000660:	200002a4 	.word	0x200002a4
 8000664:	200002a0 	.word	0x200002a0
 8000668:	200001f8 	.word	0x200001f8

0800066c <Process_Command>:

void Process_Command(uint8_t *cmd) {
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    char command_type = cmd[0];
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	77fb      	strb	r3, [r7, #31]
    float value = 0.0;
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]

    if (cmd[2] == '.' && command_type == 'A') {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3302      	adds	r3, #2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b2e      	cmp	r3, #46	@ 0x2e
 8000688:	d154      	bne.n	8000734 <Process_Command+0xc8>
 800068a:	7ffb      	ldrb	r3, [r7, #31]
 800068c:	2b41      	cmp	r3, #65	@ 0x41
 800068e:	d151      	bne.n	8000734 <Process_Command+0xc8>
        int integer_part = (cmd[1] - '0');
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3b30      	subs	r3, #48	@ 0x30
 8000698:	617b      	str	r3, [r7, #20]
        int decimal_part = ((cmd[3] - '0') * 10) + (cmd[4] - '0');
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3303      	adds	r3, #3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3304      	adds	r3, #4
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3b30      	subs	r3, #48	@ 0x30
 80006b6:	4413      	add	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
        value = integer_part + (decimal_part / 100.0);
 80006ba:	6978      	ldr	r0, [r7, #20]
 80006bc:	f010 fc32 	bl	8010f24 <__aeabi_i2d>
 80006c0:	4604      	mov	r4, r0
 80006c2:	460d      	mov	r5, r1
 80006c4:	6938      	ldr	r0, [r7, #16]
 80006c6:	f010 fc2d 	bl	8010f24 <__aeabi_i2d>
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	4b46      	ldr	r3, [pc, #280]	@ (80007e8 <Process_Command+0x17c>)
 80006d0:	f010 fdbc 	bl	801124c <__aeabi_ddiv>
 80006d4:	4602      	mov	r2, r0
 80006d6:	460b      	mov	r3, r1
 80006d8:	4620      	mov	r0, r4
 80006da:	4629      	mov	r1, r5
 80006dc:	f010 fad6 	bl	8010c8c <__adddf3>
 80006e0:	4602      	mov	r2, r0
 80006e2:	460b      	mov	r3, r1
 80006e4:	4610      	mov	r0, r2
 80006e6:	4619      	mov	r1, r3
 80006e8:	f010 ff7e 	bl	80115e8 <__aeabi_d2f>
 80006ec:	4603      	mov	r3, r0
 80006ee:	61bb      	str	r3, [r7, #24]

        if (value >= VREF && value <= VREF) {
 80006f0:	69b8      	ldr	r0, [r7, #24]
 80006f2:	f010 fc29 	bl	8010f48 <__aeabi_f2d>
 80006f6:	a33a      	add	r3, pc, #232	@ (adr r3, 80007e0 <Process_Command+0x174>)
 80006f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fc:	f010 ff02 	bl	8011504 <__aeabi_dcmpge>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d100      	bne.n	8000708 <Process_Command+0x9c>
    if (cmd[2] == '.' && command_type == 'A') {
 8000706:	e065      	b.n	80007d4 <Process_Command+0x168>
        if (value >= VREF && value <= VREF) {
 8000708:	69b8      	ldr	r0, [r7, #24]
 800070a:	f010 fc1d 	bl	8010f48 <__aeabi_f2d>
 800070e:	a334      	add	r3, pc, #208	@ (adr r3, 80007e0 <Process_Command+0x174>)
 8000710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000714:	f010 feec 	bl	80114f0 <__aeabi_dcmple>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d100      	bne.n	8000720 <Process_Command+0xb4>
    if (cmd[2] == '.' && command_type == 'A') {
 800071e:	e059      	b.n	80007d4 <Process_Command+0x168>
            amplitude_volts = value / 2;
 8000720:	ed97 7a06 	vldr	s14, [r7, #24]
 8000724:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072c:	4b2f      	ldr	r3, [pc, #188]	@ (80007ec <Process_Command+0x180>)
 800072e:	edc3 7a00 	vstr	s15, [r3]
    if (cmd[2] == '.' && command_type == 'A') {
 8000732:	e04f      	b.n	80007d4 <Process_Command+0x168>
        }
    }
    else if (cmd[3] == '.' && command_type == 'F') {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3303      	adds	r3, #3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b2e      	cmp	r3, #46	@ 0x2e
 800073c:	d14a      	bne.n	80007d4 <Process_Command+0x168>
 800073e:	7ffb      	ldrb	r3, [r7, #31]
 8000740:	2b46      	cmp	r3, #70	@ 0x46
 8000742:	d147      	bne.n	80007d4 <Process_Command+0x168>
        int integer_part = ((cmd[1] - '0') * 10) + (cmd[2] - '0');
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3301      	adds	r3, #1
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3302      	adds	r3, #2
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	3b30      	subs	r3, #48	@ 0x30
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
        int decimal_part = (cmd[4] - '0');
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3304      	adds	r3, #4
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3b30      	subs	r3, #48	@ 0x30
 800076c:	60bb      	str	r3, [r7, #8]
        value = integer_part + (decimal_part / 10.0);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f010 fbd8 	bl	8010f24 <__aeabi_i2d>
 8000774:	4604      	mov	r4, r0
 8000776:	460d      	mov	r5, r1
 8000778:	68b8      	ldr	r0, [r7, #8]
 800077a:	f010 fbd3 	bl	8010f24 <__aeabi_i2d>
 800077e:	f04f 0200 	mov.w	r2, #0
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <Process_Command+0x184>)
 8000784:	f010 fd62 	bl	801124c <__aeabi_ddiv>
 8000788:	4602      	mov	r2, r0
 800078a:	460b      	mov	r3, r1
 800078c:	4620      	mov	r0, r4
 800078e:	4629      	mov	r1, r5
 8000790:	f010 fa7c 	bl	8010c8c <__adddf3>
 8000794:	4602      	mov	r2, r0
 8000796:	460b      	mov	r3, r1
 8000798:	4610      	mov	r0, r2
 800079a:	4619      	mov	r1, r3
 800079c:	f010 ff24 	bl	80115e8 <__aeabi_d2f>
 80007a0:	4603      	mov	r3, r0
 80007a2:	61bb      	str	r3, [r7, #24]

        if (value >= 5 && value <= 35) {
 80007a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80007a8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80007ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b4:	da00      	bge.n	80007b8 <Process_Command+0x14c>
            frequency = value;
        }
    }
}
 80007b6:	e00d      	b.n	80007d4 <Process_Command+0x168>
        if (value >= 5 && value <= 35) {
 80007b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80007bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80007f4 <Process_Command+0x188>
 80007c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c8:	d900      	bls.n	80007cc <Process_Command+0x160>
}
 80007ca:	e003      	b.n	80007d4 <Process_Command+0x168>
            frequency = value;
 80007cc:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <Process_Command+0x18c>)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	e7ff      	b.n	80007d4 <Process_Command+0x168>
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bdb0      	pop	{r4, r5, r7, pc}
 80007dc:	f3af 8000 	nop.w
 80007e0:	66666666 	.word	0x66666666
 80007e4:	400a6666 	.word	0x400a6666
 80007e8:	40590000 	.word	0x40590000
 80007ec:	20000004 	.word	0x20000004
 80007f0:	40240000 	.word	0x40240000
 80007f4:	420c0000 	.word	0x420c0000
 80007f8:	20000000 	.word	0x20000000

080007fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <HAL_UART_RxCpltCallback+0x2c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d107      	bne.n	800081e <HAL_UART_RxCpltCallback+0x22>
        Process_Command(rx_buffer);
 800080e:	4807      	ldr	r0, [pc, #28]	@ (800082c <HAL_UART_RxCpltCallback+0x30>)
 8000810:	f7ff ff2c 	bl	800066c <Process_Command>
        HAL_UART_Receive_IT(&huart2, rx_buffer, UART_BUFFER_SIZE);
 8000814:	2205      	movs	r2, #5
 8000816:	4905      	ldr	r1, [pc, #20]	@ (800082c <HAL_UART_RxCpltCallback+0x30>)
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <HAL_UART_RxCpltCallback+0x34>)
 800081a:	f00d fe21 	bl	800e460 <HAL_UART_Receive_IT>
    }
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40004400 	.word	0x40004400
 800082c:	200002a8 	.word	0x200002a8
 8000830:	20000254 	.word	0x20000254

08000834 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
        update_sine_wave();
 8000846:	f7ff fe73 	bl	8000530 <update_sine_wave>
    }
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <HAL_DAC_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d127      	bne.n	8000926 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_DAC_MspInit+0x80>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <HAL_DAC_MspInit+0x80>)
 80008e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80008e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e6:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <HAL_DAC_MspInit+0x80>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_DAC_MspInit+0x80>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_DAC_MspInit+0x80>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_DAC_MspInit+0x80>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800090e:	2310      	movs	r3, #16
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <HAL_DAC_MspInit+0x84>)
 8000922:	f002 fb73 	bl	800300c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40007400 	.word	0x40007400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_DAC_MspDeInit+0x30>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d109      	bne.n	8000962 <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_DAC_MspDeInit+0x34>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <HAL_DAC_MspDeInit+0x34>)
 8000954:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800095a:	2110      	movs	r1, #16
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HAL_DAC_MspDeInit+0x38>)
 800095e:	f002 fce9 	bl	8003334 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40007400 	.word	0x40007400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <HAL_TIM_Base_MspInit+0x48>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d115      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_TIM_Base_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a0c      	ldr	r2, [pc, #48]	@ (80009c4 <HAL_TIM_Base_MspInit+0x4c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_TIM_Base_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2019      	movs	r0, #25
 80009ac:	f000 fe91 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009b0:	2019      	movs	r0, #25
 80009b2:	f000 feaa 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40010000 	.word	0x40010000
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_TIM_Base_MspDeInit+0x2c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d108      	bne.n	80009ec <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <HAL_TIM_Base_MspDeInit+0x30>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a06      	ldr	r2, [pc, #24]	@ (80009f8 <HAL_TIM_Base_MspDeInit+0x30>)
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 fe9d 	bl	8001726 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010000 	.word	0x40010000
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <HAL_UART_MspInit+0x94>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d133      	bne.n	8000a86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_UART_MspInit+0x98>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <HAL_UART_MspInit+0x98>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0x98>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_UART_MspInit+0x98>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a14      	ldr	r2, [pc, #80]	@ (8000a94 <HAL_UART_MspInit+0x98>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_UART_MspInit+0x98>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <HAL_UART_MspInit+0x9c>)
 8000a72:	f002 facb 	bl	800300c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2026      	movs	r0, #38	@ 0x26
 8000a7c:	f000 fe29 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a80:	2026      	movs	r0, #38	@ 0x26
 8000a82:	f000 fe42 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a09      	ldr	r2, [pc, #36]	@ (8000ad0 <HAL_UART_MspDeInit+0x34>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d10c      	bne.n	8000ac8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_UART_MspDeInit+0x38>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_UART_MspDeInit+0x38>)
 8000ab4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000aba:	210c      	movs	r1, #12
 8000abc:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_UART_MspDeInit+0x3c>)
 8000abe:	f002 fc39 	bl	8003334 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000ac2:	2026      	movs	r0, #38	@ 0x26
 8000ac4:	f000 fe2f 	bl	8001726 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b32:	f000 fa77 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b3e:	4802      	ldr	r0, [pc, #8]	@ (8000b48 <TIM1_UP_TIM10_IRQHandler+0xe>)
 8000b40:	f008 fe2b 	bl	800979a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000020c 	.word	0x2000020c

08000b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <USART2_IRQHandler+0x10>)
 8000b52:	f00e fcb3 	bl	800f4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000254 	.word	0x20000254

08000b60 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_getpid>:

int _getpid(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_kill>:

int _kill(int pid, int sig)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b88:	f011 ff38 	bl	80129fc <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2216      	movs	r2, #22
 8000b90:	601a      	str	r2, [r3, #0]
  return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_exit>:

void _exit (int status)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffe7 	bl	8000b7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
  }

  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
  }
  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_open>:

int _open(char *path, int flags, ...)
{
 8000c8e:	b40e      	push	{r1, r2, r3}
 8000c90:	b480      	push	{r7}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	b003      	add	sp, #12
 8000ca8:	4770      	bx	lr

08000caa <_wait>:

int _wait(int *status)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
 8000cb2:	f011 fea3 	bl	80129fc <__errno>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	220a      	movs	r2, #10
 8000cba:	601a      	str	r2, [r3, #0]
  return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_unlink>:

int _unlink(char *name)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
 8000cd0:	f011 fe94 	bl	80129fc <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	601a      	str	r2, [r3, #0]
  return -1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_times>:

int _times(struct tms *buf)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_stat>:

int _stat(char *file, struct stat *st)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_link>:

int _link(char *old, char *new)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
 8000d28:	f011 fe68 	bl	80129fc <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	221f      	movs	r2, #31
 8000d30:	601a      	str	r2, [r3, #0]
  return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_fork>:

int _fork(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  errno = EAGAIN;
 8000d42:	f011 fe5b 	bl	80129fc <__errno>
 8000d46:	4603      	mov	r3, r0
 8000d48:	220b      	movs	r2, #11
 8000d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
 8000d60:	f011 fe4c 	bl	80129fc <__errno>
 8000d64:	4603      	mov	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
  return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f011 fe28 	bl	80129fc <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	200002b0 	.word	0x200002b0
 8000de0:	20000408 	.word	0x20000408

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	2302      	movs	r3, #2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	2302      	movs	r3, #2
 8000e20:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d011      	beq.n	8000e56 <SystemCoreClockUpdate+0x4e>
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d844      	bhi.n	8000ec2 <SystemCoreClockUpdate+0xba>
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <SystemCoreClockUpdate+0x3e>
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d004      	beq.n	8000e4e <SystemCoreClockUpdate+0x46>
 8000e44:	e03d      	b.n	8000ec2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000e46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <SystemCoreClockUpdate+0xf0>)
 8000e48:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <SystemCoreClockUpdate+0xf4>)
 8000e4a:	601a      	str	r2, [r3, #0]
      break;
 8000e4c:	e03d      	b.n	8000eca <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <SystemCoreClockUpdate+0xf0>)
 8000e50:	4a2b      	ldr	r2, [pc, #172]	@ (8000f00 <SystemCoreClockUpdate+0xf8>)
 8000e52:	601a      	str	r2, [r3, #0]
      break;
 8000e54:	e039      	b.n	8000eca <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	0d9b      	lsrs	r3, r3, #22
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e6a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00c      	beq.n	8000e8c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e72:	4a23      	ldr	r2, [pc, #140]	@ (8000f00 <SystemCoreClockUpdate+0xf8>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000e7c:	6852      	ldr	r2, [r2, #4]
 8000e7e:	0992      	lsrs	r2, r2, #6
 8000e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e84:	fb02 f303 	mul.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	e00b      	b.n	8000ea4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <SystemCoreClockUpdate+0xf4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e94:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000e96:	6852      	ldr	r2, [r2, #4]
 8000e98:	0992      	lsrs	r2, r2, #6
 8000e9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <SystemCoreClockUpdate+0xf0>)
 8000ebe:	6013      	str	r3, [r2, #0]
      break;
 8000ec0:	e003      	b.n	8000eca <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <SystemCoreClockUpdate+0xf0>)
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <SystemCoreClockUpdate+0xf4>)
 8000ec6:	601a      	str	r2, [r3, #0]
      break;
 8000ec8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <SystemCoreClockUpdate+0xec>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <SystemCoreClockUpdate+0xfc>)
 8000ed6:	5cd3      	ldrb	r3, [r2, r3]
 8000ed8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <SystemCoreClockUpdate+0xf0>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <SystemCoreClockUpdate+0xf0>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	371c      	adds	r7, #28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	00f42400 	.word	0x00f42400
 8000f00:	01312d00 	.word	0x01312d00
 8000f04:	08017180 	.word	0x08017180

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 fbc3 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f000 f844 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fc92 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <HAL_DeInit+0x50>)
 8000f54:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_DeInit+0x54>)
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f62:	4b0d      	ldr	r3, [pc, #52]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_DeInit+0x58>)
 8000f6c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f76:	2281      	movs	r2, #129	@ 0x81
 8000f78:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f82:	2203      	movs	r2, #3
 8000f84:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_DeInit+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f8c:	f000 f813 	bl	8000fb6 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	3fffc9ff 	.word	0x3fffc9ff
 8000fa0:	00c77933 	.word	0x00c77933
 8000fa4:	206010ff 	.word	0x206010ff
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fbb1 	bl	800174a <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 fb67 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	@ (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000008 	.word	0x20000008
 800101c:	20000010 	.word	0x20000010
 8001020:	2000000c 	.word	0x2000000c

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000010 	.word	0x20000010
 8001048:	200002b4 	.word	0x200002b4

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200002b4 	.word	0x200002b4

08001064 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTickPrio+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000000c 	.word	0x2000000c

0800107c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_SetTickFreq+0x48>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	429a      	cmp	r2, r3
 8001092:	d012      	beq.n	80010ba <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_SetTickFreq+0x48>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_SetTickFreq+0x48>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <HAL_SetTickFreq+0x4c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff8d 	bl	8000fc4 <HAL_InitTick>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80010b4:	4a03      	ldr	r2, [pc, #12]	@ (80010c4 <HAL_SetTickFreq+0x48>)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000010 	.word	0x20000010
 80010c8:	2000000c 	.word	0x2000000c

080010cc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_GetTickFreq+0x14>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000010 	.word	0x20000010

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffae 	bl	800104c <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ff9e 	bl	800104c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000010 	.word	0x20000010

0800112c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_SuspendTick+0x1c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_SuspendTick+0x1c>)
 8001136:	f023 0302 	bic.w	r3, r3, #2
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_ResumeTick+0x1c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <HAL_ResumeTick+0x1c>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8001170:	4b02      	ldr	r3, [pc, #8]	@ (800117c <HAL_GetHalVersion+0x10>)
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	01080300 	.word	0x01080300

08001180 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetREVID+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0c1b      	lsrs	r3, r3, #16
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e0042000 	.word	0xe0042000

08001198 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <HAL_GetDEVID+0x18>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e0042000 	.word	0xe0042000

080011b4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6053      	str	r3, [r2, #4]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e0042000 	.word	0xe0042000

080011d4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	6053      	str	r3, [r2, #4]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e0042000 	.word	0xe0042000

080011f4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	6053      	str	r3, [r2, #4]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e0042000 	.word	0xe0042000

08001214 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800121e:	f023 0302 	bic.w	r3, r3, #2
 8001222:	6053      	str	r3, [r2, #4]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e0042000 	.word	0xe0042000

08001234 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6053      	str	r3, [r2, #4]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e0042000 	.word	0xe0042000

08001254 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	6053      	str	r3, [r2, #4]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e0042000 	.word	0xe0042000

08001274 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_EnableCompensationCell+0x14>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	42270400 	.word	0x42270400

0800128c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_DisableCompensationCell+0x14>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	42270400 	.word	0x42270400

080012a4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_GetUIDw0+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	1fff7a10 	.word	0x1fff7a10

080012bc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_GetUIDw1+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	1fff7a14 	.word	0x1fff7a14

080012d4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <HAL_GetUIDw2+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	1fff7a18 	.word	0x1fff7a18

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	@ (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db12      	blt.n	80013c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <__NVIC_DisableIRQ+0x44>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	3320      	adds	r3, #32
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80013b8:	f3bf 8f4f 	dsb	sy
}
 80013bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013be:	f3bf 8f6f 	isb	sy
}
 80013c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0e      	blt.n	8001404 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80013e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <__NVIC_GetPendingIRQ+0x40>)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	095b      	lsrs	r3, r3, #5
 80013ee:	3340      	adds	r3, #64	@ 0x40
 80013f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	e000      	b.n	8001406 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8001404:	2300      	movs	r3, #0
  }
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0c      	blt.n	8001444 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	@ (8001450 <__NVIC_SetPendingIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	3340      	adds	r3, #64	@ 0x40
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0c      	blt.n	8001480 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4907      	ldr	r1, [pc, #28]	@ (800148c <__NVIC_ClearPendingIRQ+0x38>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	3360      	adds	r3, #96	@ 0x60
 800147c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0e      	blt.n	80014c0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <__NVIC_GetActive+0x40>)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	095b      	lsrs	r3, r3, #5
 80014aa:	3380      	adds	r3, #128	@ 0x80
 80014ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	e000      	b.n	80014c2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80014c0:	2300      	movs	r3, #0
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	@ (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	@ (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db09      	blt.n	800154e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800153a:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <__NVIC_GetPriority+0x48>)
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4413      	add	r3, r2
 8001542:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8001546:	b2db      	uxtb	r3, r3
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	b2db      	uxtb	r3, r3
 800154c:	e009      	b.n	8001562 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <__NVIC_GetPriority+0x4c>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	7e1b      	ldrb	r3, [r3, #24]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	b2db      	uxtb	r3, r3
  }
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80015de:	b480      	push	{r7}
 80015e0:	b089      	sub	sp, #36	@ 0x24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_DecodePriority+0x32>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_DecodePriority+0x34>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	40da      	lsrs	r2, r3
 800161a:	f04f 31ff 	mov.w	r1, #4294967295
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	401a      	ands	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	3724      	adds	r7, #36	@ 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001650:	f3bf 8f4f 	dsb	sy
}
 8001654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <__NVIC_SystemReset+0x24>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800165e:	4904      	ldr	r1, [pc, #16]	@ (8001670 <__NVIC_SystemReset+0x24>)
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_SystemReset+0x28>)
 8001662:	4313      	orrs	r3, r2
 8001664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001666:	f3bf 8f4f 	dsb	sy
}
 800166a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <__NVIC_SystemReset+0x20>
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	05fa0004 	.word	0x05fa0004

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff1a 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fe11 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff fe26 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff42 	bl	8001578 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fee9 	bl	80014d4 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fe19 	bl	8001350 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fe29 	bl	800138c <__NVIC_DisableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001746:	f7ff ff81 	bl	800164c <__NVIC_SystemReset>

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff90 	bl	8001678 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8001766:	f3bf 8f5f 	dmb	sy
}
 800176a:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_MPU_Disable+0x26>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <HAL_MPU_Disable+0x26>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001776:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <HAL_MPU_Disable+0x2a>)
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	e000ed90 	.word	0xe000ed90

08001790 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001798:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <HAL_MPU_Enable+0x38>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_MPU_Enable+0x3c>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <HAL_MPU_Enable+0x3c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017ae:	f3bf 8f4f 	dsb	sy
}
 80017b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b4:	f3bf 8f6f 	isb	sy
}
 80017b8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed90 	.word	0xe000ed90
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <HAL_MPU_EnableRegion>:
/**
  * @brief  Enables the MPU Region.
  * @retval None
  */
void HAL_MPU_EnableRegion(uint32_t RegionNumber)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_MPU_EnableRegion+0x28>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6093      	str	r3, [r2, #8]

  /* Enable the Region */
  SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MPU_EnableRegion+0x28>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <HAL_MPU_EnableRegion+0x28>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6113      	str	r3, [r2, #16]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed90 	.word	0xe000ed90

080017fc <HAL_MPU_DisableRegion>:
/**
  * @brief  Disables the MPU Region.
  * @retval None
  */
void HAL_MPU_DisableRegion(uint32_t RegionNumber)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <HAL_MPU_DisableRegion+0x28>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6093      	str	r3, [r2, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MPU_DisableRegion+0x28>)
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <HAL_MPU_DisableRegion+0x28>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6113      	str	r3, [r2, #16]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed90 	.word	0xe000ed90

08001828 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	785a      	ldrb	r2, [r3, #1]
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001836:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <HAL_MPU_ConfigRegion+0x7c>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <HAL_MPU_ConfigRegion+0x7c>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001844:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7b1b      	ldrb	r3, [r3, #12]
 8001850:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7adb      	ldrb	r3, [r3, #11]
 8001856:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001858:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7a9b      	ldrb	r3, [r3, #10]
 800185e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001860:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7b5b      	ldrb	r3, [r3, #13]
 8001866:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001868:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7b9b      	ldrb	r3, [r3, #14]
 800186e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001870:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7bdb      	ldrb	r3, [r3, #15]
 8001876:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001878:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7a5b      	ldrb	r3, [r3, #9]
 800187e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001880:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7a1b      	ldrb	r3, [r3, #8]
 8001886:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001888:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001892:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001894:	6113      	str	r3, [r2, #16]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed90 	.word	0xe000ed90

080018a8 <HAL_CORTEX_ClearEvent>:
/**
  * @brief  Clear pending events.
  * @retval None
  */
void HAL_CORTEX_ClearEvent(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  __SEV();
 80018ac:	bf40      	sev
  __WFE();
 80018ae:	bf20      	wfe
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 80018be:	f7ff fd39 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80018d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe23 	bl	8001528 <__NVIC_GetPriority>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	f7ff fe79 	bl	80015de <NVIC_DecodePriority>
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fd88 	bl	8001418 <__NVIC_SetPendingIRQ>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fd58 	bl	80013d4 <__NVIC_GetPendingIRQ>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fd89 	bl	8001454 <__NVIC_ClearPendingIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fd99 	bl	8001490 <__NVIC_GetActive>
 800195e:	4603      	mov	r3, r0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d106      	bne.n	8001984 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001982:	e005      	b.n	8001990 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a04      	ldr	r2, [pc, #16]	@ (800199c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800198a:	f023 0304 	bic.w	r3, r3, #4
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80019a4:	f000 f802 	bl	80019ac <HAL_SYSTICK_Callback>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop

080019bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e014      	b.n	80019f8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	791b      	ldrb	r3, [r3, #4]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe ff68 	bl	80008b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7fe ff8f 	bl	800093c <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_MspInit could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_MspDeInit(DAC_HandleTypeDef *hdac)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_MspDeInit could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e046      	b.n	8001b04 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_DAC_Start+0x20>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e040      	b.n	8001b04 <HAL_DAC_Start+0xa2>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10f      	bne.n	8001acc <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001ab6:	2b3c      	cmp	r3, #60	@ 0x3c
 8001ab8:	d11d      	bne.n	8001af6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0201 	orr.w	r2, r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	e014      	b.n	8001af6 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	213c      	movs	r1, #60	@ 0x3c
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d107      	bne.n	8001af6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0202 	orr.w	r2, r2, #2
 8001af4:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_DAC_Stop+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e011      	b.n	8001b48 <HAL_DAC_Stop+0x38>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2201      	movs	r2, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0a2      	b.n	8001cb6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	795b      	ldrb	r3, [r3, #5]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_DAC_Start_DMA+0x28>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e09c      	b.n	8001cb6 <HAL_DAC_Start_DMA+0x162>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2202      	movs	r2, #2
 8001b86:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d129      	bne.n	8001be2 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc0 <HAL_DAC_Start_DMA+0x16c>)
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc4 <HAL_DAC_Start_DMA+0x170>)
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	4a49      	ldr	r2, [pc, #292]	@ (8001cc8 <HAL_DAC_Start_DMA+0x174>)
 8001ba4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_DAC_Start_DMA+0x70>
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d005      	beq.n	8001bce <HAL_DAC_Start_DMA+0x7a>
 8001bc2:	e009      	b.n	8001bd8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3308      	adds	r3, #8
 8001bca:	613b      	str	r3, [r7, #16]
        break;
 8001bcc:	e033      	b.n	8001c36 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	330c      	adds	r3, #12
 8001bd4:	613b      	str	r3, [r7, #16]
        break;
 8001bd6:	e02e      	b.n	8001c36 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3310      	adds	r3, #16
 8001bde:	613b      	str	r3, [r7, #16]
        break;
 8001be0:	e029      	b.n	8001c36 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	4a39      	ldr	r2, [pc, #228]	@ (8001ccc <HAL_DAC_Start_DMA+0x178>)
 8001be8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4a38      	ldr	r2, [pc, #224]	@ (8001cd0 <HAL_DAC_Start_DMA+0x17c>)
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	4a37      	ldr	r2, [pc, #220]	@ (8001cd4 <HAL_DAC_Start_DMA+0x180>)
 8001bf8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_DAC_Start_DMA+0xc4>
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d005      	beq.n	8001c22 <HAL_DAC_Start_DMA+0xce>
 8001c16:	e009      	b.n	8001c2c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	613b      	str	r3, [r7, #16]
        break;
 8001c20:	e009      	b.n	8001c36 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3318      	adds	r3, #24
 8001c28:	613b      	str	r3, [r7, #16]
        break;
 8001c2a:	e004      	b.n	8001c36 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	331c      	adds	r3, #28
 8001c32:	613b      	str	r3, [r7, #16]
        break;
 8001c34:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d111      	bne.n	8001c60 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6898      	ldr	r0, [r3, #8]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	f000 fcd0 	bl	80025fa <HAL_DMA_Start_IT>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	e010      	b.n	8001c82 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	68d8      	ldr	r0, [r3, #12]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	f000 fcbe 	bl	80025fa <HAL_DMA_Start_IT>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e005      	b.n	8001cb4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	08001fdb 	.word	0x08001fdb
 8001cc4:	08001ffd 	.word	0x08001ffd
 8001cc8:	08002019 	.word	0x08002019
 8001ccc:	08002301 	.word	0x08002301
 8001cd0:	08002323 	.word	0x08002323
 8001cd4:	0800233f 	.word	0x0800233f

08001cd8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e03e      	b.n	8001d6a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2201      	movs	r2, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fcba 	bl	80026aa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e00c      	b.n	8001d62 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fcac 	bl	80026aa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001d60:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d88:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01d      	beq.n	8001dd0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d018      	beq.n	8001dd0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dc8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f86f 	bl	8001eae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01d      	beq.n	8001e16 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d018      	beq.n	8001e16 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2204      	movs	r2, #4
 8001de8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f043 0202 	orr.w	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa51 	bl	80022b8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b087      	sub	sp, #28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e015      	b.n	8001e66 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d105      	bne.n	8001e52 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e004      	b.n	8001e5c <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3314      	adds	r3, #20
 8001e5a:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(const DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  assert_param(hdac != NULL);

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e003      	b.n	8001ee8 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b089      	sub	sp, #36	@ 0x24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_DAC_ConfigChannel+0x1c>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e042      	b.n	8001f9c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	795b      	ldrb	r3, [r3, #5]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_DAC_ConfigChannel+0x2c>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e03c      	b.n	8001f9c <HAL_DAC_ConfigChannel+0xa6>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	22c0      	movs	r2, #192	@ 0xc0
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43da      	mvns	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3724      	adds	r7, #36	@ 0x24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(const DAC_HandleTypeDef *hdac)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	791b      	ldrb	r3, [r3, #4]
 8001fb4:	b2db      	uxtb	r3, r3
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(const DAC_HandleTypeDef *hdac)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff ff42 	bl	8001e72 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	711a      	strb	r2, [r3, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002008:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff ff3b 	bl	8001e86 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f043 0204 	orr.w	r2, r3, #4
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff31 	bl	8001e9a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	711a      	strb	r2, [r3, #4]
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_DACEx_DualStart+0x16>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e041      	b.n	80020e2 <HAL_DACEx_DualStart+0x9a>
  }


  /* Process locked */
  __HAL_LOCK(hdac);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	795b      	ldrb	r3, [r3, #5]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_DACEx_DualStart+0x22>
 8002066:	2302      	movs	r3, #2
 8002068:	e03b      	b.n	80020e2 <HAL_DACEx_DualStart+0x9a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002094:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80020a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80020a2:	d103      	bne.n	80020ac <HAL_DACEx_DualStart+0x64>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80020b6:	f5b3 1f70 	cmp.w	r3, #3932160	@ 0x3c0000
 80020ba:	d103      	bne.n	80020c4 <HAL_DACEx_DualStart+0x7c>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f043 0302 	orr.w	r3, r3, #2
 80020c2:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_DACEx_DualStop+0x12>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e013      	b.n	8002128 <HAL_DACEx_DualStop+0x3a>
  }


  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800211e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_DACEx_TriangleWaveGenerate+0x16>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e02a      	b.n	80021a0 <HAL_DACEx_TriangleWaveGenerate+0x6c>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	795b      	ldrb	r3, [r3, #5]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_DACEx_TriangleWaveGenerate+0x22>
 8002152:	2302      	movs	r3, #2
 8002154:	e024      	b.n	80021a0 <HAL_DACEx_TriangleWaveGenerate+0x6c>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2202      	movs	r2, #2
 8002160:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	ea02 0103 	and.w	r1, r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DACEx_NoiseWaveGenerate+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02a      	b.n	8002218 <HAL_DACEx_NoiseWaveGenerate+0x6c>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	795b      	ldrb	r3, [r3, #5]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_DACEx_NoiseWaveGenerate+0x22>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e024      	b.n	8002218 <HAL_DACEx_NoiseWaveGenerate+0x6c>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2202      	movs	r2, #2
 80021d8:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	ea02 0103 	and.w	r1, r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	409a      	lsls	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  uint32_t data;
  uint32_t tmp;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DACEx_DualSetValue+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e019      	b.n	8002270 <HAL_DACEx_DualSetValue+0x4c>
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b08      	cmp	r3, #8
 8002240:	d105      	bne.n	800224e <HAL_DACEx_DualSetValue+0x2a>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e004      	b.n	8002258 <HAL_DACEx_DualSetValue+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	3320      	adds	r3, #32
 8002266:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(const DAC_HandleTypeDef *hdac)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff ffb4 	bl	800227c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	711a      	strb	r2, [r3, #4]
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ffad 	bl	8002290 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff ffa3 	bl	80022a4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	711a      	strb	r2, [r3, #4]
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7fe fe68 	bl	800104c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e099      	b.n	80024bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a8:	e00f      	b.n	80023ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023aa:	f7fe fe4f 	bl	800104c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d908      	bls.n	80023ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e078      	b.n	80024bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e8      	bne.n	80023aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4b38      	ldr	r3, [pc, #224]	@ (80024c4 <HAL_DMA_Init+0x158>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	2b04      	cmp	r3, #4
 8002422:	d107      	bne.n	8002434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	4313      	orrs	r3, r2
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0307 	bic.w	r3, r3, #7
 800244a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	2b04      	cmp	r3, #4
 800245c:	d117      	bne.n	800248e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fd4f 	bl	8002f14 <DMA_CheckFifoParam>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	@ 0x40
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800248a:	2301      	movs	r3, #1
 800248c:	e016      	b.n	80024bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fd07 	bl	8002eaa <DMA_CalcBaseAndBitshift>
 800249c:	4603      	mov	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	223f      	movs	r2, #63	@ 0x3f
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	f010803f 	.word	0xf010803f

080024c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e050      	b.n	800257c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d101      	bne.n	80024ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	e048      	b.n	800257c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2221      	movs	r2, #33	@ 0x21
 8002528:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fcbd 	bl	8002eaa <DMA_CalcBaseAndBitshift>
 8002530:	4603      	mov	r3, r0
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	223f      	movs	r2, #63	@ 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_DMA_Start+0x20>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e026      	b.n	80025f2 <HAL_DMA_Start+0x6e>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d115      	bne.n	80025e4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc3e 	bl	8002e4e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e005      	b.n	80025f0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
 80025ee:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002610:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_DMA_Start_IT+0x26>
 800261c:	2302      	movs	r3, #2
 800261e:	e040      	b.n	80026a2 <HAL_DMA_Start_IT+0xa8>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d12f      	bne.n	8002694 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fc00 	bl	8002e4e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	223f      	movs	r2, #63	@ 0x3f
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0216 	orr.w	r2, r2, #22
 8002668:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0208 	orr.w	r2, r2, #8
 8002680:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e005      	b.n	80026a0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800269c:	2302      	movs	r3, #2
 800269e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7fe fcc8 	bl	800104c <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d008      	beq.n	80026dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e052      	b.n	8002782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0216 	bic.w	r2, r2, #22
 80026ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <HAL_DMA_Abort+0x62>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e013      	b.n	8002756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7fe fc8d 	bl	800104c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d90c      	bls.n	8002756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e015      	b.n	8002782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e4      	bne.n	800272e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	223f      	movs	r2, #63	@ 0x3f
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e00c      	b.n	80027c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b08a      	sub	sp, #40	@ 0x28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	460b      	mov	r3, r1
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80027e0:	f7fe fc34 	bl	800104c <HAL_GetTick>
 80027e4:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d008      	beq.n	8002804 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2280      	movs	r2, #128	@ 0x80
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0bf      	b.n	8002984 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0b2      	b.n	8002984 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800281e:	7afb      	ldrb	r3, [r7, #11]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	2220      	movs	r2, #32
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002830:	e005      	b.n	800283e <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002836:	2210      	movs	r2, #16
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800284a:	e05a      	b.n	8002902 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d017      	beq.n	8002884 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_DMA_PollForTransfer+0x9c>
 800285a:	f7fe fbf7 	bl	800104c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d20c      	bcs.n	8002884 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e07f      	b.n	8002984 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	2208      	movs	r2, #8
 8002890:	409a      	lsls	r2, r3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028aa:	2208      	movs	r2, #8
 80028ac:	409a      	lsls	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b6:	2201      	movs	r2, #1
 80028b8:	409a      	lsls	r2, r3
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f043 0202 	orr.w	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	2201      	movs	r2, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	2204      	movs	r2, #4
 80028e0:	409a      	lsls	r2, r3
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fa:	2204      	movs	r2, #4
 80028fc:	409a      	lsls	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_DMA_PollForTransfer+0x14a>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d099      	beq.n	800284c <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	2b00      	cmp	r3, #0
 800291e:	d018      	beq.n	8002952 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d012      	beq.n	8002952 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff febc 	bl	80026aa <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002936:	2230      	movs	r2, #48	@ 0x30
 8002938:	409a      	lsls	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e018      	b.n	8002984 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10e      	bne.n	8002976 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	2230      	movs	r2, #48	@ 0x30
 800295e:	409a      	lsls	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002974:	e005      	b.n	8002982 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	2210      	movs	r2, #16
 800297c:	409a      	lsls	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8002982:	7ffb      	ldrb	r3, [r7, #31]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3728      	adds	r7, #40	@ 0x28
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002998:	4b8e      	ldr	r3, [pc, #568]	@ (8002bd4 <HAL_DMA_IRQHandler+0x248>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a8e      	ldr	r2, [pc, #568]	@ (8002bd8 <HAL_DMA_IRQHandler+0x24c>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0a9b      	lsrs	r3, r3, #10
 80029a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	2208      	movs	r2, #8
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d01a      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0204 	bic.w	r2, r2, #4
 80029de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	2208      	movs	r2, #8
 80029e6:	409a      	lsls	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00b      	beq.n	8002a2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a32:	2204      	movs	r2, #4
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	2204      	movs	r2, #4
 8002a52:	409a      	lsls	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	2210      	movs	r2, #16
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d043      	beq.n	8002afc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d03c      	beq.n	8002afc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a86:	2210      	movs	r2, #16
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d018      	beq.n	8002ace <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d024      	beq.n	8002afc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
 8002aba:	e01f      	b.n	8002afc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01b      	beq.n	8002afc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	4798      	blx	r3
 8002acc:	e016      	b.n	8002afc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0208 	bic.w	r2, r2, #8
 8002aea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	2220      	movs	r2, #32
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 808f 	beq.w	8002c2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8087 	beq.w	8002c2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b22:	2220      	movs	r2, #32
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d136      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0216 	bic.w	r2, r2, #22
 8002b44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <HAL_DMA_IRQHandler+0x1da>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0208 	bic.w	r2, r2, #8
 8002b74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	223f      	movs	r2, #63	@ 0x3f
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d07e      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
        }
        return;
 8002ba2:	e079      	b.n	8002c98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01d      	beq.n	8002bee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10d      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d031      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
 8002bd0:	e02c      	b.n	8002c2c <HAL_DMA_IRQHandler+0x2a0>
 8002bd2:	bf00      	nop
 8002bd4:	20000008 	.word	0x20000008
 8002bd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d023      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
 8002bec:	e01e      	b.n	8002c2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10f      	bne.n	8002c1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0210 	bic.w	r2, r2, #16
 8002c0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d032      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2205      	movs	r2, #5
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d307      	bcc.n	8002c74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f2      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x2cc>
 8002c72:	e000      	b.n	8002c76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
 8002c96:	e000      	b.n	8002c9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c98:	bf00      	nop
    }
  }
}
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_DMA_RegisterCallback+0x20>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e03d      	b.n	8002d3c <HAL_DMA_RegisterCallback+0x9c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d12c      	bne.n	8002d2e <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d826      	bhi.n	8002d28 <HAL_DMA_RegisterCallback+0x88>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <HAL_DMA_RegisterCallback+0x40>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf9 	.word	0x08002cf9
 8002ce4:	08002d01 	.word	0x08002d01
 8002ce8:	08002d09 	.word	0x08002d09
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d21 	.word	0x08002d21
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8002cfe:	e018      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002d06:	e014      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8002d0e:	e010      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8002d16:	e00c      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8002d1e:	e008      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8002d26:	e004      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d2c:	e001      	b.n	8002d32 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_DMA_UnRegisterCallback+0x1e>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e053      	b.n	8002e0e <HAL_DMA_UnRegisterCallback+0xc6>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d142      	bne.n	8002e00 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d83c      	bhi.n	8002dfa <HAL_DMA_UnRegisterCallback+0xb2>
 8002d80:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <HAL_DMA_UnRegisterCallback+0x40>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002da5 	.word	0x08002da5
 8002d8c:	08002dad 	.word	0x08002dad
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002dbd 	.word	0x08002dbd
 8002d98:	08002dc5 	.word	0x08002dc5
 8002d9c:	08002dcd 	.word	0x08002dcd
 8002da0:	08002dd5 	.word	0x08002dd5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8002daa:	e02b      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002db2:	e027      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8002dba:	e023      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8002dc2:	e01f      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8002dca:	e01b      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	651a      	str	r2, [r3, #80]	@ 0x50
      break; 
 8002dd2:	e017      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40
      hdma->XferM1CpltCallback = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	649a      	str	r2, [r3, #72]	@ 0x48
      hdma->XferErrorCallback = NULL;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hdma->XferAbortCallback = NULL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	651a      	str	r2, [r3, #80]	@ 0x50
      break; 
 8002df8:	e004      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfe:	e001      	b.n	8002e04 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e28:	b2db      	uxtb	r3, r3
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d108      	bne.n	8002e8e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e8c:	e007      	b.n	8002e9e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	60da      	str	r2, [r3, #12]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3b10      	subs	r3, #16
 8002eba:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <DMA_CalcBaseAndBitshift+0x62>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ec4:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <DMA_CalcBaseAndBitshift+0x66>)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d909      	bls.n	8002eec <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ee0:	f023 0303 	bic.w	r3, r3, #3
 8002ee4:	1d1a      	adds	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eea:	e007      	b.n	8002efc <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	aaaaaaab 	.word	0xaaaaaaab
 8002f10:	08017198 	.word	0x08017198

08002f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d11f      	bne.n	8002f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d856      	bhi.n	8002fe2 <DMA_CheckFifoParam+0xce>
 8002f34:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <DMA_CheckFifoParam+0x28>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f5f 	.word	0x08002f5f
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002fe3 	.word	0x08002fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d046      	beq.n	8002fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e043      	b.n	8002fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f66:	d140      	bne.n	8002fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6c:	e03d      	b.n	8002fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f76:	d121      	bne.n	8002fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d837      	bhi.n	8002fee <DMA_CheckFifoParam+0xda>
 8002f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <DMA_CheckFifoParam+0x70>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9b 	.word	0x08002f9b
 8002f8c:	08002f95 	.word	0x08002f95
 8002f90:	08002fad 	.word	0x08002fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e030      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d025      	beq.n	8002ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002faa:	e022      	b.n	8002ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fb4:	d11f      	bne.n	8002ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fba:	e01c      	b.n	8002ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d903      	bls.n	8002fca <DMA_CheckFifoParam+0xb6>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d003      	beq.n	8002fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fc8:	e018      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fce:	e015      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e00b      	b.n	8002ffa <DMA_CheckFifoParam+0xe6>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e00a      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e008      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
 8002fec:	e006      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop

0800300c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	@ 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e165      	b.n	80032f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 8154 	bne.w	80032ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	2b02      	cmp	r3, #2
 800305c:	d130      	bne.n	80030c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	2203      	movs	r2, #3
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 0201 	and.w	r2, r3, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d017      	beq.n	80030fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	2203      	movs	r2, #3
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80ae 	beq.w	80032ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <HAL_GPIO_Init+0x300>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	4a5c      	ldr	r2, [pc, #368]	@ (800330c <HAL_GPIO_Init+0x300>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a2:	4b5a      	ldr	r3, [pc, #360]	@ (800330c <HAL_GPIO_Init+0x300>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ae:	4a58      	ldr	r2, [pc, #352]	@ (8003310 <HAL_GPIO_Init+0x304>)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003314 <HAL_GPIO_Init+0x308>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003318 <HAL_GPIO_Init+0x30c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	@ (800331c <HAL_GPIO_Init+0x310>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003320 <HAL_GPIO_Init+0x314>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <HAL_GPIO_Init+0x318>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_Init+0x20a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003328 <HAL_GPIO_Init+0x31c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x206>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a49      	ldr	r2, [pc, #292]	@ (800332c <HAL_GPIO_Init+0x320>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_Init+0x202>
 800320a:	2306      	movs	r3, #6
 800320c:	e00c      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 800320e:	2307      	movs	r3, #7
 8003210:	e00a      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003212:	2305      	movs	r3, #5
 8003214:	e008      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003216:	2304      	movs	r3, #4
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 800321a:	2303      	movs	r3, #3
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x21c>
 8003226:	2300      	movs	r3, #0
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003238:	4935      	ldr	r1, [pc, #212]	@ (8003310 <HAL_GPIO_Init+0x304>)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003246:	4b3a      	ldr	r3, [pc, #232]	@ (8003330 <HAL_GPIO_Init+0x324>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326a:	4a31      	ldr	r2, [pc, #196]	@ (8003330 <HAL_GPIO_Init+0x324>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003270:	4b2f      	ldr	r3, [pc, #188]	@ (8003330 <HAL_GPIO_Init+0x324>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003294:	4a26      	ldr	r2, [pc, #152]	@ (8003330 <HAL_GPIO_Init+0x324>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329a:	4b25      	ldr	r3, [pc, #148]	@ (8003330 <HAL_GPIO_Init+0x324>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e8:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_GPIO_Init+0x324>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f67f ae96 	bls.w	8003028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40013800 	.word	0x40013800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400
 800331c:	40020800 	.word	0x40020800
 8003320:	40020c00 	.word	0x40020c00
 8003324:	40021000 	.word	0x40021000
 8003328:	40021400 	.word	0x40021400
 800332c:	40021800 	.word	0x40021800
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	e0c7      	b.n	80034e0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003350:	2201      	movs	r2, #1
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	f040 80b7 	bne.w	80034da <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800336c:	4a62      	ldr	r2, [pc, #392]	@ (80034f8 <HAL_GPIO_DeInit+0x1c4>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003378:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a5a      	ldr	r2, [pc, #360]	@ (80034fc <HAL_GPIO_DeInit+0x1c8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d025      	beq.n	80033e2 <HAL_GPIO_DeInit+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a59      	ldr	r2, [pc, #356]	@ (8003500 <HAL_GPIO_DeInit+0x1cc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_DeInit+0xaa>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_GPIO_DeInit+0x1d0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_DeInit+0xa6>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a57      	ldr	r2, [pc, #348]	@ (8003508 <HAL_GPIO_DeInit+0x1d4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_DeInit+0xa2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a56      	ldr	r2, [pc, #344]	@ (800350c <HAL_GPIO_DeInit+0x1d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_DeInit+0x9e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a55      	ldr	r2, [pc, #340]	@ (8003510 <HAL_GPIO_DeInit+0x1dc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_DeInit+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a54      	ldr	r2, [pc, #336]	@ (8003514 <HAL_GPIO_DeInit+0x1e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_DeInit+0x96>
 80033c6:	2306      	movs	r3, #6
 80033c8:	e00c      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033ca:	2307      	movs	r3, #7
 80033cc:	e00a      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033ce:	2305      	movs	r3, #5
 80033d0:	e008      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033d6:	2303      	movs	r3, #3
 80033d8:	e004      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033da:	2302      	movs	r3, #2
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_GPIO_DeInit+0xb0>
 80033e2:	2300      	movs	r3, #0
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	f002 0203 	and.w	r2, r2, #3
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	4093      	lsls	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d132      	bne.n	800345a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80033f4:	4b48      	ldr	r3, [pc, #288]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	4946      	ldr	r1, [pc, #280]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 80033fe:	4013      	ands	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003402:	4b45      	ldr	r3, [pc, #276]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	4943      	ldr	r1, [pc, #268]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 800340c:	4013      	ands	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003410:	4b41      	ldr	r3, [pc, #260]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	493f      	ldr	r1, [pc, #252]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 800341a:	4013      	ands	r3, r2
 800341c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800341e:	4b3e      	ldr	r3, [pc, #248]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	43db      	mvns	r3, r3
 8003426:	493c      	ldr	r1, [pc, #240]	@ (8003518 <HAL_GPIO_DeInit+0x1e4>)
 8003428:	4013      	ands	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	220f      	movs	r2, #15
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800343c:	4a2e      	ldr	r2, [pc, #184]	@ (80034f8 <HAL_GPIO_DeInit+0x1c4>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	43da      	mvns	r2, r3
 800344c:	482a      	ldr	r0, [pc, #168]	@ (80034f8 <HAL_GPIO_DeInit+0x1c4>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	400a      	ands	r2, r1
 8003454:	3302      	adds	r3, #2
 8003456:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2103      	movs	r1, #3
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	401a      	ands	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	08da      	lsrs	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3208      	adds	r2, #8
 8003478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	08d2      	lsrs	r2, r2, #3
 8003490:	4019      	ands	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2103      	movs	r1, #3
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	401a      	ands	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	2101      	movs	r1, #1
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	401a      	ands	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	2103      	movs	r1, #3
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	401a      	ands	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	f67f af34 	bls.w	8003350 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40020000 	.word	0x40020000
 8003500:	40020400 	.word	0x40020400
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	40021000 	.word	0x40021000
 8003510:	40021400 	.word	0x40021400
 8003514:	40021800 	.word	0x40021800
 8003518:	40013c00 	.word	0x40013c00

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003590:	887a      	ldrh	r2, [r7, #2]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4013      	ands	r3, r2
 8003596:	041a      	lsls	r2, r3, #16
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43d9      	mvns	r1, r3
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	400b      	ands	r3, r1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	619a      	str	r2, [r3, #24]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80035be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 80035c4:	887a      	ldrh	r2, [r7, #2]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d006      	beq.n	8003626 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003618:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f807 	bl	8003634 <HAL_GPIO_EXTI_Callback>
  }
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40013c00 	.word	0x40013c00

08003634 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_GPIO_EXTI_Callback+0x3a>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e26f      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d075      	beq.n	8003766 <HAL_GPIO_EXTI_Callback+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800367a:	4b88      	ldr	r3, [pc, #544]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b04      	cmp	r3, #4
 8003684:	d00c      	beq.n	80036a0 <HAL_GPIO_EXTI_Callback+0x6c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003686:	4b85      	ldr	r3, [pc, #532]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800368e:	2b08      	cmp	r3, #8
 8003690:	d112      	bne.n	80036b8 <HAL_GPIO_EXTI_Callback+0x84>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003692:	4b82      	ldr	r3, [pc, #520]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800369e:	d10b      	bne.n	80036b8 <HAL_GPIO_EXTI_Callback+0x84>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	4b7e      	ldr	r3, [pc, #504]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05b      	beq.n	8003764 <HAL_GPIO_EXTI_Callback+0x130>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d157      	bne.n	8003764 <HAL_GPIO_EXTI_Callback+0x130>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e24a      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c0:	d106      	bne.n	80036d0 <HAL_GPIO_EXTI_Callback+0x9c>
 80036c2:	4b76      	ldr	r3, [pc, #472]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a75      	ldr	r2, [pc, #468]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e01d      	b.n	800370c <HAL_GPIO_EXTI_Callback+0xd8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036d8:	d10c      	bne.n	80036f4 <HAL_GPIO_EXTI_Callback+0xc0>
 80036da:	4b70      	ldr	r3, [pc, #448]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6f      	ldr	r2, [pc, #444]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b6d      	ldr	r3, [pc, #436]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6c      	ldr	r2, [pc, #432]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e00b      	b.n	800370c <HAL_GPIO_EXTI_Callback+0xd8>
 80036f4:	4b69      	ldr	r3, [pc, #420]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a68      	ldr	r2, [pc, #416]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b66      	ldr	r3, [pc, #408]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a65      	ldr	r2, [pc, #404]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800370a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_GPIO_EXTI_Callback+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fc9a 	bl	800104c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_GPIO_EXTI_Callback+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd fc96 	bl	800104c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_GPIO_EXTI_Callback+0xfa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e20f      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b5b      	ldr	r3, [pc, #364]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_GPIO_EXTI_Callback+0xe8>
 800373a:	e014      	b.n	8003766 <HAL_GPIO_EXTI_Callback+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fc86 	bl	800104c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_GPIO_EXTI_Callback+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003744:	f7fd fc82 	bl	800104c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	@ 0x64
 8003750:	d901      	bls.n	8003756 <HAL_GPIO_EXTI_Callback+0x122>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e1fb      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	4b51      	ldr	r3, [pc, #324]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_GPIO_EXTI_Callback+0x110>
 8003762:	e000      	b.n	8003766 <HAL_GPIO_EXTI_Callback+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_GPIO_EXTI_Callback+0x206>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003772:	4b4a      	ldr	r3, [pc, #296]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_GPIO_EXTI_Callback+0x162>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b47      	ldr	r3, [pc, #284]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003786:	2b08      	cmp	r3, #8
 8003788:	d11c      	bne.n	80037c4 <HAL_GPIO_EXTI_Callback+0x190>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378a:	4b44      	ldr	r3, [pc, #272]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d116      	bne.n	80037c4 <HAL_GPIO_EXTI_Callback+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	4b41      	ldr	r3, [pc, #260]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_GPIO_EXTI_Callback+0x17a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <HAL_GPIO_EXTI_Callback+0x17a>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e1cf      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ae:	4b3b      	ldr	r3, [pc, #236]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4937      	ldr	r1, [pc, #220]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	e03a      	b.n	800383a <HAL_GPIO_EXTI_Callback+0x206>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_GPIO_EXTI_Callback+0x1da>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037cc:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_GPIO_EXTI_Callback+0x26c>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fd fc3b 	bl	800104c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_EXTI_Callback+0x1b8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037da:	f7fd fc37 	bl	800104c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_GPIO_EXTI_Callback+0x1b8>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e1b0      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_GPIO_EXTI_Callback+0x1a6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b28      	ldr	r3, [pc, #160]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4925      	ldr	r1, [pc, #148]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	e015      	b.n	800383a <HAL_GPIO_EXTI_Callback+0x206>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380e:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd fc1a 	bl	800104c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_GPIO_EXTI_Callback+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381c:	f7fd fc16 	bl	800104c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_GPIO_EXTI_Callback+0x1fa>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e18f      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_GPIO_EXTI_Callback+0x1e8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d036      	beq.n	80038b4 <HAL_GPIO_EXTI_Callback+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_GPIO_EXTI_Callback+0x248>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384e:	4b15      	ldr	r3, [pc, #84]	@ (80038a4 <HAL_GPIO_EXTI_Callback+0x270>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fbfa 	bl	800104c <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_GPIO_EXTI_Callback+0x23a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385c:	f7fd fbf6 	bl	800104c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_GPIO_EXTI_Callback+0x23a>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e16f      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_GPIO_EXTI_Callback+0x268>)
 8003870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_GPIO_EXTI_Callback+0x228>
 800387a:	e01b      	b.n	80038b4 <HAL_GPIO_EXTI_Callback+0x280>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387c:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_GPIO_EXTI_Callback+0x270>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003882:	f7fd fbe3 	bl	800104c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	e00e      	b.n	80038a8 <HAL_GPIO_EXTI_Callback+0x274>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388a:	f7fd fbdf 	bl	800104c <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d907      	bls.n	80038a8 <HAL_GPIO_EXTI_Callback+0x274>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e158      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
 800389c:	40023800 	.word	0x40023800
 80038a0:	42470000 	.word	0x42470000
 80038a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	4b88      	ldr	r3, [pc, #544]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80038aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ea      	bne.n	800388a <HAL_GPIO_EXTI_Callback+0x256>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8097 	beq.w	80039f0 <HAL_GPIO_EXTI_Callback+0x3bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c6:	4b81      	ldr	r3, [pc, #516]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_GPIO_EXTI_Callback+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	4b7d      	ldr	r3, [pc, #500]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	4a7c      	ldr	r2, [pc, #496]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e2:	4b7a      	ldr	r3, [pc, #488]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b77      	ldr	r3, [pc, #476]	@ (8003ad0 <HAL_GPIO_EXTI_Callback+0x49c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d118      	bne.n	8003930 <HAL_GPIO_EXTI_Callback+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fe:	4b74      	ldr	r3, [pc, #464]	@ (8003ad0 <HAL_GPIO_EXTI_Callback+0x49c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a73      	ldr	r2, [pc, #460]	@ (8003ad0 <HAL_GPIO_EXTI_Callback+0x49c>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390a:	f7fd fb9f 	bl	800104c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	e008      	b.n	8003924 <HAL_GPIO_EXTI_Callback+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003912:	f7fd fb9b 	bl	800104c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_GPIO_EXTI_Callback+0x2f0>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e114      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad0 <HAL_GPIO_EXTI_Callback+0x49c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_GPIO_EXTI_Callback+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d106      	bne.n	8003946 <HAL_GPIO_EXTI_Callback+0x312>
 8003938:	4b64      	ldr	r3, [pc, #400]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a63      	ldr	r2, [pc, #396]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
 8003944:	e01c      	b.n	8003980 <HAL_GPIO_EXTI_Callback+0x34c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b05      	cmp	r3, #5
 800394c:	d10c      	bne.n	8003968 <HAL_GPIO_EXTI_Callback+0x334>
 800394e:	4b5f      	ldr	r3, [pc, #380]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	4a5e      	ldr	r2, [pc, #376]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	6713      	str	r3, [r2, #112]	@ 0x70
 800395a:	4b5c      	ldr	r3, [pc, #368]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	4a5b      	ldr	r2, [pc, #364]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6713      	str	r3, [r2, #112]	@ 0x70
 8003966:	e00b      	b.n	8003980 <HAL_GPIO_EXTI_Callback+0x34c>
 8003968:	4b58      	ldr	r3, [pc, #352]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	4a57      	ldr	r2, [pc, #348]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6713      	str	r3, [r2, #112]	@ 0x70
 8003974:	4b55      	ldr	r3, [pc, #340]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003978:	4a54      	ldr	r2, [pc, #336]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 800397a:	f023 0304 	bic.w	r3, r3, #4
 800397e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_GPIO_EXTI_Callback+0x380>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fb60 	bl	800104c <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_GPIO_EXTI_Callback+0x372>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd fb5c 	bl	800104c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_GPIO_EXTI_Callback+0x372>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0d3      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	4b49      	ldr	r3, [pc, #292]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0ee      	beq.n	8003990 <HAL_GPIO_EXTI_Callback+0x35c>
 80039b2:	e014      	b.n	80039de <HAL_GPIO_EXTI_Callback+0x3aa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fd fb4a 	bl	800104c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ba:	e00a      	b.n	80039d2 <HAL_GPIO_EXTI_Callback+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fd fb46 	bl	800104c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_GPIO_EXTI_Callback+0x39e>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e0bd      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d2:	4b3e      	ldr	r3, [pc, #248]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ee      	bne.n	80039bc <HAL_GPIO_EXTI_Callback+0x388>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_GPIO_EXTI_Callback+0x3bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	4b39      	ldr	r3, [pc, #228]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	4a38      	ldr	r2, [pc, #224]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a9 	beq.w	8003b4c <HAL_GPIO_EXTI_Callback+0x518>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039fa:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d05c      	beq.n	8003ac0 <HAL_GPIO_EXTI_Callback+0x48c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d141      	bne.n	8003a92 <HAL_GPIO_EXTI_Callback+0x45e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fb1a 	bl	800104c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_GPIO_EXTI_Callback+0x3fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fd fb16 	bl	800104c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_GPIO_EXTI_Callback+0x3fa>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e08f      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_GPIO_EXTI_Callback+0x3e8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	3b01      	subs	r3, #1
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	491b      	ldr	r1, [pc, #108]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fd faef 	bl	800104c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_EXTI_Callback+0x450>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fd faeb 	bl	800104c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_GPIO_EXTI_Callback+0x450>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e064      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a84:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_GPIO_EXTI_Callback+0x43e>
 8003a90:	e05c      	b.n	8003b4c <HAL_GPIO_EXTI_Callback+0x518>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd fad8 	bl	800104c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_GPIO_EXTI_Callback+0x47e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fd fad4 	bl	800104c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_GPIO_EXTI_Callback+0x47e>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e04d      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_GPIO_EXTI_Callback+0x498>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_GPIO_EXTI_Callback+0x46c>
 8003abe:	e045      	b.n	8003b4c <HAL_GPIO_EXTI_Callback+0x518>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_GPIO_EXTI_Callback+0x4a4>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e040      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40007000 	.word	0x40007000
 8003ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b58 <HAL_GPIO_EXTI_Callback+0x524>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d030      	beq.n	8003b48 <HAL_GPIO_EXTI_Callback+0x514>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d129      	bne.n	8003b48 <HAL_GPIO_EXTI_Callback+0x514>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d122      	bne.n	8003b48 <HAL_GPIO_EXTI_Callback+0x514>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d119      	bne.n	8003b48 <HAL_GPIO_EXTI_Callback+0x514>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	3b01      	subs	r3, #1
 8003b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d10f      	bne.n	8003b48 <HAL_GPIO_EXTI_Callback+0x514>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d107      	bne.n	8003b48 <HAL_GPIO_EXTI_Callback+0x514>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_GPIO_EXTI_Callback+0x518>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_GPIO_EXTI_Callback+0x51a>
        }
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800

08003b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0cc      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b70:	4b68      	ldr	r3, [pc, #416]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d90c      	bls.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7e:	4b65      	ldr	r3, [pc, #404]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	4b63      	ldr	r3, [pc, #396]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0b8      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b59      	ldr	r3, [pc, #356]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a58      	ldr	r2, [pc, #352]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc8:	4b53      	ldr	r3, [pc, #332]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	494d      	ldr	r1, [pc, #308]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d044      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d119      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d003      	beq.n	8003c1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e067      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c3a:	4b37      	ldr	r3, [pc, #220]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 0203 	bic.w	r2, r3, #3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4934      	ldr	r1, [pc, #208]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c4c:	f7fd f9fe 	bl	800104c <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c54:	f7fd f9fa 	bl	800104c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e04f      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 020c 	and.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d1eb      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b25      	ldr	r3, [pc, #148]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d20c      	bcs.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e032      	b.n	8003d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4916      	ldr	r1, [pc, #88]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cce:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	490e      	ldr	r1, [pc, #56]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ce2:	f001 f9b9 	bl	8005058 <HAL_RCC_GetSysClockFreq>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	490a      	ldr	r1, [pc, #40]	@ (8003d1c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfa:	4a09      	ldr	r2, [pc, #36]	@ (8003d20 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd f95e 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	08017180 	.word	0x08017180
 8003d20:	20000008 	.word	0x20000008
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	@ 0x30
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d129      	bne.n	8003d8e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	4a2a      	ldr	r2, [pc, #168]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4a:	4b28      	ldr	r3, [pc, #160]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d60:	2303      	movs	r3, #3
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4619      	mov	r1, r3
 8003d72:	481f      	ldr	r0, [pc, #124]	@ (8003df0 <HAL_RCC_MCOConfig+0xc8>)
 8003d74:	f7ff f94a 	bl	800300c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003d78:	4b1c      	ldr	r3, [pc, #112]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4919      	ldr	r1, [pc, #100]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003d8c:	e029      	b.n	8003de2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	4b16      	ldr	r3, [pc, #88]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	4a15      	ldr	r2, [pc, #84]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003d98:	f043 0304 	orr.w	r3, r3, #4
 8003d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9e:	4b13      	ldr	r3, [pc, #76]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003daa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	2302      	movs	r3, #2
 8003db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db4:	2303      	movs	r3, #3
 8003db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003dc0:	f107 031c 	add.w	r3, r7, #28
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	480b      	ldr	r0, [pc, #44]	@ (8003df4 <HAL_RCC_MCOConfig+0xcc>)
 8003dc8:	f7ff f920 	bl	800300c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003dcc:	4b07      	ldr	r3, [pc, #28]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	00d9      	lsls	r1, r3, #3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	4903      	ldr	r1, [pc, #12]	@ (8003dec <HAL_RCC_MCOConfig+0xc4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
}
 8003de2:	bf00      	nop
 8003de4:	3730      	adds	r7, #48	@ 0x30
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020800 	.word	0x40020800

08003df8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	@ (8003e0c <HAL_RCC_EnableCSS+0x14>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	4247004c 	.word	0x4247004c

08003e10 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <HAL_RCC_DisableCSS+0x14>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	4247004c 	.word	0x4247004c
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e2c:	b090      	sub	sp, #64	@ 0x40
 8003e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e40:	4b59      	ldr	r3, [pc, #356]	@ (8003fa8 <HAL_RCC_DisableCSS+0x198>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d00d      	beq.n	8003e68 <HAL_RCC_DisableCSS+0x58>
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	f200 80a1 	bhi.w	8003f94 <HAL_RCC_DisableCSS+0x184>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_DisableCSS+0x4c>
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_DisableCSS+0x52>
 8003e5a:	e09b      	b.n	8003f94 <HAL_RCC_DisableCSS+0x184>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b53      	ldr	r3, [pc, #332]	@ (8003fac <HAL_RCC_DisableCSS+0x19c>)
 8003e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e60:	e09b      	b.n	8003f9a <HAL_RCC_DisableCSS+0x18a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e62:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_DisableCSS+0x1a0>)
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e66:	e098      	b.n	8003f9a <HAL_RCC_DisableCSS+0x18a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e68:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa8 <HAL_RCC_DisableCSS+0x198>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e72:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa8 <HAL_RCC_DisableCSS+0x198>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d028      	beq.n	8003ed0 <HAL_RCC_DisableCSS+0xc0>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa8 <HAL_RCC_DisableCSS+0x198>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	2200      	movs	r2, #0
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e90:	2100      	movs	r1, #0
 8003e92:	4b47      	ldr	r3, [pc, #284]	@ (8003fb0 <HAL_RCC_DisableCSS+0x1a0>)
 8003e94:	fb03 f201 	mul.w	r2, r3, r1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4a43      	ldr	r2, [pc, #268]	@ (8003fb0 <HAL_RCC_DisableCSS+0x1a0>)
 8003ea2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ea6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea8:	460a      	mov	r2, r1
 8003eaa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eae:	4413      	add	r3, r2
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	61fa      	str	r2, [r7, #28]
 8003eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ec2:	f00d fbe1 	bl	8011688 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ece:	e053      	b.n	8003f78 <HAL_RCC_DisableCSS+0x168>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed0:	4b35      	ldr	r3, [pc, #212]	@ (8003fa8 <HAL_RCC_DisableCSS+0x198>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	617a      	str	r2, [r7, #20]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ee2:	f04f 0b00 	mov.w	fp, #0
 8003ee6:	4652      	mov	r2, sl
 8003ee8:	465b      	mov	r3, fp
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	0159      	lsls	r1, r3, #5
 8003ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef8:	0150      	lsls	r0, r2, #5
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	ebb2 080a 	subs.w	r8, r2, sl
 8003f02:	eb63 090b 	sbc.w	r9, r3, fp
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f1a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f1e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	00eb      	lsls	r3, r5, #3
 8003f2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f30:	00e2      	lsls	r2, r4, #3
 8003f32:	4614      	mov	r4, r2
 8003f34:	461d      	mov	r5, r3
 8003f36:	eb14 030a 	adds.w	r3, r4, sl
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	eb45 030b 	adc.w	r3, r5, fp
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f4e:	4629      	mov	r1, r5
 8003f50:	028b      	lsls	r3, r1, #10
 8003f52:	4621      	mov	r1, r4
 8003f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f58:	4621      	mov	r1, r4
 8003f5a:	028a      	lsls	r2, r1, #10
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f62:	2200      	movs	r2, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	60fa      	str	r2, [r7, #12]
 8003f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f6c:	f00d fb8c 	bl	8011688 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <HAL_RCC_DisableCSS+0x198>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	3301      	adds	r3, #1
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f92:	e002      	b.n	8003f9a <HAL_RCC_DisableCSS+0x18a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCC_DisableCSS+0x19c>)
 8003f96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3740      	adds	r7, #64	@ 0x40
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	01312d00 	.word	0x01312d00

08003fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	@ (8003fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000008 	.word	0x20000008

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd0:	f7ff fff0 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0a9b      	lsrs	r3, r3, #10
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	@ (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	08017190 	.word	0x08017190

08003ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff8:	f7ff ffdc 	bl	8003fb4 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0b5b      	lsrs	r3, r3, #13
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	@ (8004018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40023800 	.word	0x40023800
 8004018:	08017190 	.word	0x08017190
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	220f      	movs	r2, #15
 8004028:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800402a:	4b45      	ldr	r3, [pc, #276]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004032:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004036:	d104      	bne.n	8004042 <HAL_RCC_GetPCLK2Freq+0x4e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	e00e      	b.n	8004060 <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8004042:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404e:	d104      	bne.n	800405a <HAL_RCC_GetPCLK2Freq+0x66>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	e002      	b.n	8004060 <HAL_RCC_GetPCLK2Freq+0x6c>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8004060:	4b37      	ldr	r3, [pc, #220]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d103      	bne.n	8004074 <HAL_RCC_GetPCLK2Freq+0x80>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	e002      	b.n	800407a <HAL_RCC_GetPCLK2Freq+0x86>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 800407a:	4b31      	ldr	r3, [pc, #196]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	08db      	lsrs	r3, r3, #3
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004088:	4b2d      	ldr	r3, [pc, #180]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d103      	bne.n	800409c <HAL_RCC_GetPCLK2Freq+0xa8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2205      	movs	r2, #5
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	e00c      	b.n	80040b6 <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 800409c:	4b28      	ldr	r3, [pc, #160]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d103      	bne.n	80040b0 <HAL_RCC_GetPCLK2Freq+0xbc>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	e002      	b.n	80040b6 <HAL_RCC_GetPCLK2Freq+0xc2>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d103      	bne.n	80040ca <HAL_RCC_GetPCLK2Freq+0xd6>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	615a      	str	r2, [r3, #20]
 80040c8:	e002      	b.n	80040d0 <HAL_RCC_GetPCLK2Freq+0xdc>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040dc:	d103      	bne.n	80040e6 <HAL_RCC_GetPCLK2Freq+0xf2>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	619a      	str	r2, [r3, #24]
 80040e4:	e002      	b.n	80040ec <HAL_RCC_GetPCLK2Freq+0xf8>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80040ec:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004104:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8004112:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800411a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	0c1a      	lsrs	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8004126:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	0e1b      	lsrs	r3, r3, #24
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	40023800 	.word	0x40023800

08004144 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	220f      	movs	r2, #15
 8004152:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004154:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0203 	and.w	r2, r3, #3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004160:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <HAL_RCC_GetClockConfig+0x5c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <HAL_RCC_GetClockConfig+0x5c>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	08db      	lsrs	r3, r3, #3
 800417e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004186:	4b07      	ldr	r3, [pc, #28]	@ (80041a4 <HAL_RCC_GetClockConfig+0x60>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40023c00 	.word	0x40023c00

080041a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d104      	bne.n	80041c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80041b8:	f000 f80a 	bl	80041d0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	701a      	strb	r2, [r3, #0]
  }
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	4002380e 	.word	0x4002380e

080041d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop

080041e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	@ 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004218:	4b6f      	ldr	r3, [pc, #444]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800421a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800421e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	496c      	ldr	r1, [pc, #432]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004236:	2301      	movs	r3, #1
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d010      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004246:	4b64      	ldr	r3, [pc, #400]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800424c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	4960      	ldr	r1, [pc, #384]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004264:	2301      	movs	r3, #1
 8004266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004274:	4b58      	ldr	r3, [pc, #352]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800427a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	4955      	ldr	r1, [pc, #340]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004292:	d101      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004294:	2301      	movs	r3, #1
 8004296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80042a0:	2301      	movs	r3, #1
 80042a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d017      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042b0:	4b49      	ldr	r3, [pc, #292]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	4946      	ldr	r1, [pc, #280]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ce:	d101      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80042d0:	2301      	movs	r3, #1
 80042d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80042dc:	2301      	movs	r3, #1
 80042de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808a 	beq.w	8004402 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	4b39      	ldr	r3, [pc, #228]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	4a38      	ldr	r2, [pc, #224]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042fe:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800430a:	4b34      	ldr	r3, [pc, #208]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a33      	ldr	r2, [pc, #204]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004314:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004316:	f7fc fe99 	bl	800104c <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fc fe95 	bl	800104c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e278      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004330:	4b2a      	ldr	r3, [pc, #168]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800433c:	4b26      	ldr	r3, [pc, #152]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004344:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02f      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	429a      	cmp	r2, r3
 8004358:	d028      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435a:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004362:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004364:	4b1e      	ldr	r3, [pc, #120]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436a:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004370:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004376:	4b18      	ldr	r3, [pc, #96]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d114      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004382:	f7fc fe63 	bl	800104c <HAL_GetTick>
 8004386:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fc fe5f 	bl	800104c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e240      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b8:	d114      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80043ba:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80043ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ce:	4902      	ldr	r1, [pc, #8]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
 80043d4:	e00c      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40007000 	.word	0x40007000
 80043e0:	42470e40 	.word	0x42470e40
 80043e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a49      	ldr	r2, [pc, #292]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043ee:	6093      	str	r3, [r2, #8]
 80043f0:	4b47      	ldr	r3, [pc, #284]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fc:	4944      	ldr	r1, [pc, #272]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004414:	4b3f      	ldr	r3, [pc, #252]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004416:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004424:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	4937      	ldr	r1, [pc, #220]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004446:	4b32      	ldr	r3, [pc, #200]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004454:	492e      	ldr	r1, [pc, #184]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d011      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004468:	4b29      	ldr	r3, [pc, #164]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	4926      	ldr	r1, [pc, #152]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004486:	d101      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004488:	2301      	movs	r3, #1
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004498:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	491a      	ldr	r1, [pc, #104]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80044ba:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c8:	4911      	ldr	r1, [pc, #68]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80044da:	2301      	movs	r3, #1
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d005      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ec:	f040 80ff 	bne.w	80046ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f0:	4b09      	ldr	r3, [pc, #36]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f6:	f7fc fda9 	bl	800104c <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044fc:	e00e      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044fe:	f7fc fda5 	bl	800104c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d907      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e188      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004510:	40023800 	.word	0x40023800
 8004514:	424711e0 	.word	0x424711e0
 8004518:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800451c:	4b7e      	ldr	r3, [pc, #504]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ea      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004544:	2b00      	cmp	r3, #0
 8004546:	d028      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d124      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004550:	4b71      	ldr	r3, [pc, #452]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	3301      	adds	r3, #1
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004562:	4b6d      	ldr	r3, [pc, #436]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004568:	0e1b      	lsrs	r3, r3, #24
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	431a      	orrs	r2, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	3b01      	subs	r3, #1
 8004582:	041b      	lsls	r3, r3, #16
 8004584:	431a      	orrs	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	071b      	lsls	r3, r3, #28
 8004592:	4961      	ldr	r1, [pc, #388]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d035      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c4:	d130      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045c6:	4b54      	ldr	r3, [pc, #336]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045de:	0f1b      	lsrs	r3, r3, #28
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	431a      	orrs	r2, r3
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	3b01      	subs	r3, #1
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	431a      	orrs	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	071b      	lsls	r3, r3, #28
 8004608:	4943      	ldr	r1, [pc, #268]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004610:	4b41      	ldr	r3, [pc, #260]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004616:	f023 021f 	bic.w	r2, r3, #31
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	493d      	ldr	r1, [pc, #244]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d029      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800463c:	d124      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800463e:	4b36      	ldr	r3, [pc, #216]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	3301      	adds	r3, #1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004650:	4b31      	ldr	r3, [pc, #196]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004656:	0f1b      	lsrs	r3, r3, #28
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	019b      	lsls	r3, r3, #6
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	3b01      	subs	r3, #1
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	431a      	orrs	r2, r3
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	431a      	orrs	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	071b      	lsls	r3, r3, #28
 8004680:	4925      	ldr	r1, [pc, #148]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004690:	2b00      	cmp	r3, #0
 8004692:	d016      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	4917      	ldr	r1, [pc, #92]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046c2:	4b16      	ldr	r3, [pc, #88]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fc fcc0 	bl	800104c <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d0:	f7fc fcbc 	bl	800104c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e09f      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 8095 	bne.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046fc:	f7fc fca6 	bl	800104c <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004702:	e00f      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004704:	f7fc fca2 	bl	800104c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d908      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e085      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	42470068 	.word	0x42470068
 8004720:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004724:	4b41      	ldr	r3, [pc, #260]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004730:	d0e8      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02b      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d127      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800475a:	4b34      	ldr	r3, [pc, #208]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	019b      	lsls	r3, r3, #6
 8004776:	431a      	orrs	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	3b01      	subs	r3, #1
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	4928      	ldr	r1, [pc, #160]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004790:	4b26      	ldr	r3, [pc, #152]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004796:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	3b01      	subs	r3, #1
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	4922      	ldr	r1, [pc, #136]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01d      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047be:	d118      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c0:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	019b      	lsls	r3, r3, #6
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	3b01      	subs	r3, #1
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4910      	ldr	r1, [pc, #64]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fc fc28 	bl	800104c <HAL_GetTick>
 80047fc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004800:	f7fc fc24 	bl	800104c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e007      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800481a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800481e:	d1ef      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3730      	adds	r7, #48	@ 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	42470070 	.word	0x42470070

08004834 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 | \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004842:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  | \
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     | \
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8004844:	4b5d      	ldr	r3, [pc, #372]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800484a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004852:	4b5a      	ldr	r3, [pc, #360]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004862:	4b56      	ldr	r3, [pc, #344]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	3301      	adds	r3, #1
 8004870:	005a      	lsls	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004876:	4b51      	ldr	r3, [pc, #324]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	f003 020f 	and.w	r2, r3, #15
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004886:	4b4d      	ldr	r3, [pc, #308]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800488c:	0f1b      	lsrs	r3, r3, #28
 800488e:	f003 0207 	and.w	r2, r3, #7
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	615a      	str	r2, [r3, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
 8004896:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80048a4:	4b45      	ldr	r3, [pc, #276]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	099b      	lsrs	r3, r3, #6
 80048ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80048b4:	4b41      	ldr	r3, [pc, #260]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	3301      	adds	r3, #1
 80048c2:	005a      	lsls	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c8:	4b3c      	ldr	r3, [pc, #240]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	0e1b      	lsrs	r3, r3, #24
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 80048d8:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80048da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048de:	f003 021f 	and.w	r2, r3, #31
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 80048e6:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	f003 021f 	and.w	r2, r3, #31
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80048f6:	4b31      	ldr	r3, [pc, #196]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048fc:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8004904:	4b2d      	ldr	r3, [pc, #180]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800490a:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004912:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004918:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004920:	4b26      	ldr	r3, [pc, #152]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004926:	f003 52c0 	and.w	r2, r3, #402653184	@ 0x18000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800492e:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004936:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004938:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8004948:	4b1c      	ldr	r3, [pc, #112]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 800494a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800494e:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 8004956:	4b19      	ldr	r3, [pc, #100]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8004964:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800496a:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 8004972:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004978:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004986:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800498e:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCCEx_GetPeriphCLKConfig+0x188>)
 8004990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <HAL_RCCEx_GetPeriphCLKConfig+0x172>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKConfig+0x17a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800

080049c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	@ 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	2b07      	cmp	r3, #7
 80049e6:	f200 8224 	bhi.w	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004bf3 	.word	0x08004bf3
 80049f4:	08004d1d 	.word	0x08004d1d
 80049f8:	08004e33 	.word	0x08004e33
 80049fc:	08004a11 	.word	0x08004a11
 8004a00:	08004e33 	.word	0x08004e33
 8004a04:	08004e33 	.word	0x08004e33
 8004a08:	08004e33 	.word	0x08004e33
 8004a0c:	08004a11 	.word	0x08004a11
  {
    case RCC_PERIPHCLK_SAI1:
    case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8004a10:	4ba8      	ldr	r3, [pc, #672]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a16:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a26:	f000 80d6 	beq.w	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a30:	f200 80dd 	bhi.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a3a:	f000 809f 	beq.w	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a44:	f200 80d3 	bhi.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a4e:	d05b      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a56:	f200 80ca 	bhi.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a60:	f000 80b6 	beq.w	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a6a:	f200 80c0 	bhi.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a74:	f000 8082 	beq.w	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a7e:	f200 80b6 	bhi.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8e:	d03b      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
        default :
        {
          break;
 8004a90:	e0ad      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a92:	4b88      	ldr	r3, [pc, #544]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8004a9e:	4b85      	ldr	r3, [pc, #532]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aa8:	4a83      	ldr	r2, [pc, #524]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8004ab2:	4b80      	ldr	r3, [pc, #512]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abc:	4a7f      	ldr	r2, [pc, #508]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac2:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8004ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aca:	0e1b      	lsrs	r3, r3, #24
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 8004ad2:	4b78      	ldr	r3, [pc, #480]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	fb03 f202 	mul.w	r2, r3, r2
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8004aec:	4b71      	ldr	r3, [pc, #452]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	3301      	adds	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	61fb      	str	r3, [r7, #28]
          break;
 8004b06:	e073      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b08:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004b14:	4b67      	ldr	r3, [pc, #412]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b1e:	4a66      	ldr	r2, [pc, #408]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8004b28:	4b62      	ldr	r3, [pc, #392]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b32:	4a62      	ldr	r2, [pc, #392]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8004b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 8004b48:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	fb03 f202 	mul.w	r2, r3, r2
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8004b62:	4b54      	ldr	r3, [pc, #336]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
          frequency = frequency / (tmpreg1);
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	61fb      	str	r3, [r7, #28]
          break;
 8004b7a:	e039      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d108      	bne.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b88:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b90:	4a49      	ldr	r2, [pc, #292]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	e007      	b.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b9a:	4b46      	ldr	r3, [pc, #280]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba2:	4a46      	ldr	r2, [pc, #280]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8004baa:	4b42      	ldr	r3, [pc, #264]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	0f1b      	lsrs	r3, r3, #28
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 8004bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	fb03 f202 	mul.w	r2, r3, r2
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	61fb      	str	r3, [r7, #28]
          break;
 8004bce:	e00f      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004bd2:	61fb      	str	r3, [r7, #28]
          break;
 8004bd4:	e00c      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bd6:	4b37      	ldr	r3, [pc, #220]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8004be2:	4b35      	ldr	r3, [pc, #212]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004be4:	61fb      	str	r3, [r7, #28]
          break;
 8004be6:	e003      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8004be8:	4b34      	ldr	r3, [pc, #208]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004bea:	61fb      	str	r3, [r7, #28]
          break;
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8004bee:	bf00      	nop
        }
      }
      break;
 8004bf0:	e120      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8004bf2:	4b30      	ldr	r3, [pc, #192]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bf8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004c04:	d079      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8004c0c:	f200 8082 	bhi.w	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c16:	d03c      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c1e:	d879      	bhi.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c2c:	d172      	bne.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c2e:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004c30:	61fb      	str	r3, [r7, #28]
          break;
 8004c32:	e072      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c34:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c40:	d109      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c42:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e008      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004c56:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c68:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c82:	0f1b      	lsrs	r3, r3, #28
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	61fb      	str	r3, [r7, #28]
          break;
 8004c90:	e043      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c9e:	d111      	bne.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ca0:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ca8:	4a04      	ldr	r2, [pc, #16]	@ (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e010      	b.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	00f42400 	.word	0x00f42400
 8004cbc:	01312d00 	.word	0x01312d00
 8004cc0:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cc4:	4b5f      	ldr	r3, [pc, #380]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ccc:	4a5e      	ldr	r2, [pc, #376]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	099b      	lsrs	r3, r3, #6
 8004cda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004ce6:	4b57      	ldr	r3, [pc, #348]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	0f1b      	lsrs	r3, r3, #28
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	61fb      	str	r3, [r7, #28]
          break;
 8004cf8:	e00f      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cfa:	4b52      	ldr	r3, [pc, #328]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d06:	d102      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8004d08:	4b50      	ldr	r3, [pc, #320]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004d0a:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004d0c:	e005      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004d10:	61fb      	str	r3, [r7, #28]
          break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
          break;
 8004d18:	bf00      	nop
        }
      }
      break;
 8004d1a:	e08b      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8004d1c:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d22:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004d2e:	d06f      	beq.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004d36:	d878      	bhi.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d3e:	d03c      	beq.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d46:	d870      	bhi.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d54:	d169      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d56:	4b3e      	ldr	r3, [pc, #248]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8004d58:	61fb      	str	r3, [r7, #28]
          break;
 8004d5a:	e069      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d5c:	4b39      	ldr	r3, [pc, #228]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d68:	d109      	bne.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d6a:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d74:	4a35      	ldr	r2, [pc, #212]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	e008      	b.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d7e:	4b31      	ldr	r3, [pc, #196]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d88:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d90:	4b2c      	ldr	r3, [pc, #176]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004da4:	4b27      	ldr	r3, [pc, #156]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004daa:	0f1b      	lsrs	r3, r3, #28
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	61fb      	str	r3, [r7, #28]
          break;
 8004db8:	e03a      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
        case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dba:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dc6:	d108      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e007      	b.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dda:	4b1a      	ldr	r3, [pc, #104]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de2:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8004dea:	4b16      	ldr	r3, [pc, #88]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8004dfc:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0f1b      	lsrs	r3, r3, #28
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	61fb      	str	r3, [r7, #28]
          break;
 8004e0e:	e00f      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
        case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e10:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e1c:	d102      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8004e20:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8004e22:	e005      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8004e24:	4b08      	ldr	r3, [pc, #32]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8004e26:	61fb      	str	r3, [r7, #28]
          break;
 8004e28:	e002      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
          break;
 8004e2e:	bf00      	nop
        }
      }
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
    default:
    {
      break;
 8004e32:	bf00      	nop
    }
  }
  return frequency;
 8004e34:	69fb      	ldr	r3, [r7, #28]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3724      	adds	r7, #36	@ 0x24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	00f42400 	.word	0x00f42400
 8004e4c:	01312d00 	.word	0x01312d00
 8004e50:	00bb8000 	.word	0x00bb8000

08004e54 <HAL_RCCEx_SelectLSEMode>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */
void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(Mode));
  if (Mode == RCC_LSE_HIGHDRIVE_MODE)
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCCEx_SelectLSEMode+0x1e>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 8004e64:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCCEx_SelectLSEMode+0x38>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <HAL_RCCEx_SelectLSEMode+0x38>)
 8004e6a:	f043 0308 	orr.w	r3, r3, #8
 8004e6e:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
 8004e70:	e005      	b.n	8004e7e <HAL_RCCEx_SelectLSEMode+0x2a>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_RCCEx_SelectLSEMode+0x38>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	4a05      	ldr	r2, [pc, #20]	@ (8004e8c <HAL_RCCEx_SelectLSEMode+0x38>)
 8004e78:	f023 0308 	bic.w	r3, r3, #8
 8004e7c:	6713      	str	r3, [r2, #112]	@ 0x70
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800

08004e90 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8004e98:	4b23      	ldr	r3, [pc, #140]	@ (8004f28 <HAL_RCCEx_EnablePLLI2S+0x98>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8004e9e:	f7fc f8d5 	bl	800104c <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ea6:	f7fc f8d1 	bl	800104c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e033      	b.n	8004f20 <HAL_RCCEx_EnablePLLI2S+0x90>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f2c <HAL_RCCEx_EnablePLLI2S+0x9c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1f0      	bne.n	8004ea6 <HAL_RCCEx_EnablePLLI2S+0x16>
#if defined(STM32F446xx)
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
  /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
  /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	4910      	ldr	r1, [pc, #64]	@ (8004f2c <HAL_RCCEx_EnablePLLI2S+0x9c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <HAL_RCCEx_EnablePLLI2S+0x98>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 8004ef8:	f7fc f8a8 	bl	800104c <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCCEx_EnablePLLI2S+0x82>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f00:	f7fc f8a4 	bl	800104c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCCEx_EnablePLLI2S+0x82>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e006      	b.n	8004f20 <HAL_RCCEx_EnablePLLI2S+0x90>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_RCCEx_EnablePLLI2S+0x9c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCCEx_EnablePLLI2S+0x70>
    }
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	42470068 	.word	0x42470068
 8004f2c:	40023800 	.word	0x40023800

08004f30 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8004f3c:	f7fc f886 	bl	800104c <HAL_GetTick>
 8004f40:	6078      	str	r0, [r7, #4]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f44:	f7fc f882 	bl	800104c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_DisablePLLI2S+0x34>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCCEx_DisablePLLI2S+0x40>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	42470068 	.word	0x42470068
 8004f70:	40023800 	.word	0x40023800

08004f74 <HAL_RCCEx_EnablePLLSAI>:
  * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
  *         contains the configuration information for the PLLSAI
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLSAICFGR_PLLSAIR)
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
#endif /* RCC_PLLSAICFGR_PLLSAIR */

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
 8004f7c:	4b22      	ldr	r3, [pc, #136]	@ (8005008 <HAL_RCCEx_EnablePLLSAI+0x94>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
 8004f82:	f7fc f863 	bl	800104c <HAL_GetTick>
 8004f86:	60f8      	str	r0, [r7, #12]
  while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_EnablePLLSAI+0x28>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f8a:	f7fc f85f 	bl	800104c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_EnablePLLSAI+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e031      	b.n	8005000 <HAL_RCCEx_EnablePLLSAI+0x8c>
  while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800500c <HAL_RCCEx_EnablePLLSAI+0x98>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa8:	d0ef      	beq.n	8004f8a <HAL_RCCEx_EnablePLLSAI+0x16>
#if defined(STM32F446xx)
  /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
  /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
  /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	019b      	lsls	r3, r3, #6
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	4910      	ldr	r1, [pc, #64]	@ (800500c <HAL_RCCEx_EnablePLLSAI+0x98>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
  __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
#endif /* STM32F446xx */

  /* Enable the PLLSAI */
  __HAL_RCC_PLLSAI_ENABLE();
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <HAL_RCCEx_EnablePLLSAI+0x94>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is ready */
  tickstart = HAL_GetTick();
 8004fd6:	f7fc f839 	bl	800104c <HAL_GetTick>
 8004fda:	60f8      	str	r0, [r7, #12]
  while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCCEx_EnablePLLSAI+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fde:	f7fc f835 	bl	800104c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCCEx_EnablePLLSAI+0x7c>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e007      	b.n	8005000 <HAL_RCCEx_EnablePLLSAI+0x8c>
  while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <HAL_RCCEx_EnablePLLSAI+0x98>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ffc:	d1ef      	bne.n	8004fde <HAL_RCCEx_EnablePLLSAI+0x6a>
    }
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	42470070 	.word	0x42470070
 800500c:	40023800 	.word	0x40023800

08005010 <HAL_RCCEx_DisablePLLSAI>:
/**
  * @brief  Disable PLLSAI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLSAI */
  __HAL_RCC_PLLSAI_DISABLE();
 8005016:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <HAL_RCCEx_DisablePLLSAI+0x40>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLSAI is disabled */
  tickstart = HAL_GetTick();
 800501c:	f7fc f816 	bl	800104c <HAL_GetTick>
 8005020:	6078      	str	r0, [r7, #4]
  while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCCEx_DisablePLLSAI+0x26>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005024:	f7fc f812 	bl	800104c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCCEx_DisablePLLSAI+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e007      	b.n	8005046 <HAL_RCCEx_DisablePLLSAI+0x36>
  while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005036:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <HAL_RCCEx_DisablePLLSAI+0x44>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005042:	d0ef      	beq.n	8005024 <HAL_RCCEx_DisablePLLSAI+0x14>
    }
  }

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	42470070 	.word	0x42470070
 8005054:	40023800 	.word	0x40023800

08005058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800505c:	b0a6      	sub	sp, #152	@ 0x98
 800505e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800507e:	4bc8      	ldr	r3, [pc, #800]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b0c      	cmp	r3, #12
 8005088:	f200 817e 	bhi.w	8005388 <HAL_RCC_GetSysClockFreq+0x330>
 800508c:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <HAL_RCC_GetSysClockFreq+0x3c>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050c9 	.word	0x080050c9
 8005098:	08005389 	.word	0x08005389
 800509c:	08005389 	.word	0x08005389
 80050a0:	08005389 	.word	0x08005389
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	08005389 	.word	0x08005389
 80050ac:	08005389 	.word	0x08005389
 80050b0:	08005389 	.word	0x08005389
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	08005389 	.word	0x08005389
 80050bc:	08005389 	.word	0x08005389
 80050c0:	08005389 	.word	0x08005389
 80050c4:	08005243 	.word	0x08005243
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c8:	4bb6      	ldr	r3, [pc, #728]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80050ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80050ce:	e15f      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d0:	4bb5      	ldr	r3, [pc, #724]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x350>)
 80050d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80050d6:	e15b      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d8:	4bb1      	ldr	r3, [pc, #708]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e4:	4bae      	ldr	r3, [pc, #696]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d031      	beq.n	8005154 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f0:	4bab      	ldr	r3, [pc, #684]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	2200      	movs	r2, #0
 80050f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	663b      	str	r3, [r7, #96]	@ 0x60
 8005104:	2300      	movs	r3, #0
 8005106:	667b      	str	r3, [r7, #100]	@ 0x64
 8005108:	4ba7      	ldr	r3, [pc, #668]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800510a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800510e:	462a      	mov	r2, r5
 8005110:	fb03 f202 	mul.w	r2, r3, r2
 8005114:	2300      	movs	r3, #0
 8005116:	4621      	mov	r1, r4
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	4413      	add	r3, r2
 800511e:	4aa2      	ldr	r2, [pc, #648]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005120:	4621      	mov	r1, r4
 8005122:	fba1 1202 	umull	r1, r2, r1, r2
 8005126:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005128:	460a      	mov	r2, r1
 800512a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800512c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800512e:	4413      	add	r3, r2
 8005130:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005136:	2200      	movs	r2, #0
 8005138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800513a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800513c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005140:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005144:	f00c faa0 	bl	8011688 <__aeabi_uldivmod>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4613      	mov	r3, r2
 800514e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005152:	e064      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005154:	4b92      	ldr	r3, [pc, #584]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	2200      	movs	r2, #0
 800515c:	653b      	str	r3, [r7, #80]	@ 0x50
 800515e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005168:	2300      	movs	r3, #0
 800516a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800516c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005170:	4622      	mov	r2, r4
 8005172:	462b      	mov	r3, r5
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f04f 0100 	mov.w	r1, #0
 800517c:	0159      	lsls	r1, r3, #5
 800517e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005182:	0150      	lsls	r0, r2, #5
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4621      	mov	r1, r4
 800518a:	1a51      	subs	r1, r2, r1
 800518c:	6139      	str	r1, [r7, #16]
 800518e:	4629      	mov	r1, r5
 8005190:	eb63 0301 	sbc.w	r3, r3, r1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a2:	4659      	mov	r1, fp
 80051a4:	018b      	lsls	r3, r1, #6
 80051a6:	4651      	mov	r1, sl
 80051a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ac:	4651      	mov	r1, sl
 80051ae:	018a      	lsls	r2, r1, #6
 80051b0:	4651      	mov	r1, sl
 80051b2:	ebb2 0801 	subs.w	r8, r2, r1
 80051b6:	4659      	mov	r1, fp
 80051b8:	eb63 0901 	sbc.w	r9, r3, r1
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d0:	4690      	mov	r8, r2
 80051d2:	4699      	mov	r9, r3
 80051d4:	4623      	mov	r3, r4
 80051d6:	eb18 0303 	adds.w	r3, r8, r3
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	462b      	mov	r3, r5
 80051de:	eb49 0303 	adc.w	r3, r9, r3
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051f0:	4629      	mov	r1, r5
 80051f2:	028b      	lsls	r3, r1, #10
 80051f4:	4621      	mov	r1, r4
 80051f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fa:	4621      	mov	r1, r4
 80051fc:	028a      	lsls	r2, r1, #10
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005206:	2200      	movs	r2, #0
 8005208:	643b      	str	r3, [r7, #64]	@ 0x40
 800520a:	647a      	str	r2, [r7, #68]	@ 0x44
 800520c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005210:	f00c fa3a 	bl	8011688 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800521e:	4b60      	ldr	r3, [pc, #384]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	0c1b      	lsrs	r3, r3, #16
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	3301      	adds	r3, #1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005230:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005240:	e0a6      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005242:	4b57      	ldr	r3, [pc, #348]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800524a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800524e:	4b54      	ldr	r3, [pc, #336]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02a      	beq.n	80052b0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b51      	ldr	r3, [pc, #324]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	2200      	movs	r2, #0
 8005262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005264:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800526c:	2100      	movs	r1, #0
 800526e:	4b4e      	ldr	r3, [pc, #312]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005270:	fb03 f201 	mul.w	r2, r3, r1
 8005274:	2300      	movs	r3, #0
 8005276:	fb00 f303 	mul.w	r3, r0, r3
 800527a:	4413      	add	r3, r2
 800527c:	4a4a      	ldr	r2, [pc, #296]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800527e:	fba0 1202 	umull	r1, r2, r0, r2
 8005282:	677a      	str	r2, [r7, #116]	@ 0x74
 8005284:	460a      	mov	r2, r1
 8005286:	673a      	str	r2, [r7, #112]	@ 0x70
 8005288:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800528a:	4413      	add	r3, r2
 800528c:	677b      	str	r3, [r7, #116]	@ 0x74
 800528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005292:	2200      	movs	r2, #0
 8005294:	633b      	str	r3, [r7, #48]	@ 0x30
 8005296:	637a      	str	r2, [r7, #52]	@ 0x34
 8005298:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800529c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80052a0:	f00c f9f2 	bl	8011688 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052ae:	e05b      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	2200      	movs	r2, #0
 80052b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	2300      	movs	r3, #0
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	f04f 0000 	mov.w	r0, #0
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	0159      	lsls	r1, r3, #5
 80052da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052de:	0150      	lsls	r0, r2, #5
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4641      	mov	r1, r8
 80052e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ea:	4649      	mov	r1, r9
 80052ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005304:	ebb2 040a 	subs.w	r4, r2, sl
 8005308:	eb63 050b 	sbc.w	r5, r3, fp
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	00eb      	lsls	r3, r5, #3
 8005316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800531a:	00e2      	lsls	r2, r4, #3
 800531c:	4614      	mov	r4, r2
 800531e:	461d      	mov	r5, r3
 8005320:	4643      	mov	r3, r8
 8005322:	18e3      	adds	r3, r4, r3
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	464b      	mov	r3, r9
 8005328:	eb45 0303 	adc.w	r3, r5, r3
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800533a:	4629      	mov	r1, r5
 800533c:	028b      	lsls	r3, r1, #10
 800533e:	4621      	mov	r1, r4
 8005340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005344:	4621      	mov	r1, r4
 8005346:	028a      	lsls	r2, r1, #10
 8005348:	4610      	mov	r0, r2
 800534a:	4619      	mov	r1, r3
 800534c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005350:	2200      	movs	r2, #0
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	61fa      	str	r2, [r7, #28]
 8005356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800535a:	f00c f995 	bl	8011688 <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4613      	mov	r3, r2
 8005364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005368:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0f1b      	lsrs	r3, r3, #28
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8005376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800537a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005386:	e003      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800538a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800538e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005394:	4618      	mov	r0, r3
 8005396:	3798      	adds	r7, #152	@ 0x98
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	01312d00 	.word	0x01312d00

080053ac <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80053b2:	f7fb fe4b 	bl	800104c <HAL_GetTick>
 80053b6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80053b8:	4b72      	ldr	r3, [pc, #456]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a71      	ldr	r2, [pc, #452]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c6:	f7fb fe41 	bl	800104c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e0d0      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80053d8:	4b6a      	ldr	r3, [pc, #424]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80053e4:	4b67      	ldr	r3, [pc, #412]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a66      	ldr	r2, [pc, #408]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80053ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80053f0:	f7fb fe2c 	bl	800104c <HAL_GetTick>
 80053f4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80053f6:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fe:	f7fb fe25 	bl	800104c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e0b2      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005414:	4b5b      	ldr	r3, [pc, #364]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ee      	bne.n	80053fe <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005420:	f7fb fe14 	bl	800104c <HAL_GetTick>
 8005424:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8005426:	4b57      	ldr	r3, [pc, #348]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a56      	ldr	r2, [pc, #344]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800542c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8005430:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005434:	f7fb fe0a 	bl	800104c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b64      	cmp	r3, #100	@ 0x64
 8005440:	d901      	bls.n	8005446 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e099      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005446:	4b4f      	ldr	r3, [pc, #316]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f0      	bne.n	8005434 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005452:	f7fb fdfb 	bl	800104c <HAL_GetTick>
 8005456:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005458:	4b4a      	ldr	r3, [pc, #296]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a49      	ldr	r2, [pc, #292]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800545e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005462:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005466:	f7fb fdf1 	bl	800104c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e080      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005478:	4b42      	ldr	r3, [pc, #264]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f0      	bne.n	8005466 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005484:	f7fb fde2 	bl	800104c <HAL_GetTick>
 8005488:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800548a:	4b3e      	ldr	r3, [pc, #248]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a3d      	ldr	r2, [pc, #244]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005490:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005494:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005498:	f7fb fdd8 	bl	800104c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e067      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80054aa:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80054b6:	f7fb fdc9 	bl	800104c <HAL_GetTick>
 80054ba:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80054bc:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a30      	ldr	r2, [pc, #192]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054ca:	f7fb fdbf 	bl	800104c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e04e      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80054dc:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80054e8:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054ea:	4a27      	ldr	r2, [pc, #156]	@ (8005588 <HAL_RCC_DeInit+0x1dc>)
 80054ec:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80054ee:	4b25      	ldr	r3, [pc, #148]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054f0:	4a25      	ldr	r2, [pc, #148]	@ (8005588 <HAL_RCC_DeInit+0x1dc>)
 80054f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80054f6:	4b23      	ldr	r3, [pc, #140]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 80054f8:	4a24      	ldr	r2, [pc, #144]	@ (800558c <HAL_RCC_DeInit+0x1e0>)
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80054fe:	4b21      	ldr	r3, [pc, #132]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4a20      	ldr	r2, [pc, #128]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005504:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005508:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800550a:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005510:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005514:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8005516:	4b1b      	ldr	r3, [pc, #108]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4a1a      	ldr	r2, [pc, #104]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800551c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005520:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8005522:	4b18      	ldr	r3, [pc, #96]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4a17      	ldr	r2, [pc, #92]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005528:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800552c:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	4a14      	ldr	r2, [pc, #80]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005538:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800553a:	4b12      	ldr	r3, [pc, #72]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4a11      	ldr	r2, [pc, #68]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005540:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005544:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005546:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	4a0e      	ldr	r2, [pc, #56]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005552:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005556:	4a0b      	ldr	r2, [pc, #44]	@ (8005584 <HAL_RCC_DeInit+0x1d8>)
 8005558:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800555e:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <HAL_RCC_DeInit+0x1e4>)
 8005560:	4a0c      	ldr	r2, [pc, #48]	@ (8005594 <HAL_RCC_DeInit+0x1e8>)
 8005562:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005564:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <HAL_RCC_DeInit+0x1ec>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f7fb fd2b 	bl	8000fc4 <HAL_InitTick>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8005578:	2300      	movs	r3, #0
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40023800 	.word	0x40023800
 8005588:	24003010 	.word	0x24003010
 800558c:	04003010 	.word	0x04003010
 8005590:	20000008 	.word	0x20000008
 8005594:	00f42400 	.word	0x00f42400
 8005598:	2000000c 	.word	0x2000000c

0800559c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e28d      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8083 	beq.w	80056c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055bc:	4b94      	ldr	r3, [pc, #592]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 030c 	and.w	r3, r3, #12
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d019      	beq.n	80055fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055c8:	4b91      	ldr	r3, [pc, #580]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d106      	bne.n	80055e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055e0:	d00c      	beq.n	80055fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	d112      	bne.n	8005614 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ee:	4b88      	ldr	r3, [pc, #544]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055fa:	d10b      	bne.n	8005614 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	4b84      	ldr	r3, [pc, #528]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05b      	beq.n	80056c0 <HAL_RCC_OscConfig+0x124>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d157      	bne.n	80056c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e25a      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800561c:	d106      	bne.n	800562c <HAL_RCC_OscConfig+0x90>
 800561e:	4b7c      	ldr	r3, [pc, #496]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a7b      	ldr	r2, [pc, #492]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e01d      	b.n	8005668 <HAL_RCC_OscConfig+0xcc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0xb4>
 8005636:	4b76      	ldr	r3, [pc, #472]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a75      	ldr	r2, [pc, #468]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 800563c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4b73      	ldr	r3, [pc, #460]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a72      	ldr	r2, [pc, #456]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e00b      	b.n	8005668 <HAL_RCC_OscConfig+0xcc>
 8005650:	4b6f      	ldr	r3, [pc, #444]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6e      	ldr	r2, [pc, #440]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b6c      	ldr	r3, [pc, #432]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6b      	ldr	r2, [pc, #428]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d013      	beq.n	8005698 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fb fcec 	bl	800104c <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005678:	f7fb fce8 	bl	800104c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	@ 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e21f      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b61      	ldr	r3, [pc, #388]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0xdc>
 8005696:	e014      	b.n	80056c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fb fcd8 	bl	800104c <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a0:	f7fb fcd4 	bl	800104c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	@ 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e20b      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b2:	4b57      	ldr	r3, [pc, #348]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x104>
 80056be:	e000      	b.n	80056c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d06f      	beq.n	80057ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056ce:	4b50      	ldr	r3, [pc, #320]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d017      	beq.n	800570a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056da:	4b4d      	ldr	r3, [pc, #308]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
        || \
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d105      	bne.n	80056f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f2:	4b47      	ldr	r3, [pc, #284]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80056fa:	2b0c      	cmp	r3, #12
 80056fc:	d11c      	bne.n	8005738 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fe:	4b44      	ldr	r3, [pc, #272]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d116      	bne.n	8005738 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570a:	4b41      	ldr	r3, [pc, #260]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCC_OscConfig+0x186>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e1d3      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005722:	4b3b      	ldr	r3, [pc, #236]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4937      	ldr	r1, [pc, #220]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	e03a      	b.n	80057ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d020      	beq.n	8005782 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005740:	4b34      	ldr	r3, [pc, #208]	@ (8005814 <HAL_RCC_OscConfig+0x278>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fb fc81 	bl	800104c <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800574e:	f7fb fc7d 	bl	800104c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e1b4      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005760:	4b2b      	ldr	r3, [pc, #172]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4925      	ldr	r1, [pc, #148]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	e015      	b.n	80057ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005782:	4b24      	ldr	r3, [pc, #144]	@ (8005814 <HAL_RCC_OscConfig+0x278>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fb fc60 	bl	800104c <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005790:	f7fb fc5c 	bl	800104c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e193      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d036      	beq.n	8005828 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c2:	4b15      	ldr	r3, [pc, #84]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fb fc40 	bl	800104c <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d0:	f7fb fc3c 	bl	800104c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e173      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <HAL_RCC_OscConfig+0x274>)
 80057e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x234>
 80057ee:	e01b      	b.n	8005828 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <HAL_RCC_OscConfig+0x27c>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f6:	f7fb fc29 	bl	800104c <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057fc:	e00e      	b.n	800581c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fe:	f7fb fc25 	bl	800104c <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d907      	bls.n	800581c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e15c      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
 8005810:	40023800 	.word	0x40023800
 8005814:	42470000 	.word	0x42470000
 8005818:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 800581e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1ea      	bne.n	80057fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8097 	beq.w	8005964 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800583a:	4b83      	ldr	r3, [pc, #524]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	4b7f      	ldr	r3, [pc, #508]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005854:	6413      	str	r3, [r2, #64]	@ 0x40
 8005856:	4b7c      	ldr	r3, [pc, #496]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005866:	4b79      	ldr	r3, [pc, #484]	@ (8005a4c <HAL_RCC_OscConfig+0x4b0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d118      	bne.n	80058a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005872:	4b76      	ldr	r3, [pc, #472]	@ (8005a4c <HAL_RCC_OscConfig+0x4b0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a75      	ldr	r2, [pc, #468]	@ (8005a4c <HAL_RCC_OscConfig+0x4b0>)
 8005878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800587c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587e:	f7fb fbe5 	bl	800104c <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	e008      	b.n	8005898 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005886:	f7fb fbe1 	bl	800104c <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e118      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005898:	4b6c      	ldr	r3, [pc, #432]	@ (8005a4c <HAL_RCC_OscConfig+0x4b0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d106      	bne.n	80058ba <HAL_RCC_OscConfig+0x31e>
 80058ac:	4b66      	ldr	r3, [pc, #408]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b0:	4a65      	ldr	r2, [pc, #404]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b8:	e01c      	b.n	80058f4 <HAL_RCC_OscConfig+0x358>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d10c      	bne.n	80058dc <HAL_RCC_OscConfig+0x340>
 80058c2:	4b61      	ldr	r3, [pc, #388]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c6:	4a60      	ldr	r2, [pc, #384]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ce:	4b5e      	ldr	r3, [pc, #376]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058da:	e00b      	b.n	80058f4 <HAL_RCC_OscConfig+0x358>
 80058dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e0:	4a59      	ldr	r2, [pc, #356]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058e8:	4b57      	ldr	r3, [pc, #348]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ec:	4a56      	ldr	r2, [pc, #344]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80058ee:	f023 0304 	bic.w	r3, r3, #4
 80058f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fb fba6 	bl	800104c <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fb fba2 	bl	800104c <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0d7      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ee      	beq.n	8005904 <HAL_RCC_OscConfig+0x368>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fb fb90 	bl	800104c <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fb fb8c 	bl	800104c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0c1      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005946:	4b40      	ldr	r3, [pc, #256]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1ee      	bne.n	8005930 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d105      	bne.n	8005964 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005958:	4b3b      	ldr	r3, [pc, #236]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	4a3a      	ldr	r2, [pc, #232]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 800595e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005962:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80ad 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800596e:	4b36      	ldr	r3, [pc, #216]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b08      	cmp	r3, #8
 8005978:	d060      	beq.n	8005a3c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d145      	bne.n	8005a0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005982:	4b33      	ldr	r3, [pc, #204]	@ (8005a50 <HAL_RCC_OscConfig+0x4b4>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fb fb60 	bl	800104c <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005990:	f7fb fb5c 	bl	800104c <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e093      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	4b29      	ldr	r3, [pc, #164]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	3b01      	subs	r3, #1
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	061b      	lsls	r3, r3, #24
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	491b      	ldr	r1, [pc, #108]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a50 <HAL_RCC_OscConfig+0x4b4>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e6:	f7fb fb31 	bl	800104c <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ee:	f7fb fb2d 	bl	800104c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e064      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a00:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x452>
 8005a0c:	e05c      	b.n	8005ac8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0e:	4b10      	ldr	r3, [pc, #64]	@ (8005a50 <HAL_RCC_OscConfig+0x4b4>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fb fb1a 	bl	800104c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fb fb16 	bl	800104c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e04d      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <HAL_RCC_OscConfig+0x4ac>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x480>
 8005a3a:	e045      	b.n	8005ac8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e040      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad4 <HAL_RCC_OscConfig+0x538>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d030      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d129      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d122      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a84:	4013      	ands	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d119      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d10f      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800

08005ad8 <HAL_RCC_GetOscConfig>:
  * @note   This function is only available in case of STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices.
  * @note   This function add the PLL/PLLR factor management
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	220f      	movs	r2, #15
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8005ae6:	4b49      	ldr	r3, [pc, #292]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005af2:	d104      	bne.n	8005afe <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	e00e      	b.n	8005b1c <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8005afe:	4b43      	ldr	r3, [pc, #268]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b0a:	d104      	bne.n	8005b16 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b12:	605a      	str	r2, [r3, #4]
 8005b14:	e002      	b.n	8005b1c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8005b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d103      	bne.n	8005b30 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e002      	b.n	8005b36 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8005b36:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	08db      	lsrs	r3, r3, #3
 8005b3c:	f003 021f 	and.w	r2, r3, #31
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8005b44:	4b31      	ldr	r3, [pc, #196]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d103      	bne.n	8005b58 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2205      	movs	r2, #5
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	e00c      	b.n	8005b72 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8005b58:	4b2c      	ldr	r3, [pc, #176]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d103      	bne.n	8005b6c <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	609a      	str	r2, [r3, #8]
 8005b6a:	e002      	b.n	8005b72 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005b72:	4b26      	ldr	r3, [pc, #152]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d103      	bne.n	8005b86 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	615a      	str	r2, [r3, #20]
 8005b84:	e002      	b.n	8005b8c <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 8005b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b98:	d103      	bne.n	8005ba2 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	619a      	str	r2, [r3, #24]
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ba8:	4b18      	ldr	r3, [pc, #96]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8005bb4:	4b15      	ldr	r3, [pc, #84]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bc0:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8005bce:	4b0f      	ldr	r3, [pc, #60]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bd6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	0c1a      	lsrs	r2, r3, #16
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	0e1b      	lsrs	r3, r3, #24
 8005be8:	f003 020f 	and.w	r2, r3, #15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005bf0:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <HAL_RCC_GetOscConfig+0x134>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	0f1b      	lsrs	r3, r3, #28
 8005bf6:	f003 0207 	and.w	r2, r3, #7
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800

08005c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e041      	b.n	8005ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fa fe9e 	bl	8000978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f005 fa3a 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <HAL_TIM_Base_DeInit+0x40>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_Base_DeInit+0x40>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fa fe6a 	bl	80009c8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d001      	beq.n	8005d96 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e046      	b.n	8005e24 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a23      	ldr	r2, [pc, #140]	@ (8005e30 <HAL_TIM_Base_Start+0xb2>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db0:	d01d      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e34 <HAL_TIM_Base_Start+0xb6>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <HAL_TIM_Base_Start+0xba>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1c      	ldr	r2, [pc, #112]	@ (8005e3c <HAL_TIM_Base_Start+0xbe>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e40 <HAL_TIM_Base_Start+0xc2>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <HAL_TIM_Base_Start+0xc6>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_TIM_Base_Start+0x70>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a17      	ldr	r2, [pc, #92]	@ (8005e48 <HAL_TIM_Base_Start+0xca>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d111      	bne.n	8005e12 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b06      	cmp	r3, #6
 8005dfe:	d010      	beq.n	8005e22 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e10:	e007      	b.n	8005e22 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800

08005e4c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10f      	bne.n	8005e84 <HAL_TIM_Base_Stop+0x38>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6a1a      	ldr	r2, [r3, #32]
 8005e6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d107      	bne.n	8005e84 <HAL_TIM_Base_Stop+0x38>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e04e      	b.n	8005f50 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a23      	ldr	r2, [pc, #140]	@ (8005f5c <HAL_TIM_Base_Start_IT+0xc2>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005edc:	d01d      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f60 <HAL_TIM_Base_Start_IT+0xc6>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1d      	ldr	r2, [pc, #116]	@ (8005f64 <HAL_TIM_Base_Start_IT+0xca>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f68 <HAL_TIM_Base_Start_IT+0xce>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1a      	ldr	r2, [pc, #104]	@ (8005f6c <HAL_TIM_Base_Start_IT+0xd2>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a19      	ldr	r2, [pc, #100]	@ (8005f70 <HAL_TIM_Base_Start_IT+0xd6>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0x80>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <HAL_TIM_Base_Start_IT+0xda>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d111      	bne.n	8005f3e <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b06      	cmp	r3, #6
 8005f2a:	d010      	beq.n	8005f4e <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	e007      	b.n	8005f4e <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40001800 	.word	0x40001800

08005f78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a1a      	ldr	r2, [r3, #32]
 8005f96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_TIM_Base_Stop_IT+0x48>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6a1a      	ldr	r2, [r3, #32]
 8005fa6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_Base_Stop_IT+0x48>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, const uint32_t *pData, uint16_t Length)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e07a      	b.n	80060ea <HAL_TIM_Base_Start_DMA+0x114>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d125      	bne.n	800604c <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) || (Length == 0U))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_TIM_Base_Start_DMA+0x36>
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e06c      	b.n	80060ea <HAL_TIM_Base_Start_DMA+0x114>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	4a35      	ldr	r2, [pc, #212]	@ (80060f4 <HAL_TIM_Base_Start_DMA+0x11e>)
 800601e:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	4a34      	ldr	r2, [pc, #208]	@ (80060f8 <HAL_TIM_Base_Start_DMA+0x122>)
 8006026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	4a33      	ldr	r2, [pc, #204]	@ (80060fc <HAL_TIM_Base_Start_DMA+0x126>)
 800602e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the DMA stream */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a18      	ldr	r0, [r3, #32]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	332c      	adds	r3, #44	@ 0x2c
 800603c:	461a      	mov	r2, r3
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	f7fc fadb 	bl	80025fa <HAL_DMA_Start_IT>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <HAL_TIM_Base_Start_DMA+0x7e>
 800604a:	e001      	b.n	8006050 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e04c      	b.n	80060ea <HAL_TIM_Base_Start_DMA+0x114>
                       Length) != HAL_OK)
  {
    /* Return error status */
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e04a      	b.n	80060ea <HAL_TIM_Base_Start_DMA+0x114>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a25      	ldr	r2, [pc, #148]	@ (8006100 <HAL_TIM_Base_Start_DMA+0x12a>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d022      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006076:	d01d      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a21      	ldr	r2, [pc, #132]	@ (8006104 <HAL_TIM_Base_Start_DMA+0x12e>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d018      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a20      	ldr	r2, [pc, #128]	@ (8006108 <HAL_TIM_Base_Start_DMA+0x132>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d013      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1e      	ldr	r2, [pc, #120]	@ (800610c <HAL_TIM_Base_Start_DMA+0x136>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <HAL_TIM_Base_Start_DMA+0x13a>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d009      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006114 <HAL_TIM_Base_Start_DMA+0x13e>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIM_Base_Start_DMA+0xde>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006118 <HAL_TIM_Base_Start_DMA+0x142>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d111      	bne.n	80060d8 <HAL_TIM_Base_Start_DMA+0x102>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d010      	beq.n	80060e8 <HAL_TIM_Base_Start_DMA+0x112>
    {
      __HAL_TIM_ENABLE(htim);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e007      	b.n	80060e8 <HAL_TIM_Base_Start_DMA+0x112>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	0800b035 	.word	0x0800b035
 80060f8:	0800b063 	.word	0x0800b063
 80060fc:	0800ad63 	.word	0x0800ad63
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40001800 	.word	0x40001800

0800611c <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006132:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fc fb26 	bl	800278a <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <HAL_TIM_Base_Stop_DMA+0x52>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	f240 4344 	movw	r3, #1092	@ 0x444
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d107      	bne.n	800616e <HAL_TIM_Base_Stop_DMA+0x52>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e041      	b.n	8006216 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f88d 	bl	80062c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3304      	adds	r3, #4
 80061bc:	4619      	mov	r1, r3
 80061be:	4610      	mov	r0, r2
 80061c0:	f004 ff82 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <HAL_TIM_OC_DeInit+0x40>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6a1a      	ldr	r2, [r3, #32]
 8006244:	f240 4344 	movw	r3, #1092	@ 0x444
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d107      	bne.n	800625e <HAL_TIM_OC_DeInit+0x40>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f83b 	bl	80062da <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_TIM_OC_Start+0x24>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b01      	cmp	r3, #1
 8006308:	bf14      	ite	ne
 800630a:	2301      	movne	r3, #1
 800630c:	2300      	moveq	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	e022      	b.n	8006358 <HAL_TIM_OC_Start+0x6a>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b04      	cmp	r3, #4
 8006316:	d109      	bne.n	800632c <HAL_TIM_OC_Start+0x3e>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	bf14      	ite	ne
 8006324:	2301      	movne	r3, #1
 8006326:	2300      	moveq	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e015      	b.n	8006358 <HAL_TIM_OC_Start+0x6a>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b08      	cmp	r3, #8
 8006330:	d109      	bne.n	8006346 <HAL_TIM_OC_Start+0x58>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e008      	b.n	8006358 <HAL_TIM_OC_Start+0x6a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e07c      	b.n	800645a <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <HAL_TIM_OC_Start+0x82>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800636e:	e013      	b.n	8006398 <HAL_TIM_OC_Start+0xaa>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d104      	bne.n	8006380 <HAL_TIM_OC_Start+0x92>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800637e:	e00b      	b.n	8006398 <HAL_TIM_OC_Start+0xaa>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b08      	cmp	r3, #8
 8006384:	d104      	bne.n	8006390 <HAL_TIM_OC_Start+0xa2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800638e:	e003      	b.n	8006398 <HAL_TIM_OC_Start+0xaa>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f005 fb41 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006464 <HAL_TIM_OC_Start+0x176>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIM_OC_Start+0xcc>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <HAL_TIM_OC_Start+0x17a>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d101      	bne.n	80063be <HAL_TIM_OC_Start+0xd0>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <HAL_TIM_OC_Start+0xd2>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a22      	ldr	r2, [pc, #136]	@ (8006464 <HAL_TIM_OC_Start+0x176>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e6:	d01d      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1f      	ldr	r2, [pc, #124]	@ (800646c <HAL_TIM_OC_Start+0x17e>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006470 <HAL_TIM_OC_Start+0x182>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1c      	ldr	r2, [pc, #112]	@ (8006474 <HAL_TIM_OC_Start+0x186>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a17      	ldr	r2, [pc, #92]	@ (8006468 <HAL_TIM_OC_Start+0x17a>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_TIM_OC_Start+0x18a>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIM_OC_Start+0x136>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a17      	ldr	r2, [pc, #92]	@ (800647c <HAL_TIM_OC_Start+0x18e>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d111      	bne.n	8006448 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b06      	cmp	r3, #6
 8006434:	d010      	beq.n	8006458 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	e007      	b.n	8006458 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40010400 	.word	0x40010400
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40014000 	.word	0x40014000
 800647c:	40001800 	.word	0x40001800

08006480 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f005 fac8 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a2e      	ldr	r2, [pc, #184]	@ (8006558 <HAL_TIM_OC_Stop+0xd8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_TIM_OC_Stop+0x2c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2d      	ldr	r2, [pc, #180]	@ (800655c <HAL_TIM_OC_Stop+0xdc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_OC_Stop+0x30>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_OC_Stop+0x32>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d017      	beq.n	80064e6 <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10f      	bne.n	80064e6 <HAL_TIM_OC_Stop+0x66>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_OC_Stop+0x66>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <HAL_TIM_OC_Stop+0x96>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8006500:	4013      	ands	r3, r2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d107      	bne.n	8006516 <HAL_TIM_OC_Stop+0x96>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <HAL_TIM_OC_Stop+0xa6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006524:	e013      	b.n	800654e <HAL_TIM_OC_Stop+0xce>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d104      	bne.n	8006536 <HAL_TIM_OC_Stop+0xb6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006534:	e00b      	b.n	800654e <HAL_TIM_OC_Stop+0xce>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b08      	cmp	r3, #8
 800653a:	d104      	bne.n	8006546 <HAL_TIM_OC_Stop+0xc6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006544:	e003      	b.n	800654e <HAL_TIM_OC_Stop+0xce>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40010000 	.word	0x40010000
 800655c:	40010400 	.word	0x40010400

08006560 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <HAL_TIM_OC_Start_IT+0x28>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf14      	ite	ne
 8006580:	2301      	movne	r3, #1
 8006582:	2300      	moveq	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e022      	b.n	80065ce <HAL_TIM_OC_Start_IT+0x6e>
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2b04      	cmp	r3, #4
 800658c:	d109      	bne.n	80065a2 <HAL_TIM_OC_Start_IT+0x42>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b01      	cmp	r3, #1
 8006598:	bf14      	ite	ne
 800659a:	2301      	movne	r3, #1
 800659c:	2300      	moveq	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	e015      	b.n	80065ce <HAL_TIM_OC_Start_IT+0x6e>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d109      	bne.n	80065bc <HAL_TIM_OC_Start_IT+0x5c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e008      	b.n	80065ce <HAL_TIM_OC_Start_IT+0x6e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e0c7      	b.n	8006766 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_OC_Start_IT+0x86>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065e4:	e013      	b.n	800660e <HAL_TIM_OC_Start_IT+0xae>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d104      	bne.n	80065f6 <HAL_TIM_OC_Start_IT+0x96>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f4:	e00b      	b.n	800660e <HAL_TIM_OC_Start_IT+0xae>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d104      	bne.n	8006606 <HAL_TIM_OC_Start_IT+0xa6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006604:	e003      	b.n	800660e <HAL_TIM_OC_Start_IT+0xae>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b0c      	cmp	r3, #12
 8006612:	d841      	bhi.n	8006698 <HAL_TIM_OC_Start_IT+0x138>
 8006614:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <HAL_TIM_OC_Start_IT+0xbc>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006651 	.word	0x08006651
 8006620:	08006699 	.word	0x08006699
 8006624:	08006699 	.word	0x08006699
 8006628:	08006699 	.word	0x08006699
 800662c:	08006663 	.word	0x08006663
 8006630:	08006699 	.word	0x08006699
 8006634:	08006699 	.word	0x08006699
 8006638:	08006699 	.word	0x08006699
 800663c:	08006675 	.word	0x08006675
 8006640:	08006699 	.word	0x08006699
 8006644:	08006699 	.word	0x08006699
 8006648:	08006699 	.word	0x08006699
 800664c:	08006687 	.word	0x08006687
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0202 	orr.w	r2, r2, #2
 800665e:	60da      	str	r2, [r3, #12]
      break;
 8006660:	e01d      	b.n	800669e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f042 0204 	orr.w	r2, r2, #4
 8006670:	60da      	str	r2, [r3, #12]
      break;
 8006672:	e014      	b.n	800669e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0208 	orr.w	r2, r2, #8
 8006682:	60da      	str	r2, [r3, #12]
      break;
 8006684:	e00b      	b.n	800669e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0210 	orr.w	r2, r2, #16
 8006694:	60da      	str	r2, [r3, #12]
      break;
 8006696:	e002      	b.n	800669e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
      break;
 800669c:	bf00      	nop
  }

  if (status == HAL_OK)
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d15f      	bne.n	8006764 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2201      	movs	r2, #1
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f005 f9bb 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006770 <HAL_TIM_OC_Start_IT+0x210>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_TIM_OC_Start_IT+0x166>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006774 <HAL_TIM_OC_Start_IT+0x214>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d101      	bne.n	80066ca <HAL_TIM_OC_Start_IT+0x16a>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <HAL_TIM_OC_Start_IT+0x16c>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a22      	ldr	r2, [pc, #136]	@ (8006770 <HAL_TIM_OC_Start_IT+0x210>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d022      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f2:	d01d      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006778 <HAL_TIM_OC_Start_IT+0x218>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d018      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1e      	ldr	r2, [pc, #120]	@ (800677c <HAL_TIM_OC_Start_IT+0x21c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1c      	ldr	r2, [pc, #112]	@ (8006780 <HAL_TIM_OC_Start_IT+0x220>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00e      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <HAL_TIM_OC_Start_IT+0x214>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a18      	ldr	r2, [pc, #96]	@ (8006784 <HAL_TIM_OC_Start_IT+0x224>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <HAL_TIM_OC_Start_IT+0x1d0>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a17      	ldr	r2, [pc, #92]	@ (8006788 <HAL_TIM_OC_Start_IT+0x228>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d111      	bne.n	8006754 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b06      	cmp	r3, #6
 8006740:	d010      	beq.n	8006764 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006752:	e007      	b.n	8006764 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40010000 	.word	0x40010000
 8006774:	40010400 	.word	0x40010400
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40014000 	.word	0x40014000
 8006788:	40001800 	.word	0x40001800

0800678c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d841      	bhi.n	8006824 <HAL_TIM_OC_Stop_IT+0x98>
 80067a0:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	08006825 	.word	0x08006825
 80067b0:	08006825 	.word	0x08006825
 80067b4:	08006825 	.word	0x08006825
 80067b8:	080067ef 	.word	0x080067ef
 80067bc:	08006825 	.word	0x08006825
 80067c0:	08006825 	.word	0x08006825
 80067c4:	08006825 	.word	0x08006825
 80067c8:	08006801 	.word	0x08006801
 80067cc:	08006825 	.word	0x08006825
 80067d0:	08006825 	.word	0x08006825
 80067d4:	08006825 	.word	0x08006825
 80067d8:	08006813 	.word	0x08006813
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0202 	bic.w	r2, r2, #2
 80067ea:	60da      	str	r2, [r3, #12]
      break;
 80067ec:	e01d      	b.n	800682a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0204 	bic.w	r2, r2, #4
 80067fc:	60da      	str	r2, [r3, #12]
      break;
 80067fe:	e014      	b.n	800682a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0208 	bic.w	r2, r2, #8
 800680e:	60da      	str	r2, [r3, #12]
      break;
 8006810:	e00b      	b.n	800682a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0210 	bic.w	r2, r2, #16
 8006820:	60da      	str	r2, [r3, #12]
      break;
 8006822:	e002      	b.n	800682a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      break;
 8006828:	bf00      	nop
  }

  if (status == HAL_OK)
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d161      	bne.n	80068f4 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2200      	movs	r2, #0
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f005 f8f5 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2f      	ldr	r2, [pc, #188]	@ (8006900 <HAL_TIM_OC_Stop_IT+0x174>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_TIM_OC_Stop_IT+0xc6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a2d      	ldr	r2, [pc, #180]	@ (8006904 <HAL_TIM_OC_Stop_IT+0x178>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d101      	bne.n	8006856 <HAL_TIM_OC_Stop_IT+0xca>
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <HAL_TIM_OC_Stop_IT+0xcc>
 8006856:	2300      	movs	r3, #0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d017      	beq.n	800688c <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10f      	bne.n	800688c <HAL_TIM_OC_Stop_IT+0x100>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	f240 4344 	movw	r3, #1092	@ 0x444
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d107      	bne.n	800688c <HAL_TIM_OC_Stop_IT+0x100>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800688a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1a      	ldr	r2, [r3, #32]
 8006892:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10f      	bne.n	80068bc <HAL_TIM_OC_Stop_IT+0x130>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <HAL_TIM_OC_Stop_IT+0x130>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <HAL_TIM_OC_Stop_IT+0x140>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068ca:	e013      	b.n	80068f4 <HAL_TIM_OC_Stop_IT+0x168>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d104      	bne.n	80068dc <HAL_TIM_OC_Stop_IT+0x150>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068da:	e00b      	b.n	80068f4 <HAL_TIM_OC_Stop_IT+0x168>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d104      	bne.n	80068ec <HAL_TIM_OC_Stop_IT+0x160>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068ea:	e003      	b.n	80068f4 <HAL_TIM_OC_Stop_IT+0x168>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400

08006908 <HAL_TIM_OC_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                       uint16_t Length)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <HAL_TIM_OC_Start_DMA+0x2c>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	bf0c      	ite	eq
 800692c:	2301      	moveq	r3, #1
 800692e:	2300      	movne	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	e022      	b.n	800697a <HAL_TIM_OC_Start_DMA+0x72>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b04      	cmp	r3, #4
 8006938:	d109      	bne.n	800694e <HAL_TIM_OC_Start_DMA+0x46>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	e015      	b.n	800697a <HAL_TIM_OC_Start_DMA+0x72>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b08      	cmp	r3, #8
 8006952:	d109      	bne.n	8006968 <HAL_TIM_OC_Start_DMA+0x60>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	bf0c      	ite	eq
 8006960:	2301      	moveq	r3, #1
 8006962:	2300      	movne	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e008      	b.n	800697a <HAL_TIM_OC_Start_DMA+0x72>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_TIM_OC_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800697e:	2302      	movs	r3, #2
 8006980:	e171      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_TIM_OC_Start_DMA+0x94>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e022      	b.n	80069e2 <HAL_TIM_OC_Start_DMA+0xda>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d109      	bne.n	80069b6 <HAL_TIM_OC_Start_DMA+0xae>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	bf0c      	ite	eq
 80069ae:	2301      	moveq	r3, #1
 80069b0:	2300      	movne	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e015      	b.n	80069e2 <HAL_TIM_OC_Start_DMA+0xda>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d109      	bne.n	80069d0 <HAL_TIM_OC_Start_DMA+0xc8>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e008      	b.n	80069e2 <HAL_TIM_OC_Start_DMA+0xda>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf0c      	ite	eq
 80069dc:	2301      	moveq	r3, #1
 80069de:	2300      	movne	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d024      	beq.n	8006a30 <HAL_TIM_OC_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_TIM_OC_Start_DMA+0xea>
 80069ec:	887b      	ldrh	r3, [r7, #2]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_TIM_OC_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e137      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_OC_Start_DMA+0xfe>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a04:	e016      	b.n	8006a34 <HAL_TIM_OC_Start_DMA+0x12c>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_OC_Start_DMA+0x10e>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a14:	e00e      	b.n	8006a34 <HAL_TIM_OC_Start_DMA+0x12c>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_OC_Start_DMA+0x11e>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a24:	e006      	b.n	8006a34 <HAL_TIM_OC_Start_DMA+0x12c>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a2e:	e001      	b.n	8006a34 <HAL_TIM_OC_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e118      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
  }

  switch (Channel)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b0c      	cmp	r3, #12
 8006a38:	f200 80ae 	bhi.w	8006b98 <HAL_TIM_OC_Start_DMA+0x290>
 8006a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a44 <HAL_TIM_OC_Start_DMA+0x13c>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006a79 	.word	0x08006a79
 8006a48:	08006b99 	.word	0x08006b99
 8006a4c:	08006b99 	.word	0x08006b99
 8006a50:	08006b99 	.word	0x08006b99
 8006a54:	08006ac1 	.word	0x08006ac1
 8006a58:	08006b99 	.word	0x08006b99
 8006a5c:	08006b99 	.word	0x08006b99
 8006a60:	08006b99 	.word	0x08006b99
 8006a64:	08006b09 	.word	0x08006b09
 8006a68:	08006b99 	.word	0x08006b99
 8006a6c:	08006b99 	.word	0x08006b99
 8006a70:	08006b99 	.word	0x08006b99
 8006a74:	08006b51 	.word	0x08006b51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c70 <HAL_TIM_OC_Start_DMA+0x368>)
 8006a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a84:	4a7b      	ldr	r2, [pc, #492]	@ (8006c74 <HAL_TIM_OC_Start_DMA+0x36c>)
 8006a86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c78 <HAL_TIM_OC_Start_DMA+0x370>)
 8006a8e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3334      	adds	r3, #52	@ 0x34
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	887b      	ldrh	r3, [r7, #2]
 8006aa0:	f7fb fdab 	bl	80025fa <HAL_DMA_Start_IT>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_TIM_OC_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e0db      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006abc:	60da      	str	r2, [r3, #12]
      break;
 8006abe:	e06e      	b.n	8006b9e <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8006c70 <HAL_TIM_OC_Start_DMA+0x368>)
 8006ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	4a69      	ldr	r2, [pc, #420]	@ (8006c74 <HAL_TIM_OC_Start_DMA+0x36c>)
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad4:	4a68      	ldr	r2, [pc, #416]	@ (8006c78 <HAL_TIM_OC_Start_DMA+0x370>)
 8006ad6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3338      	adds	r3, #56	@ 0x38
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	887b      	ldrh	r3, [r7, #2]
 8006ae8:	f7fb fd87 	bl	80025fa <HAL_DMA_Start_IT>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_TIM_OC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e0b7      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b04:	60da      	str	r2, [r3, #12]
      break;
 8006b06:	e04a      	b.n	8006b9e <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	4a58      	ldr	r2, [pc, #352]	@ (8006c70 <HAL_TIM_OC_Start_DMA+0x368>)
 8006b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b14:	4a57      	ldr	r2, [pc, #348]	@ (8006c74 <HAL_TIM_OC_Start_DMA+0x36c>)
 8006b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	4a56      	ldr	r2, [pc, #344]	@ (8006c78 <HAL_TIM_OC_Start_DMA+0x370>)
 8006b1e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	333c      	adds	r3, #60	@ 0x3c
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	887b      	ldrh	r3, [r7, #2]
 8006b30:	f7fb fd63 	bl	80025fa <HAL_DMA_Start_IT>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_TIM_OC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e093      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b4c:	60da      	str	r2, [r3, #12]
      break;
 8006b4e:	e026      	b.n	8006b9e <HAL_TIM_OC_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	4a46      	ldr	r2, [pc, #280]	@ (8006c70 <HAL_TIM_OC_Start_DMA+0x368>)
 8006b56:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	4a45      	ldr	r2, [pc, #276]	@ (8006c74 <HAL_TIM_OC_Start_DMA+0x36c>)
 8006b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	4a44      	ldr	r2, [pc, #272]	@ (8006c78 <HAL_TIM_OC_Start_DMA+0x370>)
 8006b66:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3340      	adds	r3, #64	@ 0x40
 8006b74:	461a      	mov	r2, r3
 8006b76:	887b      	ldrh	r3, [r7, #2]
 8006b78:	f7fb fd3f 	bl	80025fa <HAL_DMA_Start_IT>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_TIM_OC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e06f      	b.n	8006c66 <HAL_TIM_OC_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b94:	60da      	str	r2, [r3, #12]
      break;
 8006b96:	e002      	b.n	8006b9e <HAL_TIM_OC_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d15f      	bne.n	8006c64 <HAL_TIM_OC_Start_DMA+0x35c>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f004 ff3b 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a31      	ldr	r2, [pc, #196]	@ (8006c7c <HAL_TIM_OC_Start_DMA+0x374>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_TIM_OC_Start_DMA+0x2be>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006c80 <HAL_TIM_OC_Start_DMA+0x378>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_OC_Start_DMA+0x2c2>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <HAL_TIM_OC_Start_DMA+0x2c4>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_TIM_OC_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bde:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a25      	ldr	r2, [pc, #148]	@ (8006c7c <HAL_TIM_OC_Start_DMA+0x374>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d022      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf2:	d01d      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a22      	ldr	r2, [pc, #136]	@ (8006c84 <HAL_TIM_OC_Start_DMA+0x37c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d018      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a21      	ldr	r2, [pc, #132]	@ (8006c88 <HAL_TIM_OC_Start_DMA+0x380>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c8c <HAL_TIM_OC_Start_DMA+0x384>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00e      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1a      	ldr	r2, [pc, #104]	@ (8006c80 <HAL_TIM_OC_Start_DMA+0x378>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <HAL_TIM_OC_Start_DMA+0x388>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d004      	beq.n	8006c30 <HAL_TIM_OC_Start_DMA+0x328>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c94 <HAL_TIM_OC_Start_DMA+0x38c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d111      	bne.n	8006c54 <HAL_TIM_OC_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b06      	cmp	r3, #6
 8006c40:	d010      	beq.n	8006c64 <HAL_TIM_OC_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0201 	orr.w	r2, r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c52:	e007      	b.n	8006c64 <HAL_TIM_OC_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0201 	orr.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	0800adf5 	.word	0x0800adf5
 8006c74:	0800ae9d 	.word	0x0800ae9d
 8006c78:	0800ad63 	.word	0x0800ad63
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40000800 	.word	0x40000800
 8006c8c:	40000c00 	.word	0x40000c00
 8006c90:	40014000 	.word	0x40014000
 8006c94:	40001800 	.word	0x40001800

08006c98 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d855      	bhi.n	8006d58 <HAL_TIM_OC_Stop_DMA+0xc0>
 8006cac:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <HAL_TIM_OC_Stop_DMA+0x1c>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006d59 	.word	0x08006d59
 8006cbc:	08006d59 	.word	0x08006d59
 8006cc0:	08006d59 	.word	0x08006d59
 8006cc4:	08006d05 	.word	0x08006d05
 8006cc8:	08006d59 	.word	0x08006d59
 8006ccc:	08006d59 	.word	0x08006d59
 8006cd0:	08006d59 	.word	0x08006d59
 8006cd4:	08006d21 	.word	0x08006d21
 8006cd8:	08006d59 	.word	0x08006d59
 8006cdc:	08006d59 	.word	0x08006d59
 8006ce0:	08006d59 	.word	0x08006d59
 8006ce4:	08006d3d 	.word	0x08006d3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006cf6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fb fd44 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 8006d02:	e02c      	b.n	8006d5e <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fb fd36 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 8006d1e:	e01e      	b.n	8006d5e <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fb fd28 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 8006d3a:	e010      	b.n	8006d5e <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fb fd1a 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 8006d56:	e002      	b.n	8006d5e <HAL_TIM_OC_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d161      	bne.n	8006e28 <HAL_TIM_OC_Stop_DMA+0x190>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f004 fe5b 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2f      	ldr	r2, [pc, #188]	@ (8006e34 <HAL_TIM_OC_Stop_DMA+0x19c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_OC_Stop_DMA+0xee>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a2d      	ldr	r2, [pc, #180]	@ (8006e38 <HAL_TIM_OC_Stop_DMA+0x1a0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d101      	bne.n	8006d8a <HAL_TIM_OC_Stop_DMA+0xf2>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_TIM_OC_Stop_DMA+0xf4>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d017      	beq.n	8006dc0 <HAL_TIM_OC_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6a1a      	ldr	r2, [r3, #32]
 8006d96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10f      	bne.n	8006dc0 <HAL_TIM_OC_Stop_DMA+0x128>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6a1a      	ldr	r2, [r3, #32]
 8006da6:	f240 4344 	movw	r3, #1092	@ 0x444
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d107      	bne.n	8006dc0 <HAL_TIM_OC_Stop_DMA+0x128>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a1a      	ldr	r2, [r3, #32]
 8006dc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10f      	bne.n	8006df0 <HAL_TIM_OC_Stop_DMA+0x158>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_OC_Stop_DMA+0x158>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <HAL_TIM_OC_Stop_DMA+0x168>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dfe:	e013      	b.n	8006e28 <HAL_TIM_OC_Stop_DMA+0x190>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d104      	bne.n	8006e10 <HAL_TIM_OC_Stop_DMA+0x178>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e0e:	e00b      	b.n	8006e28 <HAL_TIM_OC_Stop_DMA+0x190>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d104      	bne.n	8006e20 <HAL_TIM_OC_Stop_DMA+0x188>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e1e:	e003      	b.n	8006e28 <HAL_TIM_OC_Stop_DMA+0x190>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40010400 	.word	0x40010400

08006e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e041      	b.n	8006ed2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f88d 	bl	8006f82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f004 f924 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6a1a      	ldr	r2, [r3, #32]
 8006ef0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10f      	bne.n	8006f1a <HAL_TIM_PWM_DeInit+0x40>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d107      	bne.n	8006f1a <HAL_TIM_PWM_DeInit+0x40>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f83b 	bl	8006f96 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <HAL_TIM_PWM_Start+0x24>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e022      	b.n	8007014 <HAL_TIM_PWM_Start+0x6a>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d109      	bne.n	8006fe8 <HAL_TIM_PWM_Start+0x3e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	e015      	b.n	8007014 <HAL_TIM_PWM_Start+0x6a>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d109      	bne.n	8007002 <HAL_TIM_PWM_Start+0x58>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	bf14      	ite	ne
 8006ffa:	2301      	movne	r3, #1
 8006ffc:	2300      	moveq	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e008      	b.n	8007014 <HAL_TIM_PWM_Start+0x6a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b01      	cmp	r3, #1
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e07c      	b.n	8007116 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <HAL_TIM_PWM_Start+0x82>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2202      	movs	r2, #2
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800702a:	e013      	b.n	8007054 <HAL_TIM_PWM_Start+0xaa>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b04      	cmp	r3, #4
 8007030:	d104      	bne.n	800703c <HAL_TIM_PWM_Start+0x92>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800703a:	e00b      	b.n	8007054 <HAL_TIM_PWM_Start+0xaa>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b08      	cmp	r3, #8
 8007040:	d104      	bne.n	800704c <HAL_TIM_PWM_Start+0xa2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800704a:	e003      	b.n	8007054 <HAL_TIM_PWM_Start+0xaa>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f004 fce3 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2e      	ldr	r2, [pc, #184]	@ (8007120 <HAL_TIM_PWM_Start+0x176>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIM_PWM_Start+0xcc>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2c      	ldr	r2, [pc, #176]	@ (8007124 <HAL_TIM_PWM_Start+0x17a>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_TIM_PWM_Start+0xd0>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_TIM_PWM_Start+0xd2>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800708e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a22      	ldr	r2, [pc, #136]	@ (8007120 <HAL_TIM_PWM_Start+0x176>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a2:	d01d      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007128 <HAL_TIM_PWM_Start+0x17e>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d018      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1e      	ldr	r2, [pc, #120]	@ (800712c <HAL_TIM_PWM_Start+0x182>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007130 <HAL_TIM_PWM_Start+0x186>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a17      	ldr	r2, [pc, #92]	@ (8007124 <HAL_TIM_PWM_Start+0x17a>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a18      	ldr	r2, [pc, #96]	@ (8007134 <HAL_TIM_PWM_Start+0x18a>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIM_PWM_Start+0x136>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <HAL_TIM_PWM_Start+0x18e>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d111      	bne.n	8007104 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d010      	beq.n	8007114 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0201 	orr.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	e007      	b.n	8007114 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0201 	orr.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40010000 	.word	0x40010000
 8007124:	40010400 	.word	0x40010400
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40014000 	.word	0x40014000
 8007138:	40001800 	.word	0x40001800

0800713c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f004 fc6a 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a2e      	ldr	r2, [pc, #184]	@ (8007214 <HAL_TIM_PWM_Stop+0xd8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d004      	beq.n	8007168 <HAL_TIM_PWM_Stop+0x2c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2d      	ldr	r2, [pc, #180]	@ (8007218 <HAL_TIM_PWM_Stop+0xdc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d101      	bne.n	800716c <HAL_TIM_PWM_Stop+0x30>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <HAL_TIM_PWM_Stop+0x32>
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d017      	beq.n	80071a2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	f241 1311 	movw	r3, #4369	@ 0x1111
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10f      	bne.n	80071a2 <HAL_TIM_PWM_Stop+0x66>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a1a      	ldr	r2, [r3, #32]
 8007188:	f240 4344 	movw	r3, #1092	@ 0x444
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_PWM_Stop+0x66>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a1a      	ldr	r2, [r3, #32]
 80071a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10f      	bne.n	80071d2 <HAL_TIM_PWM_Stop+0x96>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6a1a      	ldr	r2, [r3, #32]
 80071b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80071bc:	4013      	ands	r3, r2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d107      	bne.n	80071d2 <HAL_TIM_PWM_Stop+0x96>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0201 	bic.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_PWM_Stop+0xa6>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071e0:	e013      	b.n	800720a <HAL_TIM_PWM_Stop+0xce>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_PWM_Stop+0xb6>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071f0:	e00b      	b.n	800720a <HAL_TIM_PWM_Stop+0xce>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_PWM_Stop+0xc6>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007200:	e003      	b.n	800720a <HAL_TIM_PWM_Stop+0xce>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400

0800721c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <HAL_TIM_PWM_Start_IT+0x28>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	bf14      	ite	ne
 800723c:	2301      	movne	r3, #1
 800723e:	2300      	moveq	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	e022      	b.n	800728a <HAL_TIM_PWM_Start_IT+0x6e>
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b04      	cmp	r3, #4
 8007248:	d109      	bne.n	800725e <HAL_TIM_PWM_Start_IT+0x42>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b01      	cmp	r3, #1
 8007254:	bf14      	ite	ne
 8007256:	2301      	movne	r3, #1
 8007258:	2300      	moveq	r3, #0
 800725a:	b2db      	uxtb	r3, r3
 800725c:	e015      	b.n	800728a <HAL_TIM_PWM_Start_IT+0x6e>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d109      	bne.n	8007278 <HAL_TIM_PWM_Start_IT+0x5c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e008      	b.n	800728a <HAL_TIM_PWM_Start_IT+0x6e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0c7      	b.n	8007422 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_PWM_Start_IT+0x86>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a0:	e013      	b.n	80072ca <HAL_TIM_PWM_Start_IT+0xae>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_PWM_Start_IT+0x96>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072b0:	e00b      	b.n	80072ca <HAL_TIM_PWM_Start_IT+0xae>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_PWM_Start_IT+0xa6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072c0:	e003      	b.n	80072ca <HAL_TIM_PWM_Start_IT+0xae>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2202      	movs	r2, #2
 80072c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d841      	bhi.n	8007354 <HAL_TIM_PWM_Start_IT+0x138>
 80072d0:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	0800730d 	.word	0x0800730d
 80072dc:	08007355 	.word	0x08007355
 80072e0:	08007355 	.word	0x08007355
 80072e4:	08007355 	.word	0x08007355
 80072e8:	0800731f 	.word	0x0800731f
 80072ec:	08007355 	.word	0x08007355
 80072f0:	08007355 	.word	0x08007355
 80072f4:	08007355 	.word	0x08007355
 80072f8:	08007331 	.word	0x08007331
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007355 	.word	0x08007355
 8007304:	08007355 	.word	0x08007355
 8007308:	08007343 	.word	0x08007343
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0202 	orr.w	r2, r2, #2
 800731a:	60da      	str	r2, [r3, #12]
      break;
 800731c:	e01d      	b.n	800735a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0204 	orr.w	r2, r2, #4
 800732c:	60da      	str	r2, [r3, #12]
      break;
 800732e:	e014      	b.n	800735a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0208 	orr.w	r2, r2, #8
 800733e:	60da      	str	r2, [r3, #12]
      break;
 8007340:	e00b      	b.n	800735a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0210 	orr.w	r2, r2, #16
 8007350:	60da      	str	r2, [r3, #12]
      break;
 8007352:	e002      	b.n	800735a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
      break;
 8007358:	bf00      	nop
  }

  if (status == HAL_OK)
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d15f      	bne.n	8007420 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2201      	movs	r2, #1
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f004 fb5d 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <HAL_TIM_PWM_Start_IT+0x210>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <HAL_TIM_PWM_Start_IT+0x166>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2c      	ldr	r2, [pc, #176]	@ (8007430 <HAL_TIM_PWM_Start_IT+0x214>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d101      	bne.n	8007386 <HAL_TIM_PWM_Start_IT+0x16a>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <HAL_TIM_PWM_Start_IT+0x16c>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d007      	beq.n	800739c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800739a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a22      	ldr	r2, [pc, #136]	@ (800742c <HAL_TIM_PWM_Start_IT+0x210>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d022      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ae:	d01d      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007434 <HAL_TIM_PWM_Start_IT+0x218>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d018      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1e      	ldr	r2, [pc, #120]	@ (8007438 <HAL_TIM_PWM_Start_IT+0x21c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d013      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1c      	ldr	r2, [pc, #112]	@ (800743c <HAL_TIM_PWM_Start_IT+0x220>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00e      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a17      	ldr	r2, [pc, #92]	@ (8007430 <HAL_TIM_PWM_Start_IT+0x214>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d009      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a18      	ldr	r2, [pc, #96]	@ (8007440 <HAL_TIM_PWM_Start_IT+0x224>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d004      	beq.n	80073ec <HAL_TIM_PWM_Start_IT+0x1d0>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a17      	ldr	r2, [pc, #92]	@ (8007444 <HAL_TIM_PWM_Start_IT+0x228>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d111      	bne.n	8007410 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b06      	cmp	r3, #6
 80073fc:	d010      	beq.n	8007420 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 0201 	orr.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740e:	e007      	b.n	8007420 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0201 	orr.w	r2, r2, #1
 800741e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	40010400 	.word	0x40010400
 8007434:	40000400 	.word	0x40000400
 8007438:	40000800 	.word	0x40000800
 800743c:	40000c00 	.word	0x40000c00
 8007440:	40014000 	.word	0x40014000
 8007444:	40001800 	.word	0x40001800

08007448 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b0c      	cmp	r3, #12
 800745a:	d841      	bhi.n	80074e0 <HAL_TIM_PWM_Stop_IT+0x98>
 800745c:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007499 	.word	0x08007499
 8007468:	080074e1 	.word	0x080074e1
 800746c:	080074e1 	.word	0x080074e1
 8007470:	080074e1 	.word	0x080074e1
 8007474:	080074ab 	.word	0x080074ab
 8007478:	080074e1 	.word	0x080074e1
 800747c:	080074e1 	.word	0x080074e1
 8007480:	080074e1 	.word	0x080074e1
 8007484:	080074bd 	.word	0x080074bd
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074e1 	.word	0x080074e1
 8007490:	080074e1 	.word	0x080074e1
 8007494:	080074cf 	.word	0x080074cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0202 	bic.w	r2, r2, #2
 80074a6:	60da      	str	r2, [r3, #12]
      break;
 80074a8:	e01d      	b.n	80074e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0204 	bic.w	r2, r2, #4
 80074b8:	60da      	str	r2, [r3, #12]
      break;
 80074ba:	e014      	b.n	80074e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0208 	bic.w	r2, r2, #8
 80074ca:	60da      	str	r2, [r3, #12]
      break;
 80074cc:	e00b      	b.n	80074e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0210 	bic.w	r2, r2, #16
 80074dc:	60da      	str	r2, [r3, #12]
      break;
 80074de:	e002      	b.n	80074e6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
      break;
 80074e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d161      	bne.n	80075b0 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2200      	movs	r2, #0
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f004 fa97 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2f      	ldr	r2, [pc, #188]	@ (80075bc <HAL_TIM_PWM_Stop_IT+0x174>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIM_PWM_Stop_IT+0xc6>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a2d      	ldr	r2, [pc, #180]	@ (80075c0 <HAL_TIM_PWM_Stop_IT+0x178>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_Stop_IT+0xca>
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <HAL_TIM_PWM_Stop_IT+0xcc>
 8007512:	2300      	movs	r3, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10f      	bne.n	8007548 <HAL_TIM_PWM_Stop_IT+0x100>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007532:	4013      	ands	r3, r2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d107      	bne.n	8007548 <HAL_TIM_PWM_Stop_IT+0x100>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007546:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007552:	4013      	ands	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10f      	bne.n	8007578 <HAL_TIM_PWM_Stop_IT+0x130>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6a1a      	ldr	r2, [r3, #32]
 800755e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <HAL_TIM_PWM_Stop_IT+0x130>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_TIM_PWM_Stop_IT+0x140>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007586:	e013      	b.n	80075b0 <HAL_TIM_PWM_Stop_IT+0x168>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d104      	bne.n	8007598 <HAL_TIM_PWM_Stop_IT+0x150>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007596:	e00b      	b.n	80075b0 <HAL_TIM_PWM_Stop_IT+0x168>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b08      	cmp	r3, #8
 800759c:	d104      	bne.n	80075a8 <HAL_TIM_PWM_Stop_IT+0x160>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075a6:	e003      	b.n	80075b0 <HAL_TIM_PWM_Stop_IT+0x168>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40010400 	.word	0x40010400

080075c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	bf0c      	ite	eq
 80075e8:	2301      	moveq	r3, #1
 80075ea:	2300      	movne	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	e022      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x72>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d109      	bne.n	800760a <HAL_TIM_PWM_Start_DMA+0x46>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	bf0c      	ite	eq
 8007602:	2301      	moveq	r3, #1
 8007604:	2300      	movne	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	e015      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x72>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d109      	bne.n	8007624 <HAL_TIM_PWM_Start_DMA+0x60>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	bf0c      	ite	eq
 800761c:	2301      	moveq	r3, #1
 800761e:	2300      	movne	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	e008      	b.n	8007636 <HAL_TIM_PWM_Start_DMA+0x72>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	bf0c      	ite	eq
 8007630:	2301      	moveq	r3, #1
 8007632:	2300      	movne	r3, #0
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800763a:	2302      	movs	r3, #2
 800763c:	e171      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_TIM_PWM_Start_DMA+0x94>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	e022      	b.n	800769e <HAL_TIM_PWM_Start_DMA+0xda>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d109      	bne.n	8007672 <HAL_TIM_PWM_Start_DMA+0xae>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	bf0c      	ite	eq
 800766a:	2301      	moveq	r3, #1
 800766c:	2300      	movne	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e015      	b.n	800769e <HAL_TIM_PWM_Start_DMA+0xda>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d109      	bne.n	800768c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	bf0c      	ite	eq
 8007684:	2301      	moveq	r3, #1
 8007686:	2300      	movne	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e008      	b.n	800769e <HAL_TIM_PWM_Start_DMA+0xda>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	bf0c      	ite	eq
 8007698:	2301      	moveq	r3, #1
 800769a:	2300      	movne	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d024      	beq.n	80076ec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_TIM_PWM_Start_DMA+0xea>
 80076a8:	887b      	ldrh	r3, [r7, #2]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e137      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c0:	e016      	b.n	80076f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d104      	bne.n	80076d2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076d0:	e00e      	b.n	80076f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d104      	bne.n	80076e2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076e0:	e006      	b.n	80076f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076ea:	e001      	b.n	80076f0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e118      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b0c      	cmp	r3, #12
 80076f4:	f200 80ae 	bhi.w	8007854 <HAL_TIM_PWM_Start_DMA+0x290>
 80076f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007735 	.word	0x08007735
 8007704:	08007855 	.word	0x08007855
 8007708:	08007855 	.word	0x08007855
 800770c:	08007855 	.word	0x08007855
 8007710:	0800777d 	.word	0x0800777d
 8007714:	08007855 	.word	0x08007855
 8007718:	08007855 	.word	0x08007855
 800771c:	08007855 	.word	0x08007855
 8007720:	080077c5 	.word	0x080077c5
 8007724:	08007855 	.word	0x08007855
 8007728:	08007855 	.word	0x08007855
 800772c:	08007855 	.word	0x08007855
 8007730:	0800780d 	.word	0x0800780d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007738:	4a7c      	ldr	r2, [pc, #496]	@ (800792c <HAL_TIM_PWM_Start_DMA+0x368>)
 800773a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	4a7b      	ldr	r2, [pc, #492]	@ (8007930 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	4a7a      	ldr	r2, [pc, #488]	@ (8007934 <HAL_TIM_PWM_Start_DMA+0x370>)
 800774a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3334      	adds	r3, #52	@ 0x34
 8007758:	461a      	mov	r2, r3
 800775a:	887b      	ldrh	r3, [r7, #2]
 800775c:	f7fa ff4d 	bl	80025fa <HAL_DMA_Start_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0db      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007778:	60da      	str	r2, [r3, #12]
      break;
 800777a:	e06e      	b.n	800785a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007780:	4a6a      	ldr	r2, [pc, #424]	@ (800792c <HAL_TIM_PWM_Start_DMA+0x368>)
 8007782:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	4a69      	ldr	r2, [pc, #420]	@ (8007930 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800778a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007790:	4a68      	ldr	r2, [pc, #416]	@ (8007934 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007792:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3338      	adds	r3, #56	@ 0x38
 80077a0:	461a      	mov	r2, r3
 80077a2:	887b      	ldrh	r3, [r7, #2]
 80077a4:	f7fa ff29 	bl	80025fa <HAL_DMA_Start_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e0b7      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077c0:	60da      	str	r2, [r3, #12]
      break;
 80077c2:	e04a      	b.n	800785a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	4a58      	ldr	r2, [pc, #352]	@ (800792c <HAL_TIM_PWM_Start_DMA+0x368>)
 80077ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	4a57      	ldr	r2, [pc, #348]	@ (8007930 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80077d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	4a56      	ldr	r2, [pc, #344]	@ (8007934 <HAL_TIM_PWM_Start_DMA+0x370>)
 80077da:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	333c      	adds	r3, #60	@ 0x3c
 80077e8:	461a      	mov	r2, r3
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	f7fa ff05 	bl	80025fa <HAL_DMA_Start_IT>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e093      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007808:	60da      	str	r2, [r3, #12]
      break;
 800780a:	e026      	b.n	800785a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007810:	4a46      	ldr	r2, [pc, #280]	@ (800792c <HAL_TIM_PWM_Start_DMA+0x368>)
 8007812:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007818:	4a45      	ldr	r2, [pc, #276]	@ (8007930 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800781a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007820:	4a44      	ldr	r2, [pc, #272]	@ (8007934 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007822:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3340      	adds	r3, #64	@ 0x40
 8007830:	461a      	mov	r2, r3
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	f7fa fee1 	bl	80025fa <HAL_DMA_Start_IT>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e06f      	b.n	8007922 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007850:	60da      	str	r2, [r3, #12]
      break;
 8007852:	e002      	b.n	800785a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	bf00      	nop
  }

  if (status == HAL_OK)
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d15f      	bne.n	8007920 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2201      	movs	r2, #1
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f004 f8dd 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a31      	ldr	r2, [pc, #196]	@ (8007938 <HAL_TIM_PWM_Start_DMA+0x374>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_TIM_PWM_Start_DMA+0x2be>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2f      	ldr	r2, [pc, #188]	@ (800793c <HAL_TIM_PWM_Start_DMA+0x378>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d101      	bne.n	8007886 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8007886:	2300      	movs	r3, #0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800789a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a25      	ldr	r2, [pc, #148]	@ (8007938 <HAL_TIM_PWM_Start_DMA+0x374>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ae:	d01d      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a22      	ldr	r2, [pc, #136]	@ (8007940 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a21      	ldr	r2, [pc, #132]	@ (8007944 <HAL_TIM_PWM_Start_DMA+0x380>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007948 <HAL_TIM_PWM_Start_DMA+0x384>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1a      	ldr	r2, [pc, #104]	@ (800793c <HAL_TIM_PWM_Start_DMA+0x378>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1b      	ldr	r2, [pc, #108]	@ (800794c <HAL_TIM_PWM_Start_DMA+0x388>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_PWM_Start_DMA+0x328>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007950 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d111      	bne.n	8007910 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d010      	beq.n	8007920 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0201 	orr.w	r2, r2, #1
 800790c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790e:	e007      	b.n	8007920 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	0800adf5 	.word	0x0800adf5
 8007930:	0800ae9d 	.word	0x0800ae9d
 8007934:	0800ad63 	.word	0x0800ad63
 8007938:	40010000 	.word	0x40010000
 800793c:	40010400 	.word	0x40010400
 8007940:	40000400 	.word	0x40000400
 8007944:	40000800 	.word	0x40000800
 8007948:	40000c00 	.word	0x40000c00
 800794c:	40014000 	.word	0x40014000
 8007950:	40001800 	.word	0x40001800

08007954 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b0c      	cmp	r3, #12
 8007966:	d855      	bhi.n	8007a14 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079a5 	.word	0x080079a5
 8007974:	08007a15 	.word	0x08007a15
 8007978:	08007a15 	.word	0x08007a15
 800797c:	08007a15 	.word	0x08007a15
 8007980:	080079c1 	.word	0x080079c1
 8007984:	08007a15 	.word	0x08007a15
 8007988:	08007a15 	.word	0x08007a15
 800798c:	08007a15 	.word	0x08007a15
 8007990:	080079dd 	.word	0x080079dd
 8007994:	08007a15 	.word	0x08007a15
 8007998:	08007a15 	.word	0x08007a15
 800799c:	08007a15 	.word	0x08007a15
 80079a0:	080079f9 	.word	0x080079f9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80079b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fa fee6 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 80079be:	e02c      	b.n	8007a1a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68da      	ldr	r2, [r3, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fa fed8 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 80079da:	e01e      	b.n	8007a1a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fa feca 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 80079f6:	e010      	b.n	8007a1a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fa febc 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 8007a12:	e002      	b.n	8007a1a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
      break;
 8007a18:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d161      	bne.n	8007ae4 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2200      	movs	r2, #0
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f003 fffd 	bl	800ba28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a2f      	ldr	r2, [pc, #188]	@ (8007af0 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_TIM_PWM_Stop_DMA+0xee>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007af4 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d017      	beq.n	8007a7c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10f      	bne.n	8007a7c <HAL_TIM_PWM_Stop_DMA+0x128>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6a1a      	ldr	r2, [r3, #32]
 8007a62:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d107      	bne.n	8007a7c <HAL_TIM_PWM_Stop_DMA+0x128>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1a      	ldr	r2, [r3, #32]
 8007a82:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10f      	bne.n	8007aac <HAL_TIM_PWM_Stop_DMA+0x158>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a1a      	ldr	r2, [r3, #32]
 8007a92:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a96:	4013      	ands	r3, r2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d107      	bne.n	8007aac <HAL_TIM_PWM_Stop_DMA+0x158>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <HAL_TIM_PWM_Stop_DMA+0x168>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aba:	e013      	b.n	8007ae4 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d104      	bne.n	8007acc <HAL_TIM_PWM_Stop_DMA+0x178>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aca:	e00b      	b.n	8007ae4 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d104      	bne.n	8007adc <HAL_TIM_PWM_Stop_DMA+0x188>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ada:	e003      	b.n	8007ae4 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40010400 	.word	0x40010400

08007af8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e041      	b.n	8007b8e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f88d 	bl	8007c3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f003 fac6 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10f      	bne.n	8007bd6 <HAL_TIM_IC_DeInit+0x40>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6a1a      	ldr	r2, [r3, #32]
 8007bbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d107      	bne.n	8007bd6 <HAL_TIM_IC_DeInit+0x40>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f83b 	bl	8007c52 <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <HAL_TIM_IC_Start+0x1a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	e013      	b.n	8007ca8 <HAL_TIM_IC_Start+0x42>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d104      	bne.n	8007c90 <HAL_TIM_IC_Start+0x2a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	e00b      	b.n	8007ca8 <HAL_TIM_IC_Start+0x42>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d104      	bne.n	8007ca0 <HAL_TIM_IC_Start+0x3a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	e003      	b.n	8007ca8 <HAL_TIM_IC_Start+0x42>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <HAL_TIM_IC_Start+0x54>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	e013      	b.n	8007ce2 <HAL_TIM_IC_Start+0x7c>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d104      	bne.n	8007cca <HAL_TIM_IC_Start+0x64>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	e00b      	b.n	8007ce2 <HAL_TIM_IC_Start+0x7c>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d104      	bne.n	8007cda <HAL_TIM_IC_Start+0x74>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	e003      	b.n	8007ce2 <HAL_TIM_IC_Start+0x7c>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d102      	bne.n	8007cf0 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d001      	beq.n	8007cf4 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e081      	b.n	8007df8 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <HAL_TIM_IC_Start+0x9e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d02:	e013      	b.n	8007d2c <HAL_TIM_IC_Start+0xc6>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d104      	bne.n	8007d14 <HAL_TIM_IC_Start+0xae>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d12:	e00b      	b.n	8007d2c <HAL_TIM_IC_Start+0xc6>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d104      	bne.n	8007d24 <HAL_TIM_IC_Start+0xbe>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d22:	e003      	b.n	8007d2c <HAL_TIM_IC_Start+0xc6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d104      	bne.n	8007d3c <HAL_TIM_IC_Start+0xd6>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d3a:	e013      	b.n	8007d64 <HAL_TIM_IC_Start+0xfe>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d104      	bne.n	8007d4c <HAL_TIM_IC_Start+0xe6>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d4a:	e00b      	b.n	8007d64 <HAL_TIM_IC_Start+0xfe>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	d104      	bne.n	8007d5c <HAL_TIM_IC_Start+0xf6>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d5a:	e003      	b.n	8007d64 <HAL_TIM_IC_Start+0xfe>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f003 fe5b 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a22      	ldr	r2, [pc, #136]	@ (8007e00 <HAL_TIM_IC_Start+0x19a>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d022      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d84:	d01d      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e04 <HAL_TIM_IC_Start+0x19e>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d018      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1c      	ldr	r2, [pc, #112]	@ (8007e08 <HAL_TIM_IC_Start+0x1a2>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e0c <HAL_TIM_IC_Start+0x1a6>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00e      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a19      	ldr	r2, [pc, #100]	@ (8007e10 <HAL_TIM_IC_Start+0x1aa>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d009      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a18      	ldr	r2, [pc, #96]	@ (8007e14 <HAL_TIM_IC_Start+0x1ae>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d004      	beq.n	8007dc2 <HAL_TIM_IC_Start+0x15c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a16      	ldr	r2, [pc, #88]	@ (8007e18 <HAL_TIM_IC_Start+0x1b2>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d111      	bne.n	8007de6 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b06      	cmp	r3, #6
 8007dd2:	d010      	beq.n	8007df6 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de4:	e007      	b.n	8007df6 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0201 	orr.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40010000 	.word	0x40010000
 8007e04:	40000400 	.word	0x40000400
 8007e08:	40000800 	.word	0x40000800
 8007e0c:	40000c00 	.word	0x40000c00
 8007e10:	40010400 	.word	0x40010400
 8007e14:	40014000 	.word	0x40014000
 8007e18:	40001800 	.word	0x40001800

08007e1c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f003 fdfa 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a1a      	ldr	r2, [r3, #32]
 8007e3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007e3e:	4013      	ands	r3, r2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10f      	bne.n	8007e64 <HAL_TIM_IC_Stop+0x48>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6a1a      	ldr	r2, [r3, #32]
 8007e4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d107      	bne.n	8007e64 <HAL_TIM_IC_Stop+0x48>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0201 	bic.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <HAL_TIM_IC_Stop+0x58>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e72:	e013      	b.n	8007e9c <HAL_TIM_IC_Stop+0x80>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d104      	bne.n	8007e84 <HAL_TIM_IC_Stop+0x68>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e82:	e00b      	b.n	8007e9c <HAL_TIM_IC_Stop+0x80>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d104      	bne.n	8007e94 <HAL_TIM_IC_Stop+0x78>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e92:	e003      	b.n	8007e9c <HAL_TIM_IC_Stop+0x80>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d104      	bne.n	8007eac <HAL_TIM_IC_Stop+0x90>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eaa:	e013      	b.n	8007ed4 <HAL_TIM_IC_Stop+0xb8>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d104      	bne.n	8007ebc <HAL_TIM_IC_Stop+0xa0>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007eba:	e00b      	b.n	8007ed4 <HAL_TIM_IC_Stop+0xb8>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b08      	cmp	r3, #8
 8007ec0:	d104      	bne.n	8007ecc <HAL_TIM_IC_Stop+0xb0>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eca:	e003      	b.n	8007ed4 <HAL_TIM_IC_Stop+0xb8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d104      	bne.n	8007efc <HAL_TIM_IC_Start_IT+0x1e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	e013      	b.n	8007f24 <HAL_TIM_IC_Start_IT+0x46>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d104      	bne.n	8007f0c <HAL_TIM_IC_Start_IT+0x2e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e00b      	b.n	8007f24 <HAL_TIM_IC_Start_IT+0x46>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d104      	bne.n	8007f1c <HAL_TIM_IC_Start_IT+0x3e>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	e003      	b.n	8007f24 <HAL_TIM_IC_Start_IT+0x46>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_TIM_IC_Start_IT+0x58>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	e013      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x80>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_IC_Start_IT+0x68>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	e00b      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x80>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_IC_Start_IT+0x78>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	e003      	b.n	8007f5e <HAL_TIM_IC_Start_IT+0x80>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d102      	bne.n	8007f6c <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f66:	7b7b      	ldrb	r3, [r7, #13]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d001      	beq.n	8007f70 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e0cb      	b.n	8008108 <HAL_TIM_IC_Start_IT+0x22a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <HAL_TIM_IC_Start_IT+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f7e:	e013      	b.n	8007fa8 <HAL_TIM_IC_Start_IT+0xca>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d104      	bne.n	8007f90 <HAL_TIM_IC_Start_IT+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f8e:	e00b      	b.n	8007fa8 <HAL_TIM_IC_Start_IT+0xca>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d104      	bne.n	8007fa0 <HAL_TIM_IC_Start_IT+0xc2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2202      	movs	r2, #2
 8007f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f9e:	e003      	b.n	8007fa8 <HAL_TIM_IC_Start_IT+0xca>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <HAL_TIM_IC_Start_IT+0xda>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fb6:	e013      	b.n	8007fe0 <HAL_TIM_IC_Start_IT+0x102>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d104      	bne.n	8007fc8 <HAL_TIM_IC_Start_IT+0xea>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fc6:	e00b      	b.n	8007fe0 <HAL_TIM_IC_Start_IT+0x102>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d104      	bne.n	8007fd8 <HAL_TIM_IC_Start_IT+0xfa>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_IC_Start_IT+0x102>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b0c      	cmp	r3, #12
 8007fe4:	d840      	bhi.n	8008068 <HAL_TIM_IC_Start_IT+0x18a>
 8007fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <HAL_TIM_IC_Start_IT+0x10e>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08008021 	.word	0x08008021
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	08008069 	.word	0x08008069
 8007ff8:	08008069 	.word	0x08008069
 8007ffc:	08008033 	.word	0x08008033
 8008000:	08008069 	.word	0x08008069
 8008004:	08008069 	.word	0x08008069
 8008008:	08008069 	.word	0x08008069
 800800c:	08008045 	.word	0x08008045
 8008010:	08008069 	.word	0x08008069
 8008014:	08008069 	.word	0x08008069
 8008018:	08008069 	.word	0x08008069
 800801c:	08008057 	.word	0x08008057
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0202 	orr.w	r2, r2, #2
 800802e:	60da      	str	r2, [r3, #12]
      break;
 8008030:	e01d      	b.n	800806e <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0204 	orr.w	r2, r2, #4
 8008040:	60da      	str	r2, [r3, #12]
      break;
 8008042:	e014      	b.n	800806e <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0208 	orr.w	r2, r2, #8
 8008052:	60da      	str	r2, [r3, #12]
      break;
 8008054:	e00b      	b.n	800806e <HAL_TIM_IC_Start_IT+0x190>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0210 	orr.w	r2, r2, #16
 8008064:	60da      	str	r2, [r3, #12]
      break;
 8008066:	e002      	b.n	800806e <HAL_TIM_IC_Start_IT+0x190>
    }

    default:
      status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	bf00      	nop
  }

  if (status == HAL_OK)
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d148      	bne.n	8008106 <HAL_TIM_IC_Start_IT+0x228>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	4618      	mov	r0, r3
 800807e:	f003 fcd3 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a22      	ldr	r2, [pc, #136]	@ (8008110 <HAL_TIM_IC_Start_IT+0x232>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d022      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008094:	d01d      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1e      	ldr	r2, [pc, #120]	@ (8008114 <HAL_TIM_IC_Start_IT+0x236>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d018      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008118 <HAL_TIM_IC_Start_IT+0x23a>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a1b      	ldr	r2, [pc, #108]	@ (800811c <HAL_TIM_IC_Start_IT+0x23e>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00e      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a19      	ldr	r2, [pc, #100]	@ (8008120 <HAL_TIM_IC_Start_IT+0x242>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d009      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a18      	ldr	r2, [pc, #96]	@ (8008124 <HAL_TIM_IC_Start_IT+0x246>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <HAL_TIM_IC_Start_IT+0x1f4>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a16      	ldr	r2, [pc, #88]	@ (8008128 <HAL_TIM_IC_Start_IT+0x24a>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d111      	bne.n	80080f6 <HAL_TIM_IC_Start_IT+0x218>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b06      	cmp	r3, #6
 80080e2:	d010      	beq.n	8008106 <HAL_TIM_IC_Start_IT+0x228>
      {
        __HAL_TIM_ENABLE(htim);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f4:	e007      	b.n	8008106 <HAL_TIM_IC_Start_IT+0x228>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f042 0201 	orr.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40010000 	.word	0x40010000
 8008114:	40000400 	.word	0x40000400
 8008118:	40000800 	.word	0x40000800
 800811c:	40000c00 	.word	0x40000c00
 8008120:	40010400 	.word	0x40010400
 8008124:	40014000 	.word	0x40014000
 8008128:	40001800 	.word	0x40001800

0800812c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b0c      	cmp	r3, #12
 800813e:	d841      	bhi.n	80081c4 <HAL_TIM_IC_Stop_IT+0x98>
 8008140:	a201      	add	r2, pc, #4	@ (adr r2, 8008148 <HAL_TIM_IC_Stop_IT+0x1c>)
 8008142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008146:	bf00      	nop
 8008148:	0800817d 	.word	0x0800817d
 800814c:	080081c5 	.word	0x080081c5
 8008150:	080081c5 	.word	0x080081c5
 8008154:	080081c5 	.word	0x080081c5
 8008158:	0800818f 	.word	0x0800818f
 800815c:	080081c5 	.word	0x080081c5
 8008160:	080081c5 	.word	0x080081c5
 8008164:	080081c5 	.word	0x080081c5
 8008168:	080081a1 	.word	0x080081a1
 800816c:	080081c5 	.word	0x080081c5
 8008170:	080081c5 	.word	0x080081c5
 8008174:	080081c5 	.word	0x080081c5
 8008178:	080081b3 	.word	0x080081b3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0202 	bic.w	r2, r2, #2
 800818a:	60da      	str	r2, [r3, #12]
      break;
 800818c:	e01d      	b.n	80081ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0204 	bic.w	r2, r2, #4
 800819c:	60da      	str	r2, [r3, #12]
      break;
 800819e:	e014      	b.n	80081ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0208 	bic.w	r2, r2, #8
 80081ae:	60da      	str	r2, [r3, #12]
      break;
 80081b0:	e00b      	b.n	80081ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0210 	bic.w	r2, r2, #16
 80081c0:	60da      	str	r2, [r3, #12]
      break;
 80081c2:	e002      	b.n	80081ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
      break;
 80081c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d156      	bne.n	800827e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2200      	movs	r2, #0
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f003 fc25 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6a1a      	ldr	r2, [r3, #32]
 80081e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081e8:	4013      	ands	r3, r2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10f      	bne.n	800820e <HAL_TIM_IC_Stop_IT+0xe2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d107      	bne.n	800820e <HAL_TIM_IC_Stop_IT+0xe2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0201 	bic.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <HAL_TIM_IC_Stop_IT+0xf2>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800821c:	e013      	b.n	8008246 <HAL_TIM_IC_Stop_IT+0x11a>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d104      	bne.n	800822e <HAL_TIM_IC_Stop_IT+0x102>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800822c:	e00b      	b.n	8008246 <HAL_TIM_IC_Stop_IT+0x11a>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b08      	cmp	r3, #8
 8008232:	d104      	bne.n	800823e <HAL_TIM_IC_Stop_IT+0x112>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800823c:	e003      	b.n	8008246 <HAL_TIM_IC_Stop_IT+0x11a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d104      	bne.n	8008256 <HAL_TIM_IC_Stop_IT+0x12a>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008254:	e013      	b.n	800827e <HAL_TIM_IC_Stop_IT+0x152>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b04      	cmp	r3, #4
 800825a:	d104      	bne.n	8008266 <HAL_TIM_IC_Stop_IT+0x13a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008264:	e00b      	b.n	800827e <HAL_TIM_IC_Stop_IT+0x152>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b08      	cmp	r3, #8
 800826a:	d104      	bne.n	8008276 <HAL_TIM_IC_Stop_IT+0x14a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008274:	e003      	b.n	800827e <HAL_TIM_IC_Stop_IT+0x152>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d104      	bne.n	80082aa <HAL_TIM_IC_Start_DMA+0x22>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	e013      	b.n	80082d2 <HAL_TIM_IC_Start_DMA+0x4a>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d104      	bne.n	80082ba <HAL_TIM_IC_Start_DMA+0x32>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	e00b      	b.n	80082d2 <HAL_TIM_IC_Start_DMA+0x4a>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d104      	bne.n	80082ca <HAL_TIM_IC_Start_DMA+0x42>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	e003      	b.n	80082d2 <HAL_TIM_IC_Start_DMA+0x4a>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <HAL_TIM_IC_Start_DMA+0x5c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	e013      	b.n	800830c <HAL_TIM_IC_Start_DMA+0x84>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d104      	bne.n	80082f4 <HAL_TIM_IC_Start_DMA+0x6c>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	e00b      	b.n	800830c <HAL_TIM_IC_Start_DMA+0x84>
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d104      	bne.n	8008304 <HAL_TIM_IC_Start_DMA+0x7c>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008300:	b2db      	uxtb	r3, r3
 8008302:	e003      	b.n	800830c <HAL_TIM_IC_Start_DMA+0x84>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800830a:	b2db      	uxtb	r3, r3
 800830c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800830e:	7dbb      	ldrb	r3, [r7, #22]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d002      	beq.n	800831a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008314:	7d7b      	ldrb	r3, [r7, #21]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d101      	bne.n	800831e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800831a:	2302      	movs	r3, #2
 800831c:	e146      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800831e:	7dbb      	ldrb	r3, [r7, #22]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d143      	bne.n	80083ac <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008324:	7d7b      	ldrb	r3, [r7, #21]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d140      	bne.n	80083ac <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_TIM_IC_Start_DMA+0xae>
 8008330:	887b      	ldrh	r3, [r7, #2]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e138      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <HAL_TIM_IC_Start_DMA+0xc2>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008348:	e013      	b.n	8008372 <HAL_TIM_IC_Start_DMA+0xea>
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d104      	bne.n	800835a <HAL_TIM_IC_Start_DMA+0xd2>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008358:	e00b      	b.n	8008372 <HAL_TIM_IC_Start_DMA+0xea>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b08      	cmp	r3, #8
 800835e:	d104      	bne.n	800836a <HAL_TIM_IC_Start_DMA+0xe2>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008368:	e003      	b.n	8008372 <HAL_TIM_IC_Start_DMA+0xea>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2202      	movs	r2, #2
 800836e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <HAL_TIM_IC_Start_DMA+0xfa>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8008380:	e016      	b.n	80083b0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b04      	cmp	r3, #4
 8008386:	d104      	bne.n	8008392 <HAL_TIM_IC_Start_DMA+0x10a>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8008390:	e00e      	b.n	80083b0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b08      	cmp	r3, #8
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_IC_Start_DMA+0x11a>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 80083a0:	e006      	b.n	80083b0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 80083aa:	e001      	b.n	80083b0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e0fd      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2201      	movs	r2, #1
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f003 fb35 	bl	800ba28 <TIM_CCxChannelCmd>

  switch (Channel)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b0c      	cmp	r3, #12
 80083c2:	f200 80ad 	bhi.w	8008520 <HAL_TIM_IC_Start_DMA+0x298>
 80083c6:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <HAL_TIM_IC_Start_DMA+0x144>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	08008401 	.word	0x08008401
 80083d0:	08008521 	.word	0x08008521
 80083d4:	08008521 	.word	0x08008521
 80083d8:	08008521 	.word	0x08008521
 80083dc:	08008449 	.word	0x08008449
 80083e0:	08008521 	.word	0x08008521
 80083e4:	08008521 	.word	0x08008521
 80083e8:	08008521 	.word	0x08008521
 80083ec:	08008491 	.word	0x08008491
 80083f0:	08008521 	.word	0x08008521
 80083f4:	08008521 	.word	0x08008521
 80083f8:	08008521 	.word	0x08008521
 80083fc:	080084d9 	.word	0x080084d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008404:	4a6b      	ldr	r2, [pc, #428]	@ (80085b4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008406:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840c:	4a6a      	ldr	r2, [pc, #424]	@ (80085b8 <HAL_TIM_IC_Start_DMA+0x330>)
 800840e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008414:	4a69      	ldr	r2, [pc, #420]	@ (80085bc <HAL_TIM_IC_Start_DMA+0x334>)
 8008416:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3334      	adds	r3, #52	@ 0x34
 8008422:	4619      	mov	r1, r3
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	887b      	ldrh	r3, [r7, #2]
 8008428:	f7fa f8e7 	bl	80025fa <HAL_DMA_Start_IT>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e0ba      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008444:	60da      	str	r2, [r3, #12]
      break;
 8008446:	e06e      	b.n	8008526 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844c:	4a59      	ldr	r2, [pc, #356]	@ (80085b4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800844e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008454:	4a58      	ldr	r2, [pc, #352]	@ (80085b8 <HAL_TIM_IC_Start_DMA+0x330>)
 8008456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	4a57      	ldr	r2, [pc, #348]	@ (80085bc <HAL_TIM_IC_Start_DMA+0x334>)
 800845e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3338      	adds	r3, #56	@ 0x38
 800846a:	4619      	mov	r1, r3
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	887b      	ldrh	r3, [r7, #2]
 8008470:	f7fa f8c3 	bl	80025fa <HAL_DMA_Start_IT>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e096      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800848c:	60da      	str	r2, [r3, #12]
      break;
 800848e:	e04a      	b.n	8008526 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	4a47      	ldr	r2, [pc, #284]	@ (80085b4 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008496:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849c:	4a46      	ldr	r2, [pc, #280]	@ (80085b8 <HAL_TIM_IC_Start_DMA+0x330>)
 800849e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a4:	4a45      	ldr	r2, [pc, #276]	@ (80085bc <HAL_TIM_IC_Start_DMA+0x334>)
 80084a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	333c      	adds	r3, #60	@ 0x3c
 80084b2:	4619      	mov	r1, r3
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	887b      	ldrh	r3, [r7, #2]
 80084b8:	f7fa f89f 	bl	80025fa <HAL_DMA_Start_IT>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e072      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084d4:	60da      	str	r2, [r3, #12]
      break;
 80084d6:	e026      	b.n	8008526 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084dc:	4a35      	ldr	r2, [pc, #212]	@ (80085b4 <HAL_TIM_IC_Start_DMA+0x32c>)
 80084de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e4:	4a34      	ldr	r2, [pc, #208]	@ (80085b8 <HAL_TIM_IC_Start_DMA+0x330>)
 80084e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ec:	4a33      	ldr	r2, [pc, #204]	@ (80085bc <HAL_TIM_IC_Start_DMA+0x334>)
 80084ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3340      	adds	r3, #64	@ 0x40
 80084fa:	4619      	mov	r1, r3
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	887b      	ldrh	r3, [r7, #2]
 8008500:	f7fa f87b 	bl	80025fa <HAL_DMA_Start_IT>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e04e      	b.n	80085ac <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800851c:	60da      	str	r2, [r3, #12]
      break;
 800851e:	e002      	b.n	8008526 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	75fb      	strb	r3, [r7, #23]
      break;
 8008524:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a25      	ldr	r2, [pc, #148]	@ (80085c0 <HAL_TIM_IC_Start_DMA+0x338>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d022      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008538:	d01d      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a21      	ldr	r2, [pc, #132]	@ (80085c4 <HAL_TIM_IC_Start_DMA+0x33c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d018      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a1f      	ldr	r2, [pc, #124]	@ (80085c8 <HAL_TIM_IC_Start_DMA+0x340>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d013      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a1e      	ldr	r2, [pc, #120]	@ (80085cc <HAL_TIM_IC_Start_DMA+0x344>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00e      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a1c      	ldr	r2, [pc, #112]	@ (80085d0 <HAL_TIM_IC_Start_DMA+0x348>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d009      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1b      	ldr	r2, [pc, #108]	@ (80085d4 <HAL_TIM_IC_Start_DMA+0x34c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d004      	beq.n	8008576 <HAL_TIM_IC_Start_DMA+0x2ee>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a19      	ldr	r2, [pc, #100]	@ (80085d8 <HAL_TIM_IC_Start_DMA+0x350>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d111      	bne.n	800859a <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b06      	cmp	r3, #6
 8008586:	d010      	beq.n	80085aa <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008598:	e007      	b.n	80085aa <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f042 0201 	orr.w	r2, r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	0800af05 	.word	0x0800af05
 80085b8:	0800afcd 	.word	0x0800afcd
 80085bc:	0800ad63 	.word	0x0800ad63
 80085c0:	40010000 	.word	0x40010000
 80085c4:	40000400 	.word	0x40000400
 80085c8:	40000800 	.word	0x40000800
 80085cc:	40000c00 	.word	0x40000c00
 80085d0:	40010400 	.word	0x40010400
 80085d4:	40014000 	.word	0x40014000
 80085d8:	40001800 	.word	0x40001800

080085dc <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f003 fa18 	bl	800ba28 <TIM_CCxChannelCmd>

  switch (Channel)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b0c      	cmp	r3, #12
 80085fc:	d854      	bhi.n	80086a8 <HAL_TIM_IC_Stop_DMA+0xcc>
 80085fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008604 <HAL_TIM_IC_Stop_DMA+0x28>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008639 	.word	0x08008639
 8008608:	080086a9 	.word	0x080086a9
 800860c:	080086a9 	.word	0x080086a9
 8008610:	080086a9 	.word	0x080086a9
 8008614:	08008655 	.word	0x08008655
 8008618:	080086a9 	.word	0x080086a9
 800861c:	080086a9 	.word	0x080086a9
 8008620:	080086a9 	.word	0x080086a9
 8008624:	08008671 	.word	0x08008671
 8008628:	080086a9 	.word	0x080086a9
 800862c:	080086a9 	.word	0x080086a9
 8008630:	080086a9 	.word	0x080086a9
 8008634:	0800868d 	.word	0x0800868d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008646:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864c:	4618      	mov	r0, r3
 800864e:	f7fa f89c 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 8008652:	e02c      	b.n	80086ae <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008662:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008668:	4618      	mov	r0, r3
 800866a:	f7fa f88e 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800866e:	e01e      	b.n	80086ae <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800867e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	4618      	mov	r0, r3
 8008686:	f7fa f880 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800868a:	e010      	b.n	80086ae <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800869a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fa f872 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 80086a6:	e002      	b.n	80086ae <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
      break;
 80086ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d14f      	bne.n	8008754 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6a1a      	ldr	r2, [r3, #32]
 80086ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10f      	bne.n	80086e4 <HAL_TIM_IC_Stop_DMA+0x108>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6a1a      	ldr	r2, [r3, #32]
 80086ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80086ce:	4013      	ands	r3, r2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d107      	bne.n	80086e4 <HAL_TIM_IC_Stop_DMA+0x108>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <HAL_TIM_IC_Stop_DMA+0x118>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086f2:	e013      	b.n	800871c <HAL_TIM_IC_Stop_DMA+0x140>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d104      	bne.n	8008704 <HAL_TIM_IC_Stop_DMA+0x128>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008702:	e00b      	b.n	800871c <HAL_TIM_IC_Stop_DMA+0x140>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b08      	cmp	r3, #8
 8008708:	d104      	bne.n	8008714 <HAL_TIM_IC_Stop_DMA+0x138>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008712:	e003      	b.n	800871c <HAL_TIM_IC_Stop_DMA+0x140>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d104      	bne.n	800872c <HAL_TIM_IC_Stop_DMA+0x150>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800872a:	e013      	b.n	8008754 <HAL_TIM_IC_Stop_DMA+0x178>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b04      	cmp	r3, #4
 8008730:	d104      	bne.n	800873c <HAL_TIM_IC_Stop_DMA+0x160>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800873a:	e00b      	b.n	8008754 <HAL_TIM_IC_Stop_DMA+0x178>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b08      	cmp	r3, #8
 8008740:	d104      	bne.n	800874c <HAL_TIM_IC_Stop_DMA+0x170>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800874a:	e003      	b.n	8008754 <HAL_TIM_IC_Stop_DMA+0x178>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e041      	b.n	80087f6 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f87d 	bl	8008886 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3304      	adds	r3, #4
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f002 fc92 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0208 	bic.w	r2, r2, #8
 80087b2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6819      	ldr	r1, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	430a      	orrs	r2, r1
 80087c2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2202      	movs	r2, #2
 800880a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6a1a      	ldr	r2, [r3, #32]
 8008814:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008818:	4013      	ands	r3, r2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10f      	bne.n	800883e <HAL_TIM_OnePulse_DeInit+0x40>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	f240 4344 	movw	r3, #1092	@ 0x444
 8008828:	4013      	ands	r3, r2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d107      	bne.n	800883e <HAL_TIM_OnePulse_DeInit+0x40>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0201 	bic.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f82b 	bl	800889a <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088ce:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80088d6:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d108      	bne.n	80088f0 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d105      	bne.n	80088f0 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80088e4:	7b7b      	ldrb	r3, [r7, #13]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d102      	bne.n	80088f0 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80088ea:	7b3b      	ldrb	r3, [r7, #12]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d001      	beq.n	80088f4 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e035      	b.n	8008960 <HAL_TIM_OnePulse_Start+0xb2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2201      	movs	r2, #1
 800891a:	2100      	movs	r1, #0
 800891c:	4618      	mov	r0, r3
 800891e:	f003 f883 	bl	800ba28 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2201      	movs	r2, #1
 8008928:	2104      	movs	r1, #4
 800892a:	4618      	mov	r0, r3
 800892c:	f003 f87c 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a0c      	ldr	r2, [pc, #48]	@ (8008968 <HAL_TIM_OnePulse_Start+0xba>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d004      	beq.n	8008944 <HAL_TIM_OnePulse_Start+0x96>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a0b      	ldr	r2, [pc, #44]	@ (800896c <HAL_TIM_OnePulse_Start+0xbe>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d101      	bne.n	8008948 <HAL_TIM_OnePulse_Start+0x9a>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <HAL_TIM_OnePulse_Start+0x9c>
 8008948:	2300      	movs	r3, #0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d007      	beq.n	800895e <HAL_TIM_OnePulse_Start+0xb0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800895c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40010000 	.word	0x40010000
 800896c:	40010400 	.word	0x40010400

08008970 <HAL_TIM_OnePulse_Stop>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f003 f850 	bl	800ba28 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	2104      	movs	r1, #4
 8008990:	4618      	mov	r0, r3
 8008992:	f003 f849 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a29      	ldr	r2, [pc, #164]	@ (8008a40 <HAL_TIM_OnePulse_Stop+0xd0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d004      	beq.n	80089aa <HAL_TIM_OnePulse_Stop+0x3a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a27      	ldr	r2, [pc, #156]	@ (8008a44 <HAL_TIM_OnePulse_Stop+0xd4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d101      	bne.n	80089ae <HAL_TIM_OnePulse_Stop+0x3e>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <HAL_TIM_OnePulse_Stop+0x40>
 80089ae:	2300      	movs	r3, #0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d017      	beq.n	80089e4 <HAL_TIM_OnePulse_Stop+0x74>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6a1a      	ldr	r2, [r3, #32]
 80089ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089be:	4013      	ands	r3, r2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10f      	bne.n	80089e4 <HAL_TIM_OnePulse_Stop+0x74>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a1a      	ldr	r2, [r3, #32]
 80089ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80089ce:	4013      	ands	r3, r2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d107      	bne.n	80089e4 <HAL_TIM_OnePulse_Stop+0x74>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80089e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6a1a      	ldr	r2, [r3, #32]
 80089ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80089ee:	4013      	ands	r3, r2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10f      	bne.n	8008a14 <HAL_TIM_OnePulse_Stop+0xa4>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6a1a      	ldr	r2, [r3, #32]
 80089fa:	f240 4344 	movw	r3, #1092	@ 0x444
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d107      	bne.n	8008a14 <HAL_TIM_OnePulse_Stop+0xa4>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0201 	bic.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40010000 	.word	0x40010000
 8008a44:	40010400 	.word	0x40010400

08008a48 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a70:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d108      	bne.n	8008a8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d105      	bne.n	8008a8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d102      	bne.n	8008a8a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a84:	7b3b      	ldrb	r3, [r7, #12]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d001      	beq.n	8008a8e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e045      	b.n	8008b1a <HAL_TIM_OnePulse_Start_IT+0xd2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0202 	orr.w	r2, r2, #2
 8008abc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0204 	orr.w	r2, r2, #4
 8008acc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 ffa6 	bl	800ba28 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f002 ff9f 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a0d      	ldr	r2, [pc, #52]	@ (8008b24 <HAL_TIM_OnePulse_Start_IT+0xdc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d004      	beq.n	8008afe <HAL_TIM_OnePulse_Start_IT+0xb6>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b28 <HAL_TIM_OnePulse_Start_IT+0xe0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d101      	bne.n	8008b02 <HAL_TIM_OnePulse_Start_IT+0xba>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e000      	b.n	8008b04 <HAL_TIM_OnePulse_Start_IT+0xbc>
 8008b02:	2300      	movs	r3, #0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <HAL_TIM_OnePulse_Start_IT+0xd0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	40010000 	.word	0x40010000
 8008b28:	40010400 	.word	0x40010400

08008b2c <HAL_TIM_OnePulse_Stop_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0202 	bic.w	r2, r2, #2
 8008b44:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f022 0204 	bic.w	r2, r2, #4
 8008b54:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 ff62 	bl	800ba28 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f002 ff5b 	bl	800ba28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a29      	ldr	r2, [pc, #164]	@ (8008c1c <HAL_TIM_OnePulse_Stop_IT+0xf0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d004      	beq.n	8008b86 <HAL_TIM_OnePulse_Stop_IT+0x5a>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a27      	ldr	r2, [pc, #156]	@ (8008c20 <HAL_TIM_OnePulse_Stop_IT+0xf4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d101      	bne.n	8008b8a <HAL_TIM_OnePulse_Stop_IT+0x5e>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <HAL_TIM_OnePulse_Stop_IT+0x60>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <HAL_TIM_OnePulse_Stop_IT+0x94>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6a1a      	ldr	r2, [r3, #32]
 8008b96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10f      	bne.n	8008bc0 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	f240 4344 	movw	r3, #1092	@ 0x444
 8008baa:	4013      	ands	r3, r2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d107      	bne.n	8008bc0 <HAL_TIM_OnePulse_Stop_IT+0x94>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008bca:	4013      	ands	r3, r2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10f      	bne.n	8008bf0 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6a1a      	ldr	r2, [r3, #32]
 8008bd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <HAL_TIM_OnePulse_Stop_IT+0xc4>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	40010000 	.word	0x40010000
 8008c20:	40010400 	.word	0x40010400

08008c24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e097      	b.n	8008d68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8d3 	bl	8008df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6812      	ldr	r2, [r2, #0]
 8008c64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f002 fa25 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008cc4:	f023 030c 	bic.w	r3, r3, #12
 8008cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	021b      	lsls	r3, r3, #8
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	011a      	lsls	r2, r3, #4
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	031b      	lsls	r3, r3, #12
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008d02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008d0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	4313      	orrs	r3, r2
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6a1a      	ldr	r2, [r3, #32]
 8008d86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10f      	bne.n	8008db0 <HAL_TIM_Encoder_DeInit+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a1a      	ldr	r2, [r3, #32]
 8008d96:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d107      	bne.n	8008db0 <HAL_TIM_Encoder_DeInit+0x40>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f82b 	bl	8008e0c <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d110      	bne.n	8008e72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d102      	bne.n	8008e5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e56:	7b7b      	ldrb	r3, [r7, #13]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d001      	beq.n	8008e60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e069      	b.n	8008f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e70:	e031      	b.n	8008ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d110      	bne.n	8008e9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d102      	bne.n	8008e84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e7e:	7b3b      	ldrb	r3, [r7, #12]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d001      	beq.n	8008e88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e055      	b.n	8008f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e98:	e01d      	b.n	8008ed6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d108      	bne.n	8008eb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d105      	bne.n	8008eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ea6:	7b7b      	ldrb	r3, [r7, #13]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d102      	bne.n	8008eb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eac:	7b3b      	ldrb	r3, [r7, #12]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d001      	beq.n	8008eb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e03e      	b.n	8008f34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2202      	movs	r2, #2
 8008eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_TIM_Encoder_Start+0xc4>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	d008      	beq.n	8008ef4 <HAL_TIM_Encoder_Start+0xd4>
 8008ee2:	e00f      	b.n	8008f04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	2100      	movs	r1, #0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 fd9b 	bl	800ba28 <TIM_CCxChannelCmd>
      break;
 8008ef2:	e016      	b.n	8008f22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	2104      	movs	r1, #4
 8008efc:	4618      	mov	r0, r3
 8008efe:	f002 fd93 	bl	800ba28 <TIM_CCxChannelCmd>
      break;
 8008f02:	e00e      	b.n	8008f22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 fd8b 	bl	800ba28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2201      	movs	r2, #1
 8008f18:	2104      	movs	r1, #4
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f002 fd84 	bl	800ba28 <TIM_CCxChannelCmd>
      break;
 8008f20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0201 	orr.w	r2, r2, #1
 8008f30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_TIM_Encoder_Stop+0x18>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d008      	beq.n	8008f64 <HAL_TIM_Encoder_Stop+0x28>
 8008f52:	e00f      	b.n	8008f74 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f002 fd63 	bl	800ba28 <TIM_CCxChannelCmd>
      break;
 8008f62:	e016      	b.n	8008f92 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 fd5b 	bl	800ba28 <TIM_CCxChannelCmd>
      break;
 8008f72:	e00e      	b.n	8008f92 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f002 fd53 	bl	800ba28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	2104      	movs	r1, #4
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 fd4c 	bl	800ba28 <TIM_CCxChannelCmd>
      break;
 8008f90:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10f      	bne.n	8008fc2 <HAL_TIM_Encoder_Stop+0x86>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6a1a      	ldr	r2, [r3, #32]
 8008fa8:	f240 4344 	movw	r3, #1092	@ 0x444
 8008fac:	4013      	ands	r3, r2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d107      	bne.n	8008fc2 <HAL_TIM_Encoder_Stop+0x86>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0201 	bic.w	r2, r2, #1
 8008fc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <HAL_TIM_Encoder_Stop+0x92>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d138      	bne.n	8009040 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <HAL_TIM_Encoder_Stop+0xa2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fdc:	e013      	b.n	8009006 <HAL_TIM_Encoder_Stop+0xca>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d104      	bne.n	8008fee <HAL_TIM_Encoder_Stop+0xb2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fec:	e00b      	b.n	8009006 <HAL_TIM_Encoder_Stop+0xca>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d104      	bne.n	8008ffe <HAL_TIM_Encoder_Stop+0xc2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ffc:	e003      	b.n	8009006 <HAL_TIM_Encoder_Stop+0xca>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <HAL_TIM_Encoder_Stop+0xda>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009014:	e024      	b.n	8009060 <HAL_TIM_Encoder_Stop+0x124>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b04      	cmp	r3, #4
 800901a:	d104      	bne.n	8009026 <HAL_TIM_Encoder_Stop+0xea>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009024:	e01c      	b.n	8009060 <HAL_TIM_Encoder_Stop+0x124>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d104      	bne.n	8009036 <HAL_TIM_Encoder_Stop+0xfa>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009034:	e014      	b.n	8009060 <HAL_TIM_Encoder_Stop+0x124>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800903e:	e00f      	b.n	8009060 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800907a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009082:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800908a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009092:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d110      	bne.n	80090bc <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d102      	bne.n	80090a6 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80090a0:	7b7b      	ldrb	r3, [r7, #13]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d001      	beq.n	80090aa <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e089      	b.n	80091be <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2202      	movs	r2, #2
 80090b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090ba:	e031      	b.n	8009120 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d110      	bne.n	80090e4 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d102      	bne.n	80090ce <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090c8:	7b3b      	ldrb	r3, [r7, #12]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d001      	beq.n	80090d2 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e075      	b.n	80091be <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090e2:	e01d      	b.n	8009120 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d108      	bne.n	80090fc <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d105      	bne.n	80090fc <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f0:	7b7b      	ldrb	r3, [r7, #13]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d102      	bne.n	80090fc <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090f6:	7b3b      	ldrb	r3, [r7, #12]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d001      	beq.n	8009100 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e05e      	b.n	80091be <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_TIM_Encoder_Start_IT+0xc4>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b04      	cmp	r3, #4
 800912a:	d010      	beq.n	800914e <HAL_TIM_Encoder_Start_IT+0xe4>
 800912c:	e01f      	b.n	800916e <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2201      	movs	r2, #1
 8009134:	2100      	movs	r1, #0
 8009136:	4618      	mov	r0, r3
 8009138:	f002 fc76 	bl	800ba28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0202 	orr.w	r2, r2, #2
 800914a:	60da      	str	r2, [r3, #12]
      break;
 800914c:	e02e      	b.n	80091ac <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2201      	movs	r2, #1
 8009154:	2104      	movs	r1, #4
 8009156:	4618      	mov	r0, r3
 8009158:	f002 fc66 	bl	800ba28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0204 	orr.w	r2, r2, #4
 800916a:	60da      	str	r2, [r3, #12]
      break;
 800916c:	e01e      	b.n	80091ac <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2201      	movs	r2, #1
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f002 fc56 	bl	800ba28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2201      	movs	r2, #1
 8009182:	2104      	movs	r1, #4
 8009184:	4618      	mov	r0, r3
 8009186:	f002 fc4f 	bl	800ba28 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f042 0202 	orr.w	r2, r2, #2
 8009198:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f042 0204 	orr.w	r2, r2, #4
 80091a8:	60da      	str	r2, [r3, #12]
      break;
 80091aa:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10f      	bne.n	80091f6 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f002 fc22 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0202 	bic.w	r2, r2, #2
 80091f2:	60da      	str	r2, [r3, #12]
 80091f4:	e030      	b.n	8009258 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d10f      	bne.n	800921c <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	2104      	movs	r1, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f002 fc0f 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f022 0204 	bic.w	r2, r2, #4
 8009218:	60da      	str	r2, [r3, #12]
 800921a:	e01d      	b.n	8009258 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f002 fbff 	bl	800ba28 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	2104      	movs	r1, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f002 fbf8 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0202 	bic.w	r2, r2, #2
 8009246:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0204 	bic.w	r2, r2, #4
 8009256:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a1a      	ldr	r2, [r3, #32]
 800925e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009262:	4013      	ands	r3, r2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10f      	bne.n	8009288 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009272:	4013      	ands	r3, r2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d107      	bne.n	8009288 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 0201 	bic.w	r2, r2, #1
 8009286:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <HAL_TIM_Encoder_Stop_IT+0xce>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b04      	cmp	r3, #4
 8009292:	d138      	bne.n	8009306 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <HAL_TIM_Encoder_Stop_IT+0xde>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092a2:	e013      	b.n	80092cc <HAL_TIM_Encoder_Stop_IT+0x106>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d104      	bne.n	80092b4 <HAL_TIM_Encoder_Stop_IT+0xee>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092b2:	e00b      	b.n	80092cc <HAL_TIM_Encoder_Stop_IT+0x106>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d104      	bne.n	80092c4 <HAL_TIM_Encoder_Stop_IT+0xfe>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092c2:	e003      	b.n	80092cc <HAL_TIM_Encoder_Stop_IT+0x106>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d104      	bne.n	80092dc <HAL_TIM_Encoder_Stop_IT+0x116>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092da:	e024      	b.n	8009326 <HAL_TIM_Encoder_Stop_IT+0x160>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d104      	bne.n	80092ec <HAL_TIM_Encoder_Stop_IT+0x126>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092ea:	e01c      	b.n	8009326 <HAL_TIM_Encoder_Stop_IT+0x160>
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b08      	cmp	r3, #8
 80092f0:	d104      	bne.n	80092fc <HAL_TIM_Encoder_Stop_IT+0x136>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092fa:	e014      	b.n	8009326 <HAL_TIM_Encoder_Stop_IT+0x160>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009304:	e00f      	b.n	8009326 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_TIM_Encoder_Start_DMA>:
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009344:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800934c:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009354:	757b      	strb	r3, [r7, #21]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800935c:	753b      	strb	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d120      	bne.n	80093a6 <HAL_TIM_Encoder_Start_DMA+0x76>
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b02      	cmp	r3, #2
 8009368:	d002      	beq.n	8009370 <HAL_TIM_Encoder_Start_DMA+0x40>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800936a:	7d7b      	ldrb	r3, [r7, #21]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d101      	bne.n	8009374 <HAL_TIM_Encoder_Start_DMA+0x44>
    {
      return HAL_BUSY;
 8009370:	2302      	movs	r3, #2
 8009372:	e13f      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d113      	bne.n	80093a2 <HAL_TIM_Encoder_Start_DMA+0x72>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 800937a:	7d7b      	ldrb	r3, [r7, #21]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d110      	bne.n	80093a2 <HAL_TIM_Encoder_Start_DMA+0x72>
    {
      if ((pData1 == NULL) || (Length == 0U))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_TIM_Encoder_Start_DMA+0x5c>
 8009386:	8c3b      	ldrh	r3, [r7, #32]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <HAL_TIM_Encoder_Start_DMA+0x60>
      {
        return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e131      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2202      	movs	r2, #2
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      if ((pData1 == NULL) || (Length == 0U))
 80093a0:	e05d      	b.n	800945e <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e126      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d120      	bne.n	80093ee <HAL_TIM_Encoder_Start_DMA+0xbe>
  {
    if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80093ac:	7dbb      	ldrb	r3, [r7, #22]
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d002      	beq.n	80093b8 <HAL_TIM_Encoder_Start_DMA+0x88>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80093b2:	7d3b      	ldrb	r3, [r7, #20]
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d101      	bne.n	80093bc <HAL_TIM_Encoder_Start_DMA+0x8c>
    {
      return HAL_BUSY;
 80093b8:	2302      	movs	r3, #2
 80093ba:	e11b      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d113      	bne.n	80093ea <HAL_TIM_Encoder_Start_DMA+0xba>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 80093c2:	7d3b      	ldrb	r3, [r7, #20]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d110      	bne.n	80093ea <HAL_TIM_Encoder_Start_DMA+0xba>
    {
      if ((pData2 == NULL) || (Length == 0U))
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <HAL_TIM_Encoder_Start_DMA+0xa4>
 80093ce:	8c3b      	ldrh	r3, [r7, #32]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <HAL_TIM_Encoder_Start_DMA+0xa8>
      {
        return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e10d      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      if ((pData2 == NULL) || (Length == 0U))
 80093e8:	e039      	b.n	800945e <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e102      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }
  else
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d008      	beq.n	8009406 <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80093f4:	7dbb      	ldrb	r3, [r7, #22]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d005      	beq.n	8009406 <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80093fa:	7d7b      	ldrb	r3, [r7, #21]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d002      	beq.n	8009406 <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8009400:	7d3b      	ldrb	r3, [r7, #20]
 8009402:	2b02      	cmp	r3, #2
 8009404:	d101      	bne.n	800940a <HAL_TIM_Encoder_Start_DMA+0xda>
    {
      return HAL_BUSY;
 8009406:	2302      	movs	r3, #2
 8009408:	e0f4      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d124      	bne.n	800945a <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8009410:	7dbb      	ldrb	r3, [r7, #22]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d121      	bne.n	800945a <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8009416:	7d7b      	ldrb	r3, [r7, #21]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d11e      	bne.n	800945a <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 800941c:	7d3b      	ldrb	r3, [r7, #20]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d11b      	bne.n	800945a <HAL_TIM_Encoder_Start_DMA+0x12a>
    {
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HAL_TIM_Encoder_Start_DMA+0x104>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <HAL_TIM_Encoder_Start_DMA+0x104>
 800942e:	8c3b      	ldrh	r3, [r7, #32]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_TIM_Encoder_Start_DMA+0x108>
      {
        return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e0dd      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2202      	movs	r2, #2
 800943c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      if ((((pData1 == NULL) || (pData2 == NULL))) || (Length == 0U))
 8009458:	e001      	b.n	800945e <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e0ca      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
    }
  }

  switch (Channel)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <HAL_TIM_Encoder_Start_DMA+0x13c>
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2b04      	cmp	r3, #4
 8009468:	d033      	beq.n	80094d2 <HAL_TIM_Encoder_Start_DMA+0x1a2>
 800946a:	e065      	b.n	8009538 <HAL_TIM_Encoder_Start_DMA+0x208>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009470:	4a62      	ldr	r2, [pc, #392]	@ (80095fc <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8009472:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009478:	4a61      	ldr	r2, [pc, #388]	@ (8009600 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 800947a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009480:	4a60      	ldr	r2, [pc, #384]	@ (8009604 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8009482:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3334      	adds	r3, #52	@ 0x34
 800948e:	4619      	mov	r1, r3
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	8c3b      	ldrh	r3, [r7, #32]
 8009494:	f7f9 f8b1 	bl	80025fa <HAL_DMA_Start_IT>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <HAL_TIM_Encoder_Start_DMA+0x172>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e0a8      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      /* Enable the TIM Input Capture DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094b0:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2201      	movs	r2, #1
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f002 fab4 	bl	800ba28 <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0201 	orr.w	r2, r2, #1
 80094ce:	601a      	str	r2, [r3, #0]

      break;
 80094d0:	e08f      	b.n	80095f2 <HAL_TIM_Encoder_Start_DMA+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d6:	4a49      	ldr	r2, [pc, #292]	@ (80095fc <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 80094d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094de:	4a48      	ldr	r2, [pc, #288]	@ (8009600 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 80094e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	4a47      	ldr	r2, [pc, #284]	@ (8009604 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 80094e8:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3338      	adds	r3, #56	@ 0x38
 80094f4:	4619      	mov	r1, r3
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	8c3b      	ldrh	r3, [r7, #32]
 80094fa:	f7f9 f87e 	bl	80025fa <HAL_DMA_Start_IT>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <HAL_TIM_Encoder_Start_DMA+0x1d8>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e075      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009516:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2201      	movs	r2, #1
 800951e:	2104      	movs	r1, #4
 8009520:	4618      	mov	r0, r3
 8009522:	f002 fa81 	bl	800ba28 <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0201 	orr.w	r2, r2, #1
 8009534:	601a      	str	r2, [r3, #0]

      break;
 8009536:	e05c      	b.n	80095f2 <HAL_TIM_Encoder_Start_DMA+0x2c2>
    }

    default:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953c:	4a2f      	ldr	r2, [pc, #188]	@ (80095fc <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 800953e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009544:	4a2e      	ldr	r2, [pc, #184]	@ (8009600 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 8009546:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954c:	4a2d      	ldr	r2, [pc, #180]	@ (8009604 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 800954e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3334      	adds	r3, #52	@ 0x34
 800955a:	4619      	mov	r1, r3
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	8c3b      	ldrh	r3, [r7, #32]
 8009560:	f7f9 f84b 	bl	80025fa <HAL_DMA_Start_IT>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <HAL_TIM_Encoder_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e042      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }

      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	4a22      	ldr	r2, [pc, #136]	@ (80095fc <HAL_TIM_Encoder_Start_DMA+0x2cc>)
 8009574:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957a:	4a21      	ldr	r2, [pc, #132]	@ (8009600 <HAL_TIM_Encoder_Start_DMA+0x2d0>)
 800957c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	4a20      	ldr	r2, [pc, #128]	@ (8009604 <HAL_TIM_Encoder_Start_DMA+0x2d4>)
 8009584:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3338      	adds	r3, #56	@ 0x38
 8009590:	4619      	mov	r1, r3
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	8c3b      	ldrh	r3, [r7, #32]
 8009596:	f7f9 f830 	bl	80025fa <HAL_DMA_Start_IT>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <HAL_TIM_Encoder_Start_DMA+0x274>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e027      	b.n	80095f4 <HAL_TIM_Encoder_Start_DMA+0x2c4>
      }

      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b2:	60da      	str	r2, [r3, #12]
      /* Enable the TIM Input Capture  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80095c2:	60da      	str	r2, [r3, #12]

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2201      	movs	r2, #1
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f002 fa2b 	bl	800ba28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2201      	movs	r2, #1
 80095d8:	2104      	movs	r1, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f002 fa24 	bl	800ba28 <TIM_CCxChannelCmd>

      /* Enable the Peripheral */
      __HAL_TIM_ENABLE(htim);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0201 	orr.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]

      break;
 80095f0:	bf00      	nop
    }
  }

  /* Return function status */
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	0800af05 	.word	0x0800af05
 8009600:	0800afcd 	.word	0x0800afcd
 8009604:	0800ad63 	.word	0x0800ad63

08009608 <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d114      	bne.n	8009642 <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2200      	movs	r2, #0
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f002 fa01 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009634:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963a:	4618      	mov	r0, r3
 800963c:	f7f9 f8a5 	bl	800278a <HAL_DMA_Abort_IT>
 8009640:	e03f      	b.n	80096c2 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b04      	cmp	r3, #4
 8009646:	d114      	bne.n	8009672 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	2104      	movs	r1, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f002 f9e9 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009664:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800966a:	4618      	mov	r0, r3
 800966c:	f7f9 f88d 	bl	800278a <HAL_DMA_Abort_IT>
 8009670:	e027      	b.n	80096c2 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2200      	movs	r2, #0
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f002 f9d4 	bl	800ba28 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2200      	movs	r2, #0
 8009686:	2104      	movs	r1, #4
 8009688:	4618      	mov	r0, r3
 800968a:	f002 f9cd 	bl	800ba28 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800969c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096ac:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7f9 f869 	bl	800278a <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f9 f864 	bl	800278a <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a1a      	ldr	r2, [r3, #32]
 80096c8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80096cc:	4013      	ands	r3, r2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10f      	bne.n	80096f2 <HAL_TIM_Encoder_Stop_DMA+0xea>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6a1a      	ldr	r2, [r3, #32]
 80096d8:	f240 4344 	movw	r3, #1092	@ 0x444
 80096dc:	4013      	ands	r3, r2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d107      	bne.n	80096f2 <HAL_TIM_Encoder_Stop_DMA+0xea>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 0201 	bic.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <HAL_TIM_Encoder_Stop_DMA+0xf6>
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b04      	cmp	r3, #4
 80096fc:	d138      	bne.n	8009770 <HAL_TIM_Encoder_Stop_DMA+0x168>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <HAL_TIM_Encoder_Stop_DMA+0x106>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800970c:	e013      	b.n	8009736 <HAL_TIM_Encoder_Stop_DMA+0x12e>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b04      	cmp	r3, #4
 8009712:	d104      	bne.n	800971e <HAL_TIM_Encoder_Stop_DMA+0x116>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800971c:	e00b      	b.n	8009736 <HAL_TIM_Encoder_Stop_DMA+0x12e>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2b08      	cmp	r3, #8
 8009722:	d104      	bne.n	800972e <HAL_TIM_Encoder_Stop_DMA+0x126>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800972c:	e003      	b.n	8009736 <HAL_TIM_Encoder_Stop_DMA+0x12e>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <HAL_TIM_Encoder_Stop_DMA+0x13e>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009744:	e024      	b.n	8009790 <HAL_TIM_Encoder_Stop_DMA+0x188>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b04      	cmp	r3, #4
 800974a:	d104      	bne.n	8009756 <HAL_TIM_Encoder_Stop_DMA+0x14e>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009754:	e01c      	b.n	8009790 <HAL_TIM_Encoder_Stop_DMA+0x188>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b08      	cmp	r3, #8
 800975a:	d104      	bne.n	8009766 <HAL_TIM_Encoder_Stop_DMA+0x15e>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009764:	e014      	b.n	8009790 <HAL_TIM_Encoder_Stop_DMA+0x188>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800976e:	e00f      	b.n	8009790 <HAL_TIM_Encoder_Stop_DMA+0x188>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d020      	beq.n	80097fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01b      	beq.n	80097fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f06f 0202 	mvn.w	r2, #2
 80097ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f9df 	bl	800aba8 <HAL_TIM_IC_CaptureCallback>
 80097ea:	e005      	b.n	80097f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f9d1 	bl	800ab94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f9ec 	bl	800abd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d020      	beq.n	800984a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f003 0304 	and.w	r3, r3, #4
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01b      	beq.n	800984a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f06f 0204 	mvn.w	r2, #4
 800981a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 f9b9 	bl	800aba8 <HAL_TIM_IC_CaptureCallback>
 8009836:	e005      	b.n	8009844 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f9ab 	bl	800ab94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 f9c6 	bl	800abd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d020      	beq.n	8009896 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0308 	and.w	r3, r3, #8
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01b      	beq.n	8009896 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f06f 0208 	mvn.w	r2, #8
 8009866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2204      	movs	r2, #4
 800986c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 f993 	bl	800aba8 <HAL_TIM_IC_CaptureCallback>
 8009882:	e005      	b.n	8009890 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 f985 	bl	800ab94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 f9a0 	bl	800abd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	d020      	beq.n	80098e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01b      	beq.n	80098e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f06f 0210 	mvn.w	r2, #16
 80098b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2208      	movs	r2, #8
 80098b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 f96d 	bl	800aba8 <HAL_TIM_IC_CaptureCallback>
 80098ce:	e005      	b.n	80098dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f95f 	bl	800ab94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f001 f97a 	bl	800abd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00c      	beq.n	8009906 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f06f 0201 	mvn.w	r2, #1
 80098fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7f6 ff97 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00c      	beq.n	800992a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009916:	2b00      	cmp	r3, #0
 8009918:	d007      	beq.n	800992a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f004 f974 	bl	800dc12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00c      	beq.n	800994e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 f955 	bl	800abf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f003 0320 	and.w	r3, r3, #32
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00c      	beq.n	8009972 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f003 0320 	and.w	r3, r3, #32
 800995e:	2b00      	cmp	r3, #0
 8009960:	d007      	beq.n	8009972 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f06f 0220 	mvn.w	r2, #32
 800996a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f004 f93c 	bl	800dbea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009994:	2302      	movs	r3, #2
 8009996:	e047      	b.n	8009a28 <HAL_TIM_OC_ConfigChannel+0xae>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b0c      	cmp	r3, #12
 80099a4:	d838      	bhi.n	8009a18 <HAL_TIM_OC_ConfigChannel+0x9e>
 80099a6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ac <HAL_TIM_OC_ConfigChannel+0x32>)
 80099a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ac:	080099e1 	.word	0x080099e1
 80099b0:	08009a19 	.word	0x08009a19
 80099b4:	08009a19 	.word	0x08009a19
 80099b8:	08009a19 	.word	0x08009a19
 80099bc:	080099ef 	.word	0x080099ef
 80099c0:	08009a19 	.word	0x08009a19
 80099c4:	08009a19 	.word	0x08009a19
 80099c8:	08009a19 	.word	0x08009a19
 80099cc:	080099fd 	.word	0x080099fd
 80099d0:	08009a19 	.word	0x08009a19
 80099d4:	08009a19 	.word	0x08009a19
 80099d8:	08009a19 	.word	0x08009a19
 80099dc:	08009a0b 	.word	0x08009a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68b9      	ldr	r1, [r7, #8]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fc1a 	bl	800b220 <TIM_OC1_SetConfig>
      break;
 80099ec:	e017      	b.n	8009a1e <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 fc83 	bl	800b300 <TIM_OC2_SetConfig>
      break;
 80099fa:	e010      	b.n	8009a1e <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fcf2 	bl	800b3ec <TIM_OC3_SetConfig>
      break;
 8009a08:	e009      	b.n	8009a1e <HAL_TIM_OC_ConfigChannel+0xa4>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fd5f 	bl	800b4d4 <TIM_OC4_SetConfig>
      break;
 8009a16:	e002      	b.n	8009a1e <HAL_TIM_OC_ConfigChannel+0xa4>
    }

    default:
      status = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <HAL_TIM_IC_ConfigChannel+0x1e>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e088      	b.n	8009b60 <HAL_TIM_IC_ConfigChannel+0x130>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d11b      	bne.n	8009a94 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009a6c:	f001 fe19 	bl	800b6a2 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 020c 	bic.w	r2, r2, #12
 8009a7e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6999      	ldr	r1, [r3, #24]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	619a      	str	r2, [r3, #24]
 8009a92:	e060      	b.n	8009b56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d11c      	bne.n	8009ad4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009aaa:	f001 fe9c 	bl	800b7e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009abc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6999      	ldr	r1, [r3, #24]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	021a      	lsls	r2, r3, #8
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	619a      	str	r2, [r3, #24]
 8009ad2:	e040      	b.n	8009b56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d11b      	bne.n	8009b12 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009aea:	f001 fee9 	bl	800b8c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69da      	ldr	r2, [r3, #28]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 020c 	bic.w	r2, r2, #12
 8009afc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69d9      	ldr	r1, [r3, #28]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	61da      	str	r2, [r3, #28]
 8009b10:	e021      	b.n	8009b56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b0c      	cmp	r3, #12
 8009b16:	d11c      	bne.n	8009b52 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009b28:	f001 ff06 	bl	800b938 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	69da      	ldr	r2, [r3, #28]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009b3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69d9      	ldr	r1, [r3, #28]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	021a      	lsls	r2, r3, #8
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	61da      	str	r2, [r3, #28]
 8009b50:	e001      	b.n	8009b56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b82:	2302      	movs	r3, #2
 8009b84:	e0ae      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b0c      	cmp	r3, #12
 8009b92:	f200 809f 	bhi.w	8009cd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b96:	a201      	add	r2, pc, #4	@ (adr r2, 8009b9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bd1 	.word	0x08009bd1
 8009ba0:	08009cd5 	.word	0x08009cd5
 8009ba4:	08009cd5 	.word	0x08009cd5
 8009ba8:	08009cd5 	.word	0x08009cd5
 8009bac:	08009c11 	.word	0x08009c11
 8009bb0:	08009cd5 	.word	0x08009cd5
 8009bb4:	08009cd5 	.word	0x08009cd5
 8009bb8:	08009cd5 	.word	0x08009cd5
 8009bbc:	08009c53 	.word	0x08009c53
 8009bc0:	08009cd5 	.word	0x08009cd5
 8009bc4:	08009cd5 	.word	0x08009cd5
 8009bc8:	08009cd5 	.word	0x08009cd5
 8009bcc:	08009c93 	.word	0x08009c93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fb22 	bl	800b220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0208 	orr.w	r2, r2, #8
 8009bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0204 	bic.w	r2, r2, #4
 8009bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6999      	ldr	r1, [r3, #24]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	691a      	ldr	r2, [r3, #16]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	619a      	str	r2, [r3, #24]
      break;
 8009c0e:	e064      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fb72 	bl	800b300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6999      	ldr	r1, [r3, #24]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	021a      	lsls	r2, r3, #8
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	619a      	str	r2, [r3, #24]
      break;
 8009c50:	e043      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 fbc7 	bl	800b3ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0208 	orr.w	r2, r2, #8
 8009c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69da      	ldr	r2, [r3, #28]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0204 	bic.w	r2, r2, #4
 8009c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69d9      	ldr	r1, [r3, #28]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	691a      	ldr	r2, [r3, #16]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	61da      	str	r2, [r3, #28]
      break;
 8009c90:	e023      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fc1b 	bl	800b4d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	69da      	ldr	r2, [r3, #28]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69da      	ldr	r2, [r3, #28]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69d9      	ldr	r1, [r3, #28]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	021a      	lsls	r2, r3, #8
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	61da      	str	r2, [r3, #28]
      break;
 8009cd2:	e002      	b.n	8009cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	@ 0x30
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	f000 80be 	beq.w	8009e86 <HAL_TIM_OnePulse_ConfigChannel+0x19a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_TIM_OnePulse_ConfigChannel+0x2c>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e0b7      	b.n	8009e88 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	613b      	str	r3, [r7, #16]
    temp1.Pulse = sConfig->Pulse;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	617b      	str	r3, [r7, #20]
    temp1.OCPolarity = sConfig->OCPolarity;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	61bb      	str	r3, [r7, #24]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	61fb      	str	r3, [r7, #28]
    temp1.OCIdleState = sConfig->OCIdleState;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	627b      	str	r3, [r7, #36]	@ 0x24
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

    switch (OutputChannel)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_TIM_OnePulse_ConfigChannel+0x6e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d009      	beq.n	8009d6c <HAL_TIM_OnePulse_ConfigChannel+0x80>
 8009d58:	e011      	b.n	8009d7e <HAL_TIM_OnePulse_ConfigChannel+0x92>
    {
      case TIM_CHANNEL_1:
      {
        assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

        TIM_OC1_SetConfig(htim->Instance, &temp1);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f107 0210 	add.w	r2, r7, #16
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 fa5b 	bl	800b220 <TIM_OC1_SetConfig>
        break;
 8009d6a:	e00c      	b.n	8009d86 <HAL_TIM_OnePulse_ConfigChannel+0x9a>

      case TIM_CHANNEL_2:
      {
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

        TIM_OC2_SetConfig(htim->Instance, &temp1);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f107 0210 	add.w	r2, r7, #16
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 fac2 	bl	800b300 <TIM_OC2_SetConfig>
        break;
 8009d7c:	e003      	b.n	8009d86 <HAL_TIM_OnePulse_ConfigChannel+0x9a>
      }

      default:
        status = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        break;
 8009d84:	bf00      	nop
    }

    if (status == HAL_OK)
 8009d86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d170      	bne.n	8009e70 <HAL_TIM_OnePulse_ConfigChannel+0x184>
    {
      switch (InputChannel)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_TIM_OnePulse_ConfigChannel+0xb0>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	d033      	beq.n	8009e02 <HAL_TIM_OnePulse_ConfigChannel+0x116>
 8009d9a:	e065      	b.n	8009e68 <HAL_TIM_OnePulse_ConfigChannel+0x17c>
      {
        case TIM_CHANNEL_1:
        {
          assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

          TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6818      	ldr	r0, [r3, #0]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	6999      	ldr	r1, [r3, #24]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	f001 fc79 	bl	800b6a2 <TIM_TI1_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC1PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 020c 	bic.w	r2, r2, #12
 8009dbe:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689a      	ldr	r2, [r3, #8]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009dce:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI1FP1;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8009dde:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f022 0207 	bic.w	r2, r2, #7
 8009dee:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0206 	orr.w	r2, r2, #6
 8009dfe:	609a      	str	r2, [r3, #8]
          break;
 8009e00:	e036      	b.n	8009e70 <HAL_TIM_OnePulse_ConfigChannel+0x184>

        case TIM_CHANNEL_2:
        {
          assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

          TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6999      	ldr	r1, [r3, #24]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	69da      	ldr	r2, [r3, #28]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f001 fce8 	bl	800b7e6 <TIM_TI2_SetConfig>
                            sConfig->ICSelection, sConfig->ICFilter);

          /* Reset the IC2PSC Bits */
          htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009e24:	619a      	str	r2, [r3, #24]

          /* Select the Trigger source */
          htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009e34:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009e44:	609a      	str	r2, [r3, #8]

          /* Select the Slave Mode */
          htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0207 	bic.w	r2, r2, #7
 8009e54:	609a      	str	r2, [r3, #8]
          htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f042 0206 	orr.w	r2, r2, #6
 8009e64:	609a      	str	r2, [r3, #8]
          break;
 8009e66:	e003      	b.n	8009e70 <HAL_TIM_OnePulse_ConfigChannel+0x184>
        }

        default:
          status = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8009e6e:	bf00      	nop
      }
    }

    htim->State = HAL_TIM_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    __HAL_UNLOCK(htim);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return status;
 8009e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e84:	e000      	b.n	8009e88 <HAL_TIM_OnePulse_ConfigChannel+0x19c>
  }
  else
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
  }
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3730      	adds	r7, #48	@ 0x30
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_TIM_DMABurst_WriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, const uint32_t *BurstBuffer,
                                              uint32_t  BurstLength)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                            ((BurstLength) >> 8U) + 1U);
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 f807 	bl	8009ec4 <HAL_TIM_DMABurst_MultiWriteStart>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	75fb      	strb	r3, [r7, #23]



  return status;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, const uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d101      	bne.n	8009ee6 <HAL_TIM_DMABurst_MultiWriteStart+0x22>
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e12b      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d10b      	bne.n	8009f0a <HAL_TIM_DMABurst_MultiWriteStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <HAL_TIM_DMABurst_MultiWriteStart+0x3e>
    {
      return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e11d      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2202      	movs	r2, #2
 8009f06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  else
  {
    /* nothing to do */
  }

  switch (BurstRequestSrc)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f10:	f000 80d8 	beq.w	800a0c4 <HAL_TIM_DMABurst_MultiWriteStart+0x200>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f1a:	f200 80ee 	bhi.w	800a0fa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f24:	f000 80b3 	beq.w	800a08e <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f2e:	f200 80e4 	bhi.w	800a0fa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f38:	f000 808e 	beq.w	800a058 <HAL_TIM_DMABurst_MultiWriteStart+0x194>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f42:	f200 80da 	bhi.w	800a0fa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f4c:	d069      	beq.n	800a022 <HAL_TIM_DMABurst_MultiWriteStart+0x15e>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f54:	f200 80d1 	bhi.w	800a0fa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f5e:	d045      	beq.n	8009fec <HAL_TIM_DMABurst_MultiWriteStart+0x128>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f66:	f200 80c8 	bhi.w	800a0fa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f70:	d004      	beq.n	8009f7c <HAL_TIM_DMABurst_MultiWriteStart+0xb8>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f78:	d01c      	beq.n	8009fb4 <HAL_TIM_DMABurst_MultiWriteStart+0xf0>
 8009f7a:	e0be      	b.n	800a0fa <HAL_TIM_DMABurst_MultiWriteStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	4a71      	ldr	r2, [pc, #452]	@ (800a148 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8009f82:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6a1b      	ldr	r3, [r3, #32]
 8009f88:	4a70      	ldr	r2, [pc, #448]	@ (800a14c <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 8009f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	4a6f      	ldr	r2, [pc, #444]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8009f92:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a18      	ldr	r0, [r3, #32]
 8009f98:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	f7f8 fb29 	bl	80025fa <HAL_DMA_Start_IT>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 80a8 	beq.w	800a100 <HAL_TIM_DMABurst_MultiWriteStart+0x23c>
      {
        /* Return error status */
        return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e0c4      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb8:	4a66      	ldr	r2, [pc, #408]	@ (800a154 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8009fba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc0:	4a65      	ldr	r2, [pc, #404]	@ (800a158 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8009fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc8:	4a61      	ldr	r2, [pc, #388]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8009fca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009fd0:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fdc:	f7f8 fb0d 	bl	80025fa <HAL_DMA_Start_IT>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 808e 	beq.w	800a104 <HAL_TIM_DMABurst_MultiWriteStart+0x240>
      {
        /* Return error status */
        return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e0a8      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	4a58      	ldr	r2, [pc, #352]	@ (800a154 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8009ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff8:	4a57      	ldr	r2, [pc, #348]	@ (800a158 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8009ffa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a000:	4a53      	ldr	r2, [pc, #332]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800a002:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a008:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 800a010:	461a      	mov	r2, r3
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	f7f8 faf1 	bl	80025fa <HAL_DMA_Start_IT>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d074      	beq.n	800a108 <HAL_TIM_DMABurst_MultiWriteStart+0x244>
      {
        /* Return error status */
        return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e08d      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a026:	4a4b      	ldr	r2, [pc, #300]	@ (800a154 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 800a028:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02e:	4a4a      	ldr	r2, [pc, #296]	@ (800a158 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 800a030:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a036:	4a46      	ldr	r2, [pc, #280]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800a038:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a03e:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 800a046:	461a      	mov	r2, r3
 800a048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04a:	f7f8 fad6 	bl	80025fa <HAL_DMA_Start_IT>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d05b      	beq.n	800a10c <HAL_TIM_DMABurst_MultiWriteStart+0x248>
      {
        /* Return error status */
        return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e072      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05c:	4a3d      	ldr	r2, [pc, #244]	@ (800a154 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 800a05e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a064:	4a3c      	ldr	r2, [pc, #240]	@ (800a158 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 800a066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a06c:	4a38      	ldr	r2, [pc, #224]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800a06e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a074:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 800a07c:	461a      	mov	r2, r3
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	f7f8 fabb 	bl	80025fa <HAL_DMA_Start_IT>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d042      	beq.n	800a110 <HAL_TIM_DMABurst_MultiWriteStart+0x24c>
      {
        /* Return error status */
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e057      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a092:	4a32      	ldr	r2, [pc, #200]	@ (800a15c <HAL_TIM_DMABurst_MultiWriteStart+0x298>)
 800a094:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a09a:	4a31      	ldr	r2, [pc, #196]	@ (800a160 <HAL_TIM_DMABurst_MultiWriteStart+0x29c>)
 800a09c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0a2:	4a2b      	ldr	r2, [pc, #172]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800a0a4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a0aa:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	f7f8 faa0 	bl	80025fa <HAL_DMA_Start_IT>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d029      	beq.n	800a114 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      {
        /* Return error status */
        return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e03c      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c8:	4a26      	ldr	r2, [pc, #152]	@ (800a164 <HAL_TIM_DMABurst_MultiWriteStart+0x2a0>)
 800a0ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d0:	4a25      	ldr	r2, [pc, #148]	@ (800a168 <HAL_TIM_DMABurst_MultiWriteStart+0x2a4>)
 800a0d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a150 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 800a0da:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a0e0:	6839      	ldr	r1, [r7, #0]
                           (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	334c      	adds	r3, #76	@ 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	f7f8 fa85 	bl	80025fa <HAL_DMA_Start_IT>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d010      	beq.n	800a118 <HAL_TIM_DMABurst_MultiWriteStart+0x254>
      {
        /* Return error status */
        return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e021      	b.n	800a13e <HAL_TIM_DMABurst_MultiWriteStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fe:	e00c      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a100:	bf00      	nop
 800a102:	e00a      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a104:	bf00      	nop
 800a106:	e008      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a108:	bf00      	nop
 800a10a:	e006      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a10c:	bf00      	nop
 800a10e:	e004      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a110:	bf00      	nop
 800a112:	e002      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <HAL_TIM_DMABurst_MultiWriteStart+0x256>
      break;
 800a118:	bf00      	nop
  }

  if (status == HAL_OK)
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10d      	bne.n	800a13c <HAL_TIM_DMABurst_MultiWriteStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	6a3a      	ldr	r2, [r7, #32]
 800a128:	430a      	orrs	r2, r1
 800a12a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68d9      	ldr	r1, [r3, #12]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	430a      	orrs	r2, r1
 800a13a:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	0800b035 	.word	0x0800b035
 800a14c:	0800b063 	.word	0x0800b063
 800a150:	0800ad63 	.word	0x0800ad63
 800a154:	0800adf5 	.word	0x0800adf5
 800a158:	0800ae9d 	.word	0x0800ae9d
 800a15c:	0800dc95 	.word	0x0800dc95
 800a160:	0800dcb9 	.word	0x0800dcb9
 800a164:	0800b07f 	.word	0x0800b07f
 800a168:	0800b0ad 	.word	0x0800b0ad

0800a16c <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a180:	d050      	beq.n	800a224 <HAL_TIM_DMABurst_WriteStop+0xb8>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a188:	d852      	bhi.n	800a230 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a190:	d042      	beq.n	800a218 <HAL_TIM_DMABurst_WriteStop+0xac>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a198:	d84a      	bhi.n	800a230 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a0:	d034      	beq.n	800a20c <HAL_TIM_DMABurst_WriteStop+0xa0>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1a8:	d842      	bhi.n	800a230 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1b0:	d026      	beq.n	800a200 <HAL_TIM_DMABurst_WriteStop+0x94>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1b8:	d83a      	bhi.n	800a230 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1c0:	d018      	beq.n	800a1f4 <HAL_TIM_DMABurst_WriteStop+0x88>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1c8:	d832      	bhi.n	800a230 <HAL_TIM_DMABurst_WriteStop+0xc4>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1d0:	d004      	beq.n	800a1dc <HAL_TIM_DMABurst_WriteStop+0x70>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d8:	d006      	beq.n	800a1e8 <HAL_TIM_DMABurst_WriteStop+0x7c>
 800a1da:	e029      	b.n	800a230 <HAL_TIM_DMABurst_WriteStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f8 fad2 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a1e6:	e026      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7f8 facc 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a1f2:	e020      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f8 fac6 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a1fe:	e01a      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a204:	4618      	mov	r0, r3
 800a206:	f7f8 fac0 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a20a:	e014      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a210:	4618      	mov	r0, r3
 800a212:	f7f8 faba 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a216:	e00e      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f8 fab4 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a222:	e008      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a228:	4618      	mov	r0, r3
 800a22a:	f7f8 faae 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a22e:	e002      	b.n	800a236 <HAL_TIM_DMABurst_WriteStop+0xca>
    }
    default:
      status = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	bf00      	nop
  }

  if (status == HAL_OK)
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10c      	bne.n	800a256 <HAL_TIM_DMABurst_WriteStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68d9      	ldr	r1, [r3, #12]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	43da      	mvns	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	400a      	ands	r2, r1
 800a24c:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

  /* Return function status */
  return status;
 800a256:	7bfb      	ldrb	r3, [r7, #15]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                           ((BurstLength) >> 8U) + 1U);
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	0a1b      	lsrs	r3, r3, #8
  status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 800a272:	3301      	adds	r3, #1
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f000 f807 	bl	800a294 <HAL_TIM_DMABurst_MultiReadStart>
 800a286:	4603      	mov	r3, r0
 800a288:	75fb      	strb	r3, [r7, #23]


  return status;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <HAL_TIM_DMABurst_MultiReadStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                  uint32_t BurstRequestSrc, uint32_t  *BurstBuffer,
                                                  uint32_t  BurstLength, uint32_t  DataLength)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_DMABurst_MultiReadStart+0x22>
  {
    return HAL_BUSY;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e12b      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10b      	bne.n	800a2da <HAL_TIM_DMABurst_MultiReadStart+0x46>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <HAL_TIM_DMABurst_MultiReadStart+0x3e>
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <HAL_TIM_DMABurst_MultiReadStart+0x3e>
    {
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e11d      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2e0:	f000 80d8 	beq.w	800a494 <HAL_TIM_DMABurst_MultiReadStart+0x200>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2ea:	f200 80ee 	bhi.w	800a4ca <HAL_TIM_DMABurst_MultiReadStart+0x236>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f4:	f000 80b3 	beq.w	800a45e <HAL_TIM_DMABurst_MultiReadStart+0x1ca>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2fe:	f200 80e4 	bhi.w	800a4ca <HAL_TIM_DMABurst_MultiReadStart+0x236>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a308:	f000 808e 	beq.w	800a428 <HAL_TIM_DMABurst_MultiReadStart+0x194>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a312:	f200 80da 	bhi.w	800a4ca <HAL_TIM_DMABurst_MultiReadStart+0x236>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a31c:	d069      	beq.n	800a3f2 <HAL_TIM_DMABurst_MultiReadStart+0x15e>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a324:	f200 80d1 	bhi.w	800a4ca <HAL_TIM_DMABurst_MultiReadStart+0x236>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a32e:	d045      	beq.n	800a3bc <HAL_TIM_DMABurst_MultiReadStart+0x128>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a336:	f200 80c8 	bhi.w	800a4ca <HAL_TIM_DMABurst_MultiReadStart+0x236>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a340:	d004      	beq.n	800a34c <HAL_TIM_DMABurst_MultiReadStart+0xb8>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a348:	d01c      	beq.n	800a384 <HAL_TIM_DMABurst_MultiReadStart+0xf0>
 800a34a:	e0be      	b.n	800a4ca <HAL_TIM_DMABurst_MultiReadStart+0x236>
  {
    case TIM_DMA_UPDATE:
    {
      /* Set the DMA Period elapsed callbacks */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a1b      	ldr	r3, [r3, #32]
 800a350:	4a71      	ldr	r2, [pc, #452]	@ (800a518 <HAL_TIM_DMABurst_MultiReadStart+0x284>)
 800a352:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	4a70      	ldr	r2, [pc, #448]	@ (800a51c <HAL_TIM_DMABurst_MultiReadStart+0x288>)
 800a35a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	4a6f      	ldr	r2, [pc, #444]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a362:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6a18      	ldr	r0, [r3, #32]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	334c      	adds	r3, #76	@ 0x4c
 800a36e:	4619      	mov	r1, r3
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	f7f8 f941 	bl	80025fa <HAL_DMA_Start_IT>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 80a8 	beq.w	800a4d0 <HAL_TIM_DMABurst_MultiReadStart+0x23c>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e0c4      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a388:	4a66      	ldr	r2, [pc, #408]	@ (800a524 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 800a38a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a390:	4a65      	ldr	r2, [pc, #404]	@ (800a528 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 800a392:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a398:	4a61      	ldr	r2, [pc, #388]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a39a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	334c      	adds	r3, #76	@ 0x4c
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ac:	f7f8 f925 	bl	80025fa <HAL_DMA_Start_IT>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 808e 	beq.w	800a4d4 <HAL_TIM_DMABurst_MultiReadStart+0x240>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e0a8      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	4a58      	ldr	r2, [pc, #352]	@ (800a524 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 800a3c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	4a57      	ldr	r2, [pc, #348]	@ (800a528 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 800a3ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	4a53      	ldr	r2, [pc, #332]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a3d2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	334c      	adds	r3, #76	@ 0x4c
 800a3de:	4619      	mov	r1, r3
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e4:	f7f8 f909 	bl	80025fa <HAL_DMA_Start_IT>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d074      	beq.n	800a4d8 <HAL_TIM_DMABurst_MultiReadStart+0x244>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e08d      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f6:	4a4b      	ldr	r2, [pc, #300]	@ (800a524 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 800a3f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fe:	4a4a      	ldr	r2, [pc, #296]	@ (800a528 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 800a400:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a406:	4a46      	ldr	r2, [pc, #280]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a408:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	334c      	adds	r3, #76	@ 0x4c
 800a414:	4619      	mov	r1, r3
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41a:	f7f8 f8ee 	bl	80025fa <HAL_DMA_Start_IT>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d05b      	beq.n	800a4dc <HAL_TIM_DMABurst_MultiReadStart+0x248>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e072      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_CC4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a42c:	4a3d      	ldr	r2, [pc, #244]	@ (800a524 <HAL_TIM_DMABurst_MultiReadStart+0x290>)
 800a42e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a434:	4a3c      	ldr	r2, [pc, #240]	@ (800a528 <HAL_TIM_DMABurst_MultiReadStart+0x294>)
 800a436:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a43c:	4a38      	ldr	r2, [pc, #224]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a43e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	334c      	adds	r3, #76	@ 0x4c
 800a44a:	4619      	mov	r1, r3
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a450:	f7f8 f8d3 	bl	80025fa <HAL_DMA_Start_IT>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d042      	beq.n	800a4e0 <HAL_TIM_DMABurst_MultiReadStart+0x24c>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e057      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_COM:
    {
      /* Set the DMA commutation callbacks */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a462:	4a32      	ldr	r2, [pc, #200]	@ (800a52c <HAL_TIM_DMABurst_MultiReadStart+0x298>)
 800a464:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46a:	4a31      	ldr	r2, [pc, #196]	@ (800a530 <HAL_TIM_DMABurst_MultiReadStart+0x29c>)
 800a46c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a472:	4a2b      	ldr	r2, [pc, #172]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a474:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	334c      	adds	r3, #76	@ 0x4c
 800a480:	4619      	mov	r1, r3
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	f7f8 f8b8 	bl	80025fa <HAL_DMA_Start_IT>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d029      	beq.n	800a4e4 <HAL_TIM_DMABurst_MultiReadStart+0x250>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e03c      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      break;
    }
    case TIM_DMA_TRIGGER:
    {
      /* Set the DMA trigger callbacks */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a498:	4a26      	ldr	r2, [pc, #152]	@ (800a534 <HAL_TIM_DMABurst_MultiReadStart+0x2a0>)
 800a49a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a0:	4a25      	ldr	r2, [pc, #148]	@ (800a538 <HAL_TIM_DMABurst_MultiReadStart+0x2a4>)
 800a4a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a520 <HAL_TIM_DMABurst_MultiReadStart+0x28c>)
 800a4aa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	334c      	adds	r3, #76	@ 0x4c
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4bc:	f7f8 f89d 	bl	80025fa <HAL_DMA_Start_IT>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d010      	beq.n	800a4e8 <HAL_TIM_DMABurst_MultiReadStart+0x254>
                           DataLength) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e021      	b.n	800a50e <HAL_TIM_DMABurst_MultiReadStart+0x27a>
      }
      break;
    }
    default:
      status = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ce:	e00c      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4d0:	bf00      	nop
 800a4d2:	e00a      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4d4:	bf00      	nop
 800a4d6:	e008      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4d8:	bf00      	nop
 800a4da:	e006      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4dc:	bf00      	nop
 800a4de:	e004      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4e0:	bf00      	nop
 800a4e2:	e002      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4e4:	bf00      	nop
 800a4e6:	e000      	b.n	800a4ea <HAL_TIM_DMABurst_MultiReadStart+0x256>
      break;
 800a4e8:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10d      	bne.n	800a50c <HAL_TIM_DMABurst_MultiReadStart+0x278>
  {
    /* Configure the DMA Burst Mode */
    htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68b9      	ldr	r1, [r7, #8]
 800a4f6:	6a3a      	ldr	r2, [r7, #32]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Enable the TIM DMA Request */
    __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68d9      	ldr	r1, [r3, #12]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	430a      	orrs	r2, r1
 800a50a:	60da      	str	r2, [r3, #12]
  }

  /* Return function status */
  return status;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	0800b035 	.word	0x0800b035
 800a51c:	0800b063 	.word	0x0800b063
 800a520:	0800ad63 	.word	0x0800ad63
 800a524:	0800af05 	.word	0x0800af05
 800a528:	0800afcd 	.word	0x0800afcd
 800a52c:	0800dc95 	.word	0x0800dc95
 800a530:	0800dcb9 	.word	0x0800dcb9
 800a534:	0800b07f 	.word	0x0800b07f
 800a538:	0800b0ad 	.word	0x0800b0ad

0800a53c <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA stream) */
  switch (BurstRequestSrc)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a550:	d050      	beq.n	800a5f4 <HAL_TIM_DMABurst_ReadStop+0xb8>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a558:	d852      	bhi.n	800a600 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a560:	d042      	beq.n	800a5e8 <HAL_TIM_DMABurst_ReadStop+0xac>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a568:	d84a      	bhi.n	800a600 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a570:	d034      	beq.n	800a5dc <HAL_TIM_DMABurst_ReadStop+0xa0>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a578:	d842      	bhi.n	800a600 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a580:	d026      	beq.n	800a5d0 <HAL_TIM_DMABurst_ReadStop+0x94>
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a588:	d83a      	bhi.n	800a600 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a590:	d018      	beq.n	800a5c4 <HAL_TIM_DMABurst_ReadStop+0x88>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a598:	d832      	bhi.n	800a600 <HAL_TIM_DMABurst_ReadStop+0xc4>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5a0:	d004      	beq.n	800a5ac <HAL_TIM_DMABurst_ReadStop+0x70>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5a8:	d006      	beq.n	800a5b8 <HAL_TIM_DMABurst_ReadStop+0x7c>
 800a5aa:	e029      	b.n	800a600 <HAL_TIM_DMABurst_ReadStop+0xc4>
  {
    case TIM_DMA_UPDATE:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7f8 f8ea 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5b6:	e026      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC1:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f8 f8e4 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5c2:	e020      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC2:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7f8 f8de 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5ce:	e01a      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC3:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f8 f8d8 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5da:	e014      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_CC4:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7f8 f8d2 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5e6:	e00e      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_COM:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7f8 f8cc 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5f2:	e008      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    case TIM_DMA_TRIGGER:
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f8 f8c6 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800a5fe:	e002      	b.n	800a606 <HAL_TIM_DMABurst_ReadStop+0xca>
    }
    default:
      status = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
      break;
 800a604:	bf00      	nop
  }

  if (status == HAL_OK)
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10c      	bne.n	800a626 <HAL_TIM_DMABurst_ReadStop+0xea>
  {
    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68d9      	ldr	r1, [r3, #12]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	43da      	mvns	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	400a      	ands	r2, r1
 800a61c:	60da      	str	r2, [r3, #12]

    /* Change the DMA burst operation state */
    htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

  /* Return function status */
  return status;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d101      	bne.n	800a648 <HAL_TIM_GenerateEvent+0x18>
 800a644:	2302      	movs	r3, #2
 800a646:	e014      	b.n	800a672 <HAL_TIM_GenerateEvent+0x42>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           const TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b086      	sub	sp, #24
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_TIM_ConfigOCrefClear+0x1e>
 800a698:	2302      	movs	r3, #2
 800a69a:	e0b9      	b.n	800a810 <HAL_TIM_ConfigOCrefClear+0x192>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  switch (sClearInputConfig->ClearInputSource)
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <HAL_TIM_ConfigOCrefClear+0x3c>
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d009      	beq.n	800a6cc <HAL_TIM_ConfigOCrefClear+0x4e>
 800a6b8:	e021      	b.n	800a6fe <HAL_TIM_ConfigOCrefClear+0x80>
  {
    case TIM_CLEARINPUTSOURCE_NONE:
    {
      /* Clear the OCREF clear selection bit and the the ETR Bits */
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800a6c8:	609a      	str	r2, [r3, #8]
      break;
 800a6ca:	e01b      	b.n	800a704 <HAL_TIM_ConfigOCrefClear+0x86>
      assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
      assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
      assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

      /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d009      	beq.n	800a6e8 <HAL_TIM_ConfigOCrefClear+0x6a>
      {
        htim->State = HAL_TIM_STATE_READY;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        __HAL_UNLOCK(htim);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e093      	b.n	800a810 <HAL_TIM_ConfigOCrefClear+0x192>
      }

      TIM_ETR_SetConfig(htim->Instance,
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6818      	ldr	r0, [r3, #0]
                        sClearInputConfig->ClearInputPrescaler,
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	68d9      	ldr	r1, [r3, #12]
                        sClearInputConfig->ClearInputPolarity,
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	689a      	ldr	r2, [r3, #8]
                        sClearInputConfig->ClearInputFilter);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a6f8:	f001 f976 	bl	800b9e8 <TIM_ETR_SetConfig>
      break;
 800a6fc:	e002      	b.n	800a704 <HAL_TIM_ConfigOCrefClear+0x86>
    }

    default:
      status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]
      break;
 800a702:	bf00      	nop
  }

  if (status == HAL_OK)
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d179      	bne.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
  {
    switch (Channel)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b0c      	cmp	r3, #12
 800a70e:	d875      	bhi.n	800a7fc <HAL_TIM_ConfigOCrefClear+0x17e>
 800a710:	a201      	add	r2, pc, #4	@ (adr r2, 800a718 <HAL_TIM_ConfigOCrefClear+0x9a>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a74d 	.word	0x0800a74d
 800a71c:	0800a7fd 	.word	0x0800a7fd
 800a720:	0800a7fd 	.word	0x0800a7fd
 800a724:	0800a7fd 	.word	0x0800a7fd
 800a728:	0800a779 	.word	0x0800a779
 800a72c:	0800a7fd 	.word	0x0800a7fd
 800a730:	0800a7fd 	.word	0x0800a7fd
 800a734:	0800a7fd 	.word	0x0800a7fd
 800a738:	0800a7a5 	.word	0x0800a7a5
 800a73c:	0800a7fd 	.word	0x0800a7fd
 800a740:	0800a7fd 	.word	0x0800a7fd
 800a744:	0800a7fd 	.word	0x0800a7fd
 800a748:	0800a7d1 	.word	0x0800a7d1
    {
      case TIM_CHANNEL_1:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d008      	beq.n	800a766 <HAL_TIM_ConfigOCrefClear+0xe8>
        {
          /* Enable the OCREF clear feature for Channel 1 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a762:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 1 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
        }
        break;
 800a764:	e04b      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699a      	ldr	r2, [r3, #24]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a774:	619a      	str	r2, [r3, #24]
        break;
 800a776:	e042      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
      }
      case TIM_CHANNEL_2:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d008      	beq.n	800a792 <HAL_TIM_ConfigOCrefClear+0x114>
        {
          /* Enable the OCREF clear feature for Channel 2 */
          SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a78e:	619a      	str	r2, [r3, #24]
        else
        {
          /* Disable the OCREF clear feature for Channel 2 */
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
        }
        break;
 800a790:	e035      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	699a      	ldr	r2, [r3, #24]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7a0:	619a      	str	r2, [r3, #24]
        break;
 800a7a2:	e02c      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
      }
      case TIM_CHANNEL_3:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d008      	beq.n	800a7be <HAL_TIM_ConfigOCrefClear+0x140>
        {
          /* Enable the OCREF clear feature for Channel 3 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	69da      	ldr	r2, [r3, #28]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a7ba:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 3 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
        }
        break;
 800a7bc:	e01f      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a7cc:	61da      	str	r2, [r3, #28]
        break;
 800a7ce:	e016      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
      }
      case TIM_CHANNEL_4:
      {
        if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d008      	beq.n	800a7ea <HAL_TIM_ConfigOCrefClear+0x16c>
        {
          /* Enable the OCREF clear feature for Channel 4 */
          SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	69da      	ldr	r2, [r3, #28]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7e6:	61da      	str	r2, [r3, #28]
        else
        {
          /* Disable the OCREF clear feature for Channel 4 */
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
        }
        break;
 800a7e8:	e009      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
          CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7f8:	61da      	str	r2, [r3, #28]
        break;
 800a7fa:	e000      	b.n	800a7fe <HAL_TIM_ConfigOCrefClear+0x180>
      }
      default:
        break;
 800a7fc:	bf00      	nop
    }
  }

  htim->State = HAL_TIM_STATE_READY;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_TIM_ConfigClockSource+0x1c>
 800a830:	2302      	movs	r3, #2
 800a832:	e0b4      	b.n	800a99e <HAL_TIM_ConfigClockSource+0x186>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a85a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a86c:	d03e      	beq.n	800a8ec <HAL_TIM_ConfigClockSource+0xd4>
 800a86e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a872:	f200 8087 	bhi.w	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a87a:	f000 8086 	beq.w	800a98a <HAL_TIM_ConfigClockSource+0x172>
 800a87e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a882:	d87f      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a884:	2b70      	cmp	r3, #112	@ 0x70
 800a886:	d01a      	beq.n	800a8be <HAL_TIM_ConfigClockSource+0xa6>
 800a888:	2b70      	cmp	r3, #112	@ 0x70
 800a88a:	d87b      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a88c:	2b60      	cmp	r3, #96	@ 0x60
 800a88e:	d050      	beq.n	800a932 <HAL_TIM_ConfigClockSource+0x11a>
 800a890:	2b60      	cmp	r3, #96	@ 0x60
 800a892:	d877      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a894:	2b50      	cmp	r3, #80	@ 0x50
 800a896:	d03c      	beq.n	800a912 <HAL_TIM_ConfigClockSource+0xfa>
 800a898:	2b50      	cmp	r3, #80	@ 0x50
 800a89a:	d873      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a89c:	2b40      	cmp	r3, #64	@ 0x40
 800a89e:	d058      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0x13a>
 800a8a0:	2b40      	cmp	r3, #64	@ 0x40
 800a8a2:	d86f      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a8a4:	2b30      	cmp	r3, #48	@ 0x30
 800a8a6:	d064      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x15a>
 800a8a8:	2b30      	cmp	r3, #48	@ 0x30
 800a8aa:	d86b      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a8ac:	2b20      	cmp	r3, #32
 800a8ae:	d060      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x15a>
 800a8b0:	2b20      	cmp	r3, #32
 800a8b2:	d867      	bhi.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d05c      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x15a>
 800a8b8:	2b10      	cmp	r3, #16
 800a8ba:	d05a      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x15a>
 800a8bc:	e062      	b.n	800a984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8ce:	f001 f88b 	bl	800b9e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	609a      	str	r2, [r3, #8]
      break;
 800a8ea:	e04f      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8fc:	f001 f874 	bl	800b9e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a90e:	609a      	str	r2, [r3, #8]
      break;
 800a910:	e03c      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a91e:	461a      	mov	r2, r3
 800a920:	f000 ff32 	bl	800b788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2150      	movs	r1, #80	@ 0x50
 800a92a:	4618      	mov	r0, r3
 800a92c:	f001 f841 	bl	800b9b2 <TIM_ITRx_SetConfig>
      break;
 800a930:	e02c      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a93e:	461a      	mov	r2, r3
 800a940:	f000 ff8e 	bl	800b860 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2160      	movs	r1, #96	@ 0x60
 800a94a:	4618      	mov	r0, r3
 800a94c:	f001 f831 	bl	800b9b2 <TIM_ITRx_SetConfig>
      break;
 800a950:	e01c      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a95e:	461a      	mov	r2, r3
 800a960:	f000 ff12 	bl	800b788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2140      	movs	r1, #64	@ 0x40
 800a96a:	4618      	mov	r0, r3
 800a96c:	f001 f821 	bl	800b9b2 <TIM_ITRx_SetConfig>
      break;
 800a970:	e00c      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f001 f818 	bl	800b9b2 <TIM_ITRx_SetConfig>
      break;
 800a982:	e003      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	73fb      	strb	r3, [r7, #15]
      break;
 800a988:	e000      	b.n	800a98c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a98a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d101      	bne.n	800a9f6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	e031      	b.n	800aa5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2202      	movs	r2, #2
 800aa02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fdb9 	bl	800b580 <TIM_SlaveTimer_SetConfig>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d009      	beq.n	800aa28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e018      	b.n	800aa5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aa46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d101      	bne.n	800aa7a <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e031      	b.n	800aade <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2202      	movs	r2, #2
 800aa86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fd77 	bl	800b580 <TIM_SlaveTimer_SetConfig>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d009      	beq.n	800aaac <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e018      	b.n	800aade <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68da      	ldr	r2, [r3, #12]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaba:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68da      	ldr	r2, [r3, #12]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aaca:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b0c      	cmp	r3, #12
 800aaf8:	d830      	bhi.n	800ab5c <HAL_TIM_ReadCapturedValue+0x76>
 800aafa:	a201      	add	r2, pc, #4	@ (adr r2, 800ab00 <HAL_TIM_ReadCapturedValue+0x1a>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab35 	.word	0x0800ab35
 800ab04:	0800ab5d 	.word	0x0800ab5d
 800ab08:	0800ab5d 	.word	0x0800ab5d
 800ab0c:	0800ab5d 	.word	0x0800ab5d
 800ab10:	0800ab3f 	.word	0x0800ab3f
 800ab14:	0800ab5d 	.word	0x0800ab5d
 800ab18:	0800ab5d 	.word	0x0800ab5d
 800ab1c:	0800ab5d 	.word	0x0800ab5d
 800ab20:	0800ab49 	.word	0x0800ab49
 800ab24:	0800ab5d 	.word	0x0800ab5d
 800ab28:	0800ab5d 	.word	0x0800ab5d
 800ab2c:	0800ab5d 	.word	0x0800ab5d
 800ab30:	0800ab53 	.word	0x0800ab53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3a:	60fb      	str	r3, [r7, #12]

      break;
 800ab3c:	e00f      	b.n	800ab5e <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab44:	60fb      	str	r3, [r7, #12]

      break;
 800ab46:	e00a      	b.n	800ab5e <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab4e:	60fb      	str	r3, [r7, #12]

      break;
 800ab50:	e005      	b.n	800ab5e <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab58:	60fb      	str	r3, [r7, #12]

      break;
 800ab5a:	e000      	b.n	800ab5e <HAL_TIM_ReadCapturedValue+0x78>
    }

    default:
      break;
 800ab5c:	bf00      	nop
  }

  return tmpreg;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(const TIM_HandleTypeDef *htim)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac42:	b2db      	uxtb	r3, r3
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(const TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac5e:	b2db      	uxtb	r3, r3
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(const TIM_HandleTypeDef *htim)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac7a:	b2db      	uxtb	r3, r3
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(const TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac96:	b2db      	uxtb	r3, r3
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(const TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  return htim->State;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acb2:	b2db      	uxtb	r3, r3
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(const TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  return htim->State;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acce:	b2db      	uxtb	r3, r3
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	7f1b      	ldrb	r3, [r3, #28]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(const TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d104      	bne.n	800ad0e <HAL_TIM_GetChannelState+0x1a>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	e013      	b.n	800ad36 <HAL_TIM_GetChannelState+0x42>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d104      	bne.n	800ad1e <HAL_TIM_GetChannelState+0x2a>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	e00b      	b.n	800ad36 <HAL_TIM_GetChannelState+0x42>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b08      	cmp	r3, #8
 800ad22:	d104      	bne.n	800ad2e <HAL_TIM_GetChannelState+0x3a>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	e003      	b.n	800ad36 <HAL_TIM_GetChannelState+0x42>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 800ad38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <HAL_TIM_DMABurstState>:
  * @brief  Return actual state of a DMA burst operation.
  * @param  htim TIM handle
  * @retval DMA burst state
  */
HAL_TIM_DMABurstStateTypeDef HAL_TIM_DMABurstState(const TIM_HandleTypeDef *htim)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));

  return htim->DMABurstState;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ad54:	b2db      	uxtb	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d107      	bne.n	800ad8a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad88:	e02a      	b.n	800ade0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d107      	bne.n	800ada4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2202      	movs	r2, #2
 800ad98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ada2:	e01d      	b.n	800ade0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d107      	bne.n	800adbe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2204      	movs	r2, #4
 800adb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800adbc:	e010      	b.n	800ade0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d107      	bne.n	800add8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2208      	movs	r2, #8
 800adcc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800add6:	e003      	b.n	800ade0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff ff1d 	bl	800ac20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	771a      	strb	r2, [r3, #28]
}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d10b      	bne.n	800ae24 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d136      	bne.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae22:	e031      	b.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d10b      	bne.n	800ae46 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2202      	movs	r2, #2
 800ae32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d125      	bne.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae44:	e020      	b.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d10b      	bne.n	800ae68 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2204      	movs	r2, #4
 800ae54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d114      	bne.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae66:	e00f      	b.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d10a      	bne.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2208      	movs	r2, #8
 800ae76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d103      	bne.n	800ae88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff fea1 	bl	800abd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	771a      	strb	r2, [r3, #28]
}
 800ae94:	bf00      	nop
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d103      	bne.n	800aebc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	771a      	strb	r2, [r3, #28]
 800aeba:	e019      	b.n	800aef0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d103      	bne.n	800aece <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2202      	movs	r2, #2
 800aeca:	771a      	strb	r2, [r3, #28]
 800aecc:	e010      	b.n	800aef0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d103      	bne.n	800aee0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2204      	movs	r2, #4
 800aedc:	771a      	strb	r2, [r3, #28]
 800aede:	e007      	b.n	800aef0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d102      	bne.n	800aef0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2208      	movs	r2, #8
 800aeee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f7ff fe77 	bl	800abe4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	771a      	strb	r2, [r3, #28]
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d10f      	bne.n	800af3c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d146      	bne.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af3a:	e03d      	b.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	429a      	cmp	r2, r3
 800af44:	d10f      	bne.n	800af66 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2202      	movs	r2, #2
 800af4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d131      	bne.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af64:	e028      	b.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d10f      	bne.n	800af90 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2204      	movs	r2, #4
 800af74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11c      	bne.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af8e:	e013      	b.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	429a      	cmp	r2, r3
 800af98:	d10e      	bne.n	800afb8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2208      	movs	r2, #8
 800af9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d107      	bne.n	800afb8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff fdf5 	bl	800aba8 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	771a      	strb	r2, [r3, #28]
}
 800afc4:	bf00      	nop
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d103      	bne.n	800afec <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2201      	movs	r2, #1
 800afe8:	771a      	strb	r2, [r3, #28]
 800afea:	e019      	b.n	800b020 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d103      	bne.n	800affe <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2202      	movs	r2, #2
 800affa:	771a      	strb	r2, [r3, #28]
 800affc:	e010      	b.n	800b020 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d103      	bne.n	800b010 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2204      	movs	r2, #4
 800b00c:	771a      	strb	r2, [r3, #28]
 800b00e:	e007      	b.n	800b020 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	429a      	cmp	r2, r3
 800b018:	d102      	bne.n	800b020 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2208      	movs	r2, #8
 800b01e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7ff fdcb 	bl	800abbc <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	771a      	strb	r2, [r3, #28]
}
 800b02c:	bf00      	nop
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b040:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	69db      	ldr	r3, [r3, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d103      	bne.n	800b054 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f7f5 fbed 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff fd85 	bl	800ab80 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b08a:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d103      	bne.n	800b09e <TIM_DMATriggerCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff fdaa 	bl	800abf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800b0a4:	bf00      	nop
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f7ff fda6 	bl	800ac0c <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a46      	ldr	r2, [pc, #280]	@ (800b1f4 <TIM_Base_SetConfig+0x12c>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d013      	beq.n	800b108 <TIM_Base_SetConfig+0x40>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0e6:	d00f      	beq.n	800b108 <TIM_Base_SetConfig+0x40>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a43      	ldr	r2, [pc, #268]	@ (800b1f8 <TIM_Base_SetConfig+0x130>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00b      	beq.n	800b108 <TIM_Base_SetConfig+0x40>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a42      	ldr	r2, [pc, #264]	@ (800b1fc <TIM_Base_SetConfig+0x134>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d007      	beq.n	800b108 <TIM_Base_SetConfig+0x40>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a41      	ldr	r2, [pc, #260]	@ (800b200 <TIM_Base_SetConfig+0x138>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d003      	beq.n	800b108 <TIM_Base_SetConfig+0x40>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a40      	ldr	r2, [pc, #256]	@ (800b204 <TIM_Base_SetConfig+0x13c>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d108      	bne.n	800b11a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b10e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a35      	ldr	r2, [pc, #212]	@ (800b1f4 <TIM_Base_SetConfig+0x12c>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d02b      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b128:	d027      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a32      	ldr	r2, [pc, #200]	@ (800b1f8 <TIM_Base_SetConfig+0x130>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d023      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a31      	ldr	r2, [pc, #196]	@ (800b1fc <TIM_Base_SetConfig+0x134>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d01f      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a30      	ldr	r2, [pc, #192]	@ (800b200 <TIM_Base_SetConfig+0x138>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d01b      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a2f      	ldr	r2, [pc, #188]	@ (800b204 <TIM_Base_SetConfig+0x13c>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d017      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a2e      	ldr	r2, [pc, #184]	@ (800b208 <TIM_Base_SetConfig+0x140>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d013      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a2d      	ldr	r2, [pc, #180]	@ (800b20c <TIM_Base_SetConfig+0x144>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d00f      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a2c      	ldr	r2, [pc, #176]	@ (800b210 <TIM_Base_SetConfig+0x148>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d00b      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a2b      	ldr	r2, [pc, #172]	@ (800b214 <TIM_Base_SetConfig+0x14c>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d007      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a2a      	ldr	r2, [pc, #168]	@ (800b218 <TIM_Base_SetConfig+0x150>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d003      	beq.n	800b17a <TIM_Base_SetConfig+0xb2>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a29      	ldr	r2, [pc, #164]	@ (800b21c <TIM_Base_SetConfig+0x154>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d108      	bne.n	800b18c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	689a      	ldr	r2, [r3, #8]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a10      	ldr	r2, [pc, #64]	@ (800b1f4 <TIM_Base_SetConfig+0x12c>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d003      	beq.n	800b1c0 <TIM_Base_SetConfig+0xf8>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a12      	ldr	r2, [pc, #72]	@ (800b204 <TIM_Base_SetConfig+0x13c>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d103      	bne.n	800b1c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	691a      	ldr	r2, [r3, #16]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f003 0301 	and.w	r3, r3, #1
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d105      	bne.n	800b1e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f023 0201 	bic.w	r2, r3, #1
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	611a      	str	r2, [r3, #16]
  }
}
 800b1e6:	bf00      	nop
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	40010000 	.word	0x40010000
 800b1f8:	40000400 	.word	0x40000400
 800b1fc:	40000800 	.word	0x40000800
 800b200:	40000c00 	.word	0x40000c00
 800b204:	40010400 	.word	0x40010400
 800b208:	40014000 	.word	0x40014000
 800b20c:	40014400 	.word	0x40014400
 800b210:	40014800 	.word	0x40014800
 800b214:	40001800 	.word	0x40001800
 800b218:	40001c00 	.word	0x40001c00
 800b21c:	40002000 	.word	0x40002000

0800b220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a1b      	ldr	r3, [r3, #32]
 800b234:	f023 0201 	bic.w	r2, r3, #1
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f023 0302 	bic.w	r3, r3, #2
 800b268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a20      	ldr	r2, [pc, #128]	@ (800b2f8 <TIM_OC1_SetConfig+0xd8>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d003      	beq.n	800b284 <TIM_OC1_SetConfig+0x64>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a1f      	ldr	r2, [pc, #124]	@ (800b2fc <TIM_OC1_SetConfig+0xdc>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d10c      	bne.n	800b29e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f023 0308 	bic.w	r3, r3, #8
 800b28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	4313      	orrs	r3, r2
 800b294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f023 0304 	bic.w	r3, r3, #4
 800b29c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a15      	ldr	r2, [pc, #84]	@ (800b2f8 <TIM_OC1_SetConfig+0xd8>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d003      	beq.n	800b2ae <TIM_OC1_SetConfig+0x8e>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a14      	ldr	r2, [pc, #80]	@ (800b2fc <TIM_OC1_SetConfig+0xdc>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d111      	bne.n	800b2d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b2bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	621a      	str	r2, [r3, #32]
}
 800b2ec:	bf00      	nop
 800b2ee:	371c      	adds	r7, #28
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	40010000 	.word	0x40010000
 800b2fc:	40010400 	.word	0x40010400

0800b300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	f023 0210 	bic.w	r2, r3, #16
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	021b      	lsls	r3, r3, #8
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f023 0320 	bic.w	r3, r3, #32
 800b34a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	011b      	lsls	r3, r3, #4
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	4313      	orrs	r3, r2
 800b356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a22      	ldr	r2, [pc, #136]	@ (800b3e4 <TIM_OC2_SetConfig+0xe4>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d003      	beq.n	800b368 <TIM_OC2_SetConfig+0x68>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a21      	ldr	r2, [pc, #132]	@ (800b3e8 <TIM_OC2_SetConfig+0xe8>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d10d      	bne.n	800b384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b36e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	011b      	lsls	r3, r3, #4
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4313      	orrs	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b382:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a17      	ldr	r2, [pc, #92]	@ (800b3e4 <TIM_OC2_SetConfig+0xe4>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d003      	beq.n	800b394 <TIM_OC2_SetConfig+0x94>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a16      	ldr	r2, [pc, #88]	@ (800b3e8 <TIM_OC2_SetConfig+0xe8>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d113      	bne.n	800b3bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b39a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b3a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	695b      	ldr	r3, [r3, #20]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	621a      	str	r2, [r3, #32]
}
 800b3d6:	bf00      	nop
 800b3d8:	371c      	adds	r7, #28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40010400 	.word	0x40010400

0800b3ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	69db      	ldr	r3, [r3, #28]
 800b412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	021b      	lsls	r3, r3, #8
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	4313      	orrs	r3, r2
 800b440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a21      	ldr	r2, [pc, #132]	@ (800b4cc <TIM_OC3_SetConfig+0xe0>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d003      	beq.n	800b452 <TIM_OC3_SetConfig+0x66>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a20      	ldr	r2, [pc, #128]	@ (800b4d0 <TIM_OC3_SetConfig+0xe4>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d10d      	bne.n	800b46e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	021b      	lsls	r3, r3, #8
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	4313      	orrs	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b46c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a16      	ldr	r2, [pc, #88]	@ (800b4cc <TIM_OC3_SetConfig+0xe0>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d003      	beq.n	800b47e <TIM_OC3_SetConfig+0x92>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a15      	ldr	r2, [pc, #84]	@ (800b4d0 <TIM_OC3_SetConfig+0xe4>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d113      	bne.n	800b4a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b48c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	011b      	lsls	r3, r3, #4
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	621a      	str	r2, [r3, #32]
}
 800b4c0:	bf00      	nop
 800b4c2:	371c      	adds	r7, #28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	40010000 	.word	0x40010000
 800b4d0:	40010400 	.word	0x40010400

0800b4d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4313      	orrs	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b51e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	031b      	lsls	r3, r3, #12
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4313      	orrs	r3, r2
 800b52a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a12      	ldr	r2, [pc, #72]	@ (800b578 <TIM_OC4_SetConfig+0xa4>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d003      	beq.n	800b53c <TIM_OC4_SetConfig+0x68>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a11      	ldr	r2, [pc, #68]	@ (800b57c <TIM_OC4_SetConfig+0xa8>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d109      	bne.n	800b550 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	019b      	lsls	r3, r3, #6
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	621a      	str	r2, [r3, #32]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	40010000 	.word	0x40010000
 800b57c:	40010400 	.word	0x40010400

0800b580 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b59c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f023 0307 	bic.w	r3, r3, #7
 800b5ae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2b70      	cmp	r3, #112	@ 0x70
 800b5c8:	d01a      	beq.n	800b600 <TIM_SlaveTimer_SetConfig+0x80>
 800b5ca:	2b70      	cmp	r3, #112	@ 0x70
 800b5cc:	d860      	bhi.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
 800b5ce:	2b60      	cmp	r3, #96	@ 0x60
 800b5d0:	d054      	beq.n	800b67c <TIM_SlaveTimer_SetConfig+0xfc>
 800b5d2:	2b60      	cmp	r3, #96	@ 0x60
 800b5d4:	d85c      	bhi.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
 800b5d6:	2b50      	cmp	r3, #80	@ 0x50
 800b5d8:	d046      	beq.n	800b668 <TIM_SlaveTimer_SetConfig+0xe8>
 800b5da:	2b50      	cmp	r3, #80	@ 0x50
 800b5dc:	d858      	bhi.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
 800b5de:	2b40      	cmp	r3, #64	@ 0x40
 800b5e0:	d019      	beq.n	800b616 <TIM_SlaveTimer_SetConfig+0x96>
 800b5e2:	2b40      	cmp	r3, #64	@ 0x40
 800b5e4:	d854      	bhi.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
 800b5e6:	2b30      	cmp	r3, #48	@ 0x30
 800b5e8:	d055      	beq.n	800b696 <TIM_SlaveTimer_SetConfig+0x116>
 800b5ea:	2b30      	cmp	r3, #48	@ 0x30
 800b5ec:	d850      	bhi.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
 800b5ee:	2b20      	cmp	r3, #32
 800b5f0:	d051      	beq.n	800b696 <TIM_SlaveTimer_SetConfig+0x116>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d84c      	bhi.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d04d      	beq.n	800b696 <TIM_SlaveTimer_SetConfig+0x116>
 800b5fa:	2b10      	cmp	r3, #16
 800b5fc:	d04b      	beq.n	800b696 <TIM_SlaveTimer_SetConfig+0x116>
 800b5fe:	e047      	b.n	800b690 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800b610:	f000 f9ea 	bl	800b9e8 <TIM_ETR_SetConfig>
      break;
 800b614:	e040      	b.n	800b698 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b05      	cmp	r3, #5
 800b61c:	d101      	bne.n	800b622 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e03b      	b.n	800b69a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6a1b      	ldr	r3, [r3, #32]
 800b628:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6a1a      	ldr	r2, [r3, #32]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b648:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	4313      	orrs	r3, r2
 800b654:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	621a      	str	r2, [r3, #32]
      break;
 800b666:	e017      	b.n	800b698 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b674:	461a      	mov	r2, r3
 800b676:	f000 f887 	bl	800b788 <TIM_TI1_ConfigInputStage>
      break;
 800b67a:	e00d      	b.n	800b698 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b688:	461a      	mov	r2, r3
 800b68a:	f000 f8e9 	bl	800b860 <TIM_TI2_ConfigInputStage>
      break;
 800b68e:	e003      	b.n	800b698 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	75fb      	strb	r3, [r7, #23]
      break;
 800b694:	e000      	b.n	800b698 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800b696:	bf00      	nop
  }

  return status;
 800b698:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b087      	sub	sp, #28
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	f023 0201 	bic.w	r2, r3, #1
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	699b      	ldr	r3, [r3, #24]
 800b6c6:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4a28      	ldr	r2, [pc, #160]	@ (800b76c <TIM_TI1_SetConfig+0xca>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d01b      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d6:	d017      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	4a25      	ldr	r2, [pc, #148]	@ (800b770 <TIM_TI1_SetConfig+0xce>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d013      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4a24      	ldr	r2, [pc, #144]	@ (800b774 <TIM_TI1_SetConfig+0xd2>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d00f      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4a23      	ldr	r2, [pc, #140]	@ (800b778 <TIM_TI1_SetConfig+0xd6>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d00b      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4a22      	ldr	r2, [pc, #136]	@ (800b77c <TIM_TI1_SetConfig+0xda>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d007      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4a21      	ldr	r2, [pc, #132]	@ (800b780 <TIM_TI1_SetConfig+0xde>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d003      	beq.n	800b708 <TIM_TI1_SetConfig+0x66>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4a20      	ldr	r2, [pc, #128]	@ (800b784 <TIM_TI1_SetConfig+0xe2>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d101      	bne.n	800b70c <TIM_TI1_SetConfig+0x6a>
 800b708:	2301      	movs	r3, #1
 800b70a:	e000      	b.n	800b70e <TIM_TI1_SetConfig+0x6c>
 800b70c:	2300      	movs	r3, #0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d008      	beq.n	800b724 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f023 0303 	bic.w	r3, r3, #3
 800b718:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4313      	orrs	r3, r2
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	e003      	b.n	800b72c <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f043 0301 	orr.w	r3, r3, #1
 800b72a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	011b      	lsls	r3, r3, #4
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f023 030a 	bic.w	r3, r3, #10
 800b746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f003 030a 	and.w	r3, r3, #10
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	621a      	str	r2, [r3, #32]
}
 800b760:	bf00      	nop
 800b762:	371c      	adds	r7, #28
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	40010000 	.word	0x40010000
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40010400 	.word	0x40010400
 800b780:	40014000 	.word	0x40014000
 800b784:	40001800 	.word	0x40001800

0800b788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a1b      	ldr	r3, [r3, #32]
 800b798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	f023 0201 	bic.w	r2, r3, #1
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	011b      	lsls	r3, r3, #4
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f023 030a 	bic.w	r3, r3, #10
 800b7c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	621a      	str	r2, [r3, #32]
}
 800b7da:	bf00      	nop
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b087      	sub	sp, #28
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	607a      	str	r2, [r7, #4]
 800b7f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	f023 0210 	bic.w	r2, r3, #16
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	021b      	lsls	r3, r3, #8
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	031b      	lsls	r3, r3, #12
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	4313      	orrs	r3, r2
 800b830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b838:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	4313      	orrs	r3, r2
 800b846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	621a      	str	r2, [r3, #32]
}
 800b854:	bf00      	nop
 800b856:	371c      	adds	r7, #28
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	f023 0210 	bic.w	r2, r3, #16
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b88a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	031b      	lsls	r3, r3, #12
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	4313      	orrs	r3, r2
 800b894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b89c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	621a      	str	r2, [r3, #32]
}
 800b8b4:	bf00      	nop
 800b8b6:	371c      	adds	r7, #28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f023 0303 	bic.w	r3, r3, #3
 800b8ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b8fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	b2db      	uxtb	r3, r3
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4313      	orrs	r3, r2
 800b908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b910:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	021b      	lsls	r3, r3, #8
 800b916:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	621a      	str	r2, [r3, #32]
}
 800b92c:	bf00      	nop
 800b92e:	371c      	adds	r7, #28
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	69db      	ldr	r3, [r3, #28]
 800b95c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b964:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	021b      	lsls	r3, r3, #8
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b976:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	031b      	lsls	r3, r3, #12
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	4313      	orrs	r3, r2
 800b982:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b98a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	031b      	lsls	r3, r3, #12
 800b990:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	4313      	orrs	r3, r2
 800b998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	621a      	str	r2, [r3, #32]
}
 800b9a6:	bf00      	nop
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b085      	sub	sp, #20
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	f043 0307 	orr.w	r3, r3, #7
 800b9d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	609a      	str	r2, [r3, #8]
}
 800b9dc:	bf00      	nop
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	021a      	lsls	r2, r3, #8
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	609a      	str	r2, [r3, #8]
}
 800ba1c:	bf00      	nop
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	f003 031f 	and.w	r3, r3, #31
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a1a      	ldr	r2, [r3, #32]
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	43db      	mvns	r3, r3
 800ba4a:	401a      	ands	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6a1a      	ldr	r2, [r3, #32]
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f003 031f 	and.w	r3, r3, #31
 800ba5a:	6879      	ldr	r1, [r7, #4]
 800ba5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba60:	431a      	orrs	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	621a      	str	r2, [r3, #32]
}
 800ba66:	bf00      	nop
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop

0800ba74 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08a      	sub	sp, #40	@ 0x28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e09a      	b.n	800bbbe <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d106      	bne.n	800baa2 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f8d6 	bl	800bc4e <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2202      	movs	r2, #2
 800baa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681a      	ldr	r2, [r3, #0]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4619      	mov	r1, r3
 800bab4:	4610      	mov	r0, r2
 800bab6:	f7ff fb07 	bl	800b0c8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	6819      	ldr	r1, [r3, #0]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	689b      	ldr	r3, [r3, #8]
 800bac6:	2203      	movs	r2, #3
 800bac8:	f7ff fdeb 	bl	800b6a2 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	699a      	ldr	r2, [r3, #24]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f022 020c 	bic.w	r2, r2, #12
 800bada:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6999      	ldr	r1, [r3, #24]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bafc:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bb0c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb1c:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0207 	bic.w	r2, r2, #7
 800bb2c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f042 0204 	orr.w	r2, r2, #4
 800bb3c:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800bb42:	2300      	movs	r3, #0
 800bb44:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800bb46:	2370      	movs	r3, #112	@ 0x70
 800bb48:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bb52:	2300      	movs	r3, #0
 800bb54:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f107 020c 	add.w	r2, r7, #12
 800bb64:	4611      	mov	r1, r2
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff fbca 	bl	800b300 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800bb7a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800bb8a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3728      	adds	r7, #40	@ 0x28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b082      	sub	sp, #8
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6a1a      	ldr	r2, [r3, #32]
 800bbdc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10f      	bne.n	800bc06 <HAL_TIMEx_HallSensor_DeInit+0x40>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	6a1a      	ldr	r2, [r3, #32]
 800bbec:	f240 4344 	movw	r3, #1092	@ 0x444
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d107      	bne.n	800bc06 <HAL_TIMEx_HallSensor_DeInit+0x40>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f022 0201 	bic.w	r2, r2, #1
 800bc04:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f82b 	bl	800bc62 <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bc8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bc9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d108      	bne.n	800bcb6 <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d105      	bne.n	800bcb6 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcaa:	7b7b      	ldrb	r3, [r7, #13]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d102      	bne.n	800bcb6 <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcb0:	7b3b      	ldrb	r3, [r7, #12]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d001      	beq.n	800bcba <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e059      	b.n	800bd6e <HAL_TIMEx_HallSensor_Start+0xf8>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2202      	movs	r2, #2
 800bcce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2201      	movs	r2, #1
 800bce0:	2100      	movs	r1, #0
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7ff fea0 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a22      	ldr	r2, [pc, #136]	@ (800bd78 <HAL_TIMEx_HallSensor_Start+0x102>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d022      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcfa:	d01d      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1e      	ldr	r2, [pc, #120]	@ (800bd7c <HAL_TIMEx_HallSensor_Start+0x106>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d018      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a1d      	ldr	r2, [pc, #116]	@ (800bd80 <HAL_TIMEx_HallSensor_Start+0x10a>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d013      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a1b      	ldr	r2, [pc, #108]	@ (800bd84 <HAL_TIMEx_HallSensor_Start+0x10e>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d00e      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a1a      	ldr	r2, [pc, #104]	@ (800bd88 <HAL_TIMEx_HallSensor_Start+0x112>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d009      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a18      	ldr	r2, [pc, #96]	@ (800bd8c <HAL_TIMEx_HallSensor_Start+0x116>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d004      	beq.n	800bd38 <HAL_TIMEx_HallSensor_Start+0xc2>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a17      	ldr	r2, [pc, #92]	@ (800bd90 <HAL_TIMEx_HallSensor_Start+0x11a>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d111      	bne.n	800bd5c <HAL_TIMEx_HallSensor_Start+0xe6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f003 0307 	and.w	r3, r3, #7
 800bd42:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b06      	cmp	r3, #6
 800bd48:	d010      	beq.n	800bd6c <HAL_TIMEx_HallSensor_Start+0xf6>
    {
      __HAL_TIM_ENABLE(htim);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f042 0201 	orr.w	r2, r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd5a:	e007      	b.n	800bd6c <HAL_TIMEx_HallSensor_Start+0xf6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f042 0201 	orr.w	r2, r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	40010000 	.word	0x40010000
 800bd7c:	40000400 	.word	0x40000400
 800bd80:	40000800 	.word	0x40000800
 800bd84:	40000c00 	.word	0x40000c00
 800bd88:	40010400 	.word	0x40010400
 800bd8c:	40014000 	.word	0x40014000
 800bd90:	40001800 	.word	0x40001800

0800bd94 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2200      	movs	r2, #0
 800bda2:	2100      	movs	r1, #0
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7ff fe3f 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6a1a      	ldr	r2, [r3, #32]
 800bdb0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10f      	bne.n	800bdda <HAL_TIMEx_HallSensor_Stop+0x46>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	6a1a      	ldr	r2, [r3, #32]
 800bdc0:	f240 4344 	movw	r3, #1092	@ 0x444
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d107      	bne.n	800bdda <HAL_TIMEx_HallSensor_Stop+0x46>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 0201 	bic.w	r2, r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be12:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800be1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be22:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800be2a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d108      	bne.n	800be44 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be32:	7bbb      	ldrb	r3, [r7, #14]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d105      	bne.n	800be44 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be38:	7b7b      	ldrb	r3, [r7, #13]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d102      	bne.n	800be44 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be3e:	7b3b      	ldrb	r3, [r7, #12]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d001      	beq.n	800be48 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e061      	b.n	800bf0c <HAL_TIMEx_HallSensor_Start_IT+0x108>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2202      	movs	r2, #2
 800be4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2202      	movs	r2, #2
 800be5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2202      	movs	r2, #2
 800be64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f042 0202 	orr.w	r2, r2, #2
 800be76:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2201      	movs	r2, #1
 800be7e:	2100      	movs	r1, #0
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff fdd1 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a22      	ldr	r2, [pc, #136]	@ (800bf14 <HAL_TIMEx_HallSensor_Start_IT+0x110>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d022      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be98:	d01d      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a1e      	ldr	r2, [pc, #120]	@ (800bf18 <HAL_TIMEx_HallSensor_Start_IT+0x114>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d018      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a1c      	ldr	r2, [pc, #112]	@ (800bf1c <HAL_TIMEx_HallSensor_Start_IT+0x118>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d013      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a1b      	ldr	r2, [pc, #108]	@ (800bf20 <HAL_TIMEx_HallSensor_Start_IT+0x11c>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00e      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a19      	ldr	r2, [pc, #100]	@ (800bf24 <HAL_TIMEx_HallSensor_Start_IT+0x120>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d009      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a18      	ldr	r2, [pc, #96]	@ (800bf28 <HAL_TIMEx_HallSensor_Start_IT+0x124>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d004      	beq.n	800bed6 <HAL_TIMEx_HallSensor_Start_IT+0xd2>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a16      	ldr	r2, [pc, #88]	@ (800bf2c <HAL_TIMEx_HallSensor_Start_IT+0x128>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d111      	bne.n	800befa <HAL_TIMEx_HallSensor_Start_IT+0xf6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f003 0307 	and.w	r3, r3, #7
 800bee0:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b06      	cmp	r3, #6
 800bee6:	d010      	beq.n	800bf0a <HAL_TIMEx_HallSensor_Start_IT+0x106>
    {
      __HAL_TIM_ENABLE(htim);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0201 	orr.w	r2, r2, #1
 800bef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bef8:	e007      	b.n	800bf0a <HAL_TIMEx_HallSensor_Start_IT+0x106>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f042 0201 	orr.w	r2, r2, #1
 800bf08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	40010000 	.word	0x40010000
 800bf18:	40000400 	.word	0x40000400
 800bf1c:	40000800 	.word	0x40000800
 800bf20:	40000c00 	.word	0x40000c00
 800bf24:	40010400 	.word	0x40010400
 800bf28:	40014000 	.word	0x40014000
 800bf2c:	40001800 	.word	0x40001800

0800bf30 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2100      	movs	r1, #0
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff fd71 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68da      	ldr	r2, [r3, #12]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f022 0202 	bic.w	r2, r2, #2
 800bf54:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6a1a      	ldr	r2, [r3, #32]
 800bf5c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800bf60:	4013      	ands	r3, r2
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10f      	bne.n	800bf86 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6a1a      	ldr	r2, [r3, #32]
 800bf6c:	f240 4344 	movw	r3, #1092	@ 0x444
 800bf70:	4013      	ands	r3, r2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d107      	bne.n	800bf86 <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f022 0201 	bic.w	r2, r2, #1
 800bf84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bfc4:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfcc:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d002      	beq.n	800bfda <HAL_TIMEx_HallSensor_Start_DMA+0x2a>
      || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800bfd4:	7dbb      	ldrb	r3, [r7, #22]
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d101      	bne.n	800bfde <HAL_TIMEx_HallSensor_Start_DMA+0x2e>
  {
    return HAL_BUSY;
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e086      	b.n	800c0ec <HAL_TIMEx_HallSensor_Start_DMA+0x13c>
  }
  else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d134      	bne.n	800c04e <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
           && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 800bfe4:	7dbb      	ldrb	r3, [r7, #22]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d131      	bne.n	800c04e <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
  {
    if ((pData == NULL) || (Length == 0U))
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <HAL_TIMEx_HallSensor_Start_DMA+0x46>
 800bff0:	88fb      	ldrh	r3, [r7, #6]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <HAL_TIMEx_HallSensor_Start_DMA+0x4a>
    {
      return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e078      	b.n	800c0ec <HAL_TIMEx_HallSensor_Start_DMA+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2202      	movs	r2, #2
 800bffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2202      	movs	r2, #2
 800c006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 800c00a:	bf00      	nop
  }

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2201      	movs	r2, #1
 800c012:	2100      	movs	r1, #0
 800c014:	4618      	mov	r0, r3
 800c016:	f7ff fd07 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c01e:	4a35      	ldr	r2, [pc, #212]	@ (800c0f4 <HAL_TIMEx_HallSensor_Start_DMA+0x144>)
 800c020:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c026:	4a34      	ldr	r2, [pc, #208]	@ (800c0f8 <HAL_TIMEx_HallSensor_Start_DMA+0x148>)
 800c028:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c02e:	4a33      	ldr	r2, [pc, #204]	@ (800c0fc <HAL_TIMEx_HallSensor_Start_DMA+0x14c>)
 800c030:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the DMA stream for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3334      	adds	r3, #52	@ 0x34
 800c03c:	4619      	mov	r1, r3
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	88fb      	ldrh	r3, [r7, #6]
 800c042:	f7f6 fada 	bl	80025fa <HAL_DMA_Start_IT>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d004      	beq.n	800c056 <HAL_TIMEx_HallSensor_Start_DMA+0xa6>
 800c04c:	e001      	b.n	800c052 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>
    return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e04c      	b.n	800c0ec <HAL_TIMEx_HallSensor_Start_DMA+0x13c>
  {
    /* Return error status */
    return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e04a      	b.n	800c0ec <HAL_TIMEx_HallSensor_Start_DMA+0x13c>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68da      	ldr	r2, [r3, #12]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c064:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a25      	ldr	r2, [pc, #148]	@ (800c100 <HAL_TIMEx_HallSensor_Start_DMA+0x150>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d022      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c078:	d01d      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a21      	ldr	r2, [pc, #132]	@ (800c104 <HAL_TIMEx_HallSensor_Start_DMA+0x154>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d018      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a1f      	ldr	r2, [pc, #124]	@ (800c108 <HAL_TIMEx_HallSensor_Start_DMA+0x158>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d013      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a1e      	ldr	r2, [pc, #120]	@ (800c10c <HAL_TIMEx_HallSensor_Start_DMA+0x15c>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d00e      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a1c      	ldr	r2, [pc, #112]	@ (800c110 <HAL_TIMEx_HallSensor_Start_DMA+0x160>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d009      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a1b      	ldr	r2, [pc, #108]	@ (800c114 <HAL_TIMEx_HallSensor_Start_DMA+0x164>)
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d004      	beq.n	800c0b6 <HAL_TIMEx_HallSensor_Start_DMA+0x106>
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4a19      	ldr	r2, [pc, #100]	@ (800c118 <HAL_TIMEx_HallSensor_Start_DMA+0x168>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d111      	bne.n	800c0da <HAL_TIMEx_HallSensor_Start_DMA+0x12a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f003 0307 	and.w	r3, r3, #7
 800c0c0:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2b06      	cmp	r3, #6
 800c0c6:	d010      	beq.n	800c0ea <HAL_TIMEx_HallSensor_Start_DMA+0x13a>
    {
      __HAL_TIM_ENABLE(htim);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f042 0201 	orr.w	r2, r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0d8:	e007      	b.n	800c0ea <HAL_TIMEx_HallSensor_Start_DMA+0x13a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f042 0201 	orr.w	r2, r2, #1
 800c0e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	0800af05 	.word	0x0800af05
 800c0f8:	0800afcd 	.word	0x0800afcd
 800c0fc:	0800ad63 	.word	0x0800ad63
 800c100:	40010000 	.word	0x40010000
 800c104:	40000400 	.word	0x40000400
 800c108:	40000800 	.word	0x40000800
 800c10c:	40000c00 	.word	0x40000c00
 800c110:	40010400 	.word	0x40010400
 800c114:	40014000 	.word	0x40014000
 800c118:	40001800 	.word	0x40001800

0800c11c <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2200      	movs	r2, #0
 800c12a:	2100      	movs	r1, #0
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7ff fc7b 	bl	800ba28 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c140:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c146:	4618      	mov	r0, r3
 800c148:	f7f6 fb1f 	bl	800278a <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6a1a      	ldr	r2, [r3, #32]
 800c152:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c156:	4013      	ands	r3, r2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10f      	bne.n	800c17c <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6a1a      	ldr	r2, [r3, #32]
 800c162:	f240 4344 	movw	r3, #1092	@ 0x444
 800c166:	4013      	ands	r3, r2
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d107      	bne.n	800c17c <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0201 	bic.w	r2, r2, #1
 800c17a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Return function status */
  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <HAL_TIMEx_OCN_Start+0x24>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	bf14      	ite	ne
 800c1b2:	2301      	movne	r3, #1
 800c1b4:	2300      	moveq	r3, #0
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	e022      	b.n	800c200 <HAL_TIMEx_OCN_Start+0x6a>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b04      	cmp	r3, #4
 800c1be:	d109      	bne.n	800c1d4 <HAL_TIMEx_OCN_Start+0x3e>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	bf14      	ite	ne
 800c1cc:	2301      	movne	r3, #1
 800c1ce:	2300      	moveq	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	e015      	b.n	800c200 <HAL_TIMEx_OCN_Start+0x6a>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b08      	cmp	r3, #8
 800c1d8:	d109      	bne.n	800c1ee <HAL_TIMEx_OCN_Start+0x58>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	bf14      	ite	ne
 800c1e6:	2301      	movne	r3, #1
 800c1e8:	2300      	moveq	r3, #0
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	e008      	b.n	800c200 <HAL_TIMEx_OCN_Start+0x6a>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	bf14      	ite	ne
 800c1fa:	2301      	movne	r3, #1
 800c1fc:	2300      	moveq	r3, #0
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d001      	beq.n	800c208 <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	e06d      	b.n	800c2e4 <HAL_TIMEx_OCN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <HAL_TIMEx_OCN_Start+0x82>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2202      	movs	r2, #2
 800c212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c216:	e013      	b.n	800c240 <HAL_TIMEx_OCN_Start+0xaa>
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	d104      	bne.n	800c228 <HAL_TIMEx_OCN_Start+0x92>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2202      	movs	r2, #2
 800c222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c226:	e00b      	b.n	800c240 <HAL_TIMEx_OCN_Start+0xaa>
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b08      	cmp	r3, #8
 800c22c:	d104      	bne.n	800c238 <HAL_TIMEx_OCN_Start+0xa2>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c236:	e003      	b.n	800c240 <HAL_TIMEx_OCN_Start+0xaa>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2204      	movs	r2, #4
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	4618      	mov	r0, r3
 800c24a:	f001 fdc1 	bl	800ddd0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c25c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a22      	ldr	r2, [pc, #136]	@ (800c2ec <HAL_TIMEx_OCN_Start+0x156>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d022      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c270:	d01d      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a1e      	ldr	r2, [pc, #120]	@ (800c2f0 <HAL_TIMEx_OCN_Start+0x15a>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d018      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a1c      	ldr	r2, [pc, #112]	@ (800c2f4 <HAL_TIMEx_OCN_Start+0x15e>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d013      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a1b      	ldr	r2, [pc, #108]	@ (800c2f8 <HAL_TIMEx_OCN_Start+0x162>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d00e      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a19      	ldr	r2, [pc, #100]	@ (800c2fc <HAL_TIMEx_OCN_Start+0x166>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d009      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a18      	ldr	r2, [pc, #96]	@ (800c300 <HAL_TIMEx_OCN_Start+0x16a>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d004      	beq.n	800c2ae <HAL_TIMEx_OCN_Start+0x118>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a16      	ldr	r2, [pc, #88]	@ (800c304 <HAL_TIMEx_OCN_Start+0x16e>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d111      	bne.n	800c2d2 <HAL_TIMEx_OCN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f003 0307 	and.w	r3, r3, #7
 800c2b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2b06      	cmp	r3, #6
 800c2be:	d010      	beq.n	800c2e2 <HAL_TIMEx_OCN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f042 0201 	orr.w	r2, r2, #1
 800c2ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2d0:	e007      	b.n	800c2e2 <HAL_TIMEx_OCN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f042 0201 	orr.w	r2, r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	40010000 	.word	0x40010000
 800c2f0:	40000400 	.word	0x40000400
 800c2f4:	40000800 	.word	0x40000800
 800c2f8:	40000c00 	.word	0x40000c00
 800c2fc:	40010400 	.word	0x40010400
 800c300:	40014000 	.word	0x40014000
 800c304:	40001800 	.word	0x40001800

0800c308 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2200      	movs	r2, #0
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f001 fd58 	bl	800ddd0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6a1a      	ldr	r2, [r3, #32]
 800c326:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10f      	bne.n	800c350 <HAL_TIMEx_OCN_Stop+0x48>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6a1a      	ldr	r2, [r3, #32]
 800c336:	f240 4344 	movw	r3, #1092	@ 0x444
 800c33a:	4013      	ands	r3, r2
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d107      	bne.n	800c350 <HAL_TIMEx_OCN_Stop+0x48>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c34e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6a1a      	ldr	r2, [r3, #32]
 800c356:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c35a:	4013      	ands	r3, r2
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d10f      	bne.n	800c380 <HAL_TIMEx_OCN_Stop+0x78>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6a1a      	ldr	r2, [r3, #32]
 800c366:	f240 4344 	movw	r3, #1092	@ 0x444
 800c36a:	4013      	ands	r3, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d107      	bne.n	800c380 <HAL_TIMEx_OCN_Stop+0x78>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f022 0201 	bic.w	r2, r2, #1
 800c37e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d104      	bne.n	800c390 <HAL_TIMEx_OCN_Stop+0x88>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c38e:	e013      	b.n	800c3b8 <HAL_TIMEx_OCN_Stop+0xb0>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b04      	cmp	r3, #4
 800c394:	d104      	bne.n	800c3a0 <HAL_TIMEx_OCN_Stop+0x98>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c39e:	e00b      	b.n	800c3b8 <HAL_TIMEx_OCN_Stop+0xb0>
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b08      	cmp	r3, #8
 800c3a4:	d104      	bne.n	800c3b0 <HAL_TIMEx_OCN_Stop+0xa8>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3ae:	e003      	b.n	800c3b8 <HAL_TIMEx_OCN_Stop+0xb0>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d109      	bne.n	800c3ea <HAL_TIMEx_OCN_Start_IT+0x28>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	bf14      	ite	ne
 800c3e2:	2301      	movne	r3, #1
 800c3e4:	2300      	moveq	r3, #0
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	e022      	b.n	800c430 <HAL_TIMEx_OCN_Start_IT+0x6e>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	d109      	bne.n	800c404 <HAL_TIMEx_OCN_Start_IT+0x42>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	bf14      	ite	ne
 800c3fc:	2301      	movne	r3, #1
 800c3fe:	2300      	moveq	r3, #0
 800c400:	b2db      	uxtb	r3, r3
 800c402:	e015      	b.n	800c430 <HAL_TIMEx_OCN_Start_IT+0x6e>
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b08      	cmp	r3, #8
 800c408:	d109      	bne.n	800c41e <HAL_TIMEx_OCN_Start_IT+0x5c>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b01      	cmp	r3, #1
 800c414:	bf14      	ite	ne
 800c416:	2301      	movne	r3, #1
 800c418:	2300      	moveq	r3, #0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	e008      	b.n	800c430 <HAL_TIMEx_OCN_Start_IT+0x6e>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b01      	cmp	r3, #1
 800c428:	bf14      	ite	ne
 800c42a:	2301      	movne	r3, #1
 800c42c:	2300      	moveq	r3, #0
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <HAL_TIMEx_OCN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e0a3      	b.n	800c580 <HAL_TIMEx_OCN_Start_IT+0x1be>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d104      	bne.n	800c448 <HAL_TIMEx_OCN_Start_IT+0x86>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2202      	movs	r2, #2
 800c442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c446:	e013      	b.n	800c470 <HAL_TIMEx_OCN_Start_IT+0xae>
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	d104      	bne.n	800c458 <HAL_TIMEx_OCN_Start_IT+0x96>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2202      	movs	r2, #2
 800c452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c456:	e00b      	b.n	800c470 <HAL_TIMEx_OCN_Start_IT+0xae>
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	d104      	bne.n	800c468 <HAL_TIMEx_OCN_Start_IT+0xa6>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2202      	movs	r2, #2
 800c462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c466:	e003      	b.n	800c470 <HAL_TIMEx_OCN_Start_IT+0xae>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b08      	cmp	r3, #8
 800c474:	d01b      	beq.n	800c4ae <HAL_TIMEx_OCN_Start_IT+0xec>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b08      	cmp	r3, #8
 800c47a:	d821      	bhi.n	800c4c0 <HAL_TIMEx_OCN_Start_IT+0xfe>
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <HAL_TIMEx_OCN_Start_IT+0xc8>
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b04      	cmp	r3, #4
 800c486:	d009      	beq.n	800c49c <HAL_TIMEx_OCN_Start_IT+0xda>
 800c488:	e01a      	b.n	800c4c0 <HAL_TIMEx_OCN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68da      	ldr	r2, [r3, #12]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 0202 	orr.w	r2, r2, #2
 800c498:	60da      	str	r2, [r3, #12]
      break;
 800c49a:	e014      	b.n	800c4c6 <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68da      	ldr	r2, [r3, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f042 0204 	orr.w	r2, r2, #4
 800c4aa:	60da      	str	r2, [r3, #12]
      break;
 800c4ac:	e00b      	b.n	800c4c6 <HAL_TIMEx_OCN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Output Compare interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f042 0208 	orr.w	r2, r2, #8
 800c4bc:	60da      	str	r2, [r3, #12]
      break;
 800c4be:	e002      	b.n	800c4c6 <HAL_TIMEx_OCN_Start_IT+0x104>
    }


    default:
      status = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c4:	bf00      	nop
  }

  if (status == HAL_OK)
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d158      	bne.n	800c57e <HAL_TIMEx_OCN_Start_IT+0x1bc>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68da      	ldr	r2, [r3, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c4da:	60da      	str	r2, [r3, #12]

    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2204      	movs	r2, #4
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f001 fc73 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c4f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a22      	ldr	r2, [pc, #136]	@ (800c588 <HAL_TIMEx_OCN_Start_IT+0x1c6>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d022      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c50c:	d01d      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a1e      	ldr	r2, [pc, #120]	@ (800c58c <HAL_TIMEx_OCN_Start_IT+0x1ca>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d018      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a1c      	ldr	r2, [pc, #112]	@ (800c590 <HAL_TIMEx_OCN_Start_IT+0x1ce>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d013      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a1b      	ldr	r2, [pc, #108]	@ (800c594 <HAL_TIMEx_OCN_Start_IT+0x1d2>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00e      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a19      	ldr	r2, [pc, #100]	@ (800c598 <HAL_TIMEx_OCN_Start_IT+0x1d6>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d009      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a18      	ldr	r2, [pc, #96]	@ (800c59c <HAL_TIMEx_OCN_Start_IT+0x1da>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d004      	beq.n	800c54a <HAL_TIMEx_OCN_Start_IT+0x188>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a16      	ldr	r2, [pc, #88]	@ (800c5a0 <HAL_TIMEx_OCN_Start_IT+0x1de>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d111      	bne.n	800c56e <HAL_TIMEx_OCN_Start_IT+0x1ac>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	f003 0307 	and.w	r3, r3, #7
 800c554:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2b06      	cmp	r3, #6
 800c55a:	d010      	beq.n	800c57e <HAL_TIMEx_OCN_Start_IT+0x1bc>
      {
        __HAL_TIM_ENABLE(htim);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0201 	orr.w	r2, r2, #1
 800c56a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c56c:	e007      	b.n	800c57e <HAL_TIMEx_OCN_Start_IT+0x1bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f042 0201 	orr.w	r2, r2, #1
 800c57c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}
 800c588:	40010000 	.word	0x40010000
 800c58c:	40000400 	.word	0x40000400
 800c590:	40000800 	.word	0x40000800
 800c594:	40000c00 	.word	0x40000c00
 800c598:	40010400 	.word	0x40010400
 800c59c:	40014000 	.word	0x40014000
 800c5a0:	40001800 	.word	0x40001800

0800c5a4 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	d01b      	beq.n	800c5f0 <HAL_TIMEx_OCN_Stop_IT+0x4c>
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	2b08      	cmp	r3, #8
 800c5bc:	d821      	bhi.n	800c602 <HAL_TIMEx_OCN_Stop_IT+0x5e>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <HAL_TIMEx_OCN_Stop_IT+0x28>
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d009      	beq.n	800c5de <HAL_TIMEx_OCN_Stop_IT+0x3a>
 800c5ca:	e01a      	b.n	800c602 <HAL_TIMEx_OCN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68da      	ldr	r2, [r3, #12]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0202 	bic.w	r2, r2, #2
 800c5da:	60da      	str	r2, [r3, #12]
      break;
 800c5dc:	e014      	b.n	800c608 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0204 	bic.w	r2, r2, #4
 800c5ec:	60da      	str	r2, [r3, #12]
      break;
 800c5ee:	e00b      	b.n	800c608 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68da      	ldr	r2, [r3, #12]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0208 	bic.w	r2, r2, #8
 800c5fe:	60da      	str	r2, [r3, #12]
      break;
 800c600:	e002      	b.n	800c608 <HAL_TIMEx_OCN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	73fb      	strb	r3, [r7, #15]
      break;
 800c606:	bf00      	nop
  }

  if (status == HAL_OK)
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d164      	bne.n	800c6d8 <HAL_TIMEx_OCN_Stop_IT+0x134>
  {
    /* Disable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f001 fbda 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6a1b      	ldr	r3, [r3, #32]
 800c622:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & TIM_CCER_CCxNE_MASK) == (uint32_t)RESET)
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	f240 4344 	movw	r3, #1092	@ 0x444
 800c62a:	4013      	ands	r3, r2
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d107      	bne.n	800c640 <HAL_TIMEx_OCN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c63e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6a1a      	ldr	r2, [r3, #32]
 800c646:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c64a:	4013      	ands	r3, r2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10f      	bne.n	800c670 <HAL_TIMEx_OCN_Stop_IT+0xcc>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6a1a      	ldr	r2, [r3, #32]
 800c656:	f240 4344 	movw	r3, #1092	@ 0x444
 800c65a:	4013      	ands	r3, r2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d107      	bne.n	800c670 <HAL_TIMEx_OCN_Stop_IT+0xcc>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c66e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6a1a      	ldr	r2, [r3, #32]
 800c676:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10f      	bne.n	800c6a0 <HAL_TIMEx_OCN_Stop_IT+0xfc>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6a1a      	ldr	r2, [r3, #32]
 800c686:	f240 4344 	movw	r3, #1092	@ 0x444
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d107      	bne.n	800c6a0 <HAL_TIMEx_OCN_Stop_IT+0xfc>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f022 0201 	bic.w	r2, r2, #1
 800c69e:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d104      	bne.n	800c6b0 <HAL_TIMEx_OCN_Stop_IT+0x10c>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6ae:	e013      	b.n	800c6d8 <HAL_TIMEx_OCN_Stop_IT+0x134>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d104      	bne.n	800c6c0 <HAL_TIMEx_OCN_Stop_IT+0x11c>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c6be:	e00b      	b.n	800c6d8 <HAL_TIMEx_OCN_Stop_IT+0x134>
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b08      	cmp	r3, #8
 800c6c4:	d104      	bne.n	800c6d0 <HAL_TIMEx_OCN_Stop_IT+0x12c>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6ce:	e003      	b.n	800c6d8 <HAL_TIMEx_OCN_Stop_IT+0x134>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <HAL_TIMEx_OCN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                          uint16_t Length)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b086      	sub	sp, #24
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	60f8      	str	r0, [r7, #12]
 800c6ea:	60b9      	str	r1, [r7, #8]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d109      	bne.n	800c70e <HAL_TIMEx_OCN_Start_DMA+0x2c>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b02      	cmp	r3, #2
 800c704:	bf0c      	ite	eq
 800c706:	2301      	moveq	r3, #1
 800c708:	2300      	movne	r3, #0
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	e022      	b.n	800c754 <HAL_TIMEx_OCN_Start_DMA+0x72>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b04      	cmp	r3, #4
 800c712:	d109      	bne.n	800c728 <HAL_TIMEx_OCN_Start_DMA+0x46>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	bf0c      	ite	eq
 800c720:	2301      	moveq	r3, #1
 800c722:	2300      	movne	r3, #0
 800c724:	b2db      	uxtb	r3, r3
 800c726:	e015      	b.n	800c754 <HAL_TIMEx_OCN_Start_DMA+0x72>
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2b08      	cmp	r3, #8
 800c72c:	d109      	bne.n	800c742 <HAL_TIMEx_OCN_Start_DMA+0x60>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b02      	cmp	r3, #2
 800c738:	bf0c      	ite	eq
 800c73a:	2301      	moveq	r3, #1
 800c73c:	2300      	movne	r3, #0
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	e008      	b.n	800c754 <HAL_TIMEx_OCN_Start_DMA+0x72>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	bf0c      	ite	eq
 800c74e:	2301      	moveq	r3, #1
 800c750:	2300      	movne	r3, #0
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <HAL_TIMEx_OCN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800c758:	2302      	movs	r3, #2
 800c75a:	e129      	b.n	800c9b0 <HAL_TIMEx_OCN_Start_DMA+0x2ce>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <HAL_TIMEx_OCN_Start_DMA+0x94>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	bf0c      	ite	eq
 800c76e:	2301      	moveq	r3, #1
 800c770:	2300      	movne	r3, #0
 800c772:	b2db      	uxtb	r3, r3
 800c774:	e022      	b.n	800c7bc <HAL_TIMEx_OCN_Start_DMA+0xda>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d109      	bne.n	800c790 <HAL_TIMEx_OCN_Start_DMA+0xae>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b01      	cmp	r3, #1
 800c786:	bf0c      	ite	eq
 800c788:	2301      	moveq	r3, #1
 800c78a:	2300      	movne	r3, #0
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	e015      	b.n	800c7bc <HAL_TIMEx_OCN_Start_DMA+0xda>
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	2b08      	cmp	r3, #8
 800c794:	d109      	bne.n	800c7aa <HAL_TIMEx_OCN_Start_DMA+0xc8>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	bf0c      	ite	eq
 800c7a2:	2301      	moveq	r3, #1
 800c7a4:	2300      	movne	r3, #0
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	e008      	b.n	800c7bc <HAL_TIMEx_OCN_Start_DMA+0xda>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	bf0c      	ite	eq
 800c7b6:	2301      	moveq	r3, #1
 800c7b8:	2300      	movne	r3, #0
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d024      	beq.n	800c80a <HAL_TIMEx_OCN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <HAL_TIMEx_OCN_Start_DMA+0xea>
 800c7c6:	887b      	ldrh	r3, [r7, #2]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <HAL_TIMEx_OCN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e0ef      	b.n	800c9b0 <HAL_TIMEx_OCN_Start_DMA+0x2ce>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <HAL_TIMEx_OCN_Start_DMA+0xfe>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7de:	e016      	b.n	800c80e <HAL_TIMEx_OCN_Start_DMA+0x12c>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d104      	bne.n	800c7f0 <HAL_TIMEx_OCN_Start_DMA+0x10e>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2202      	movs	r2, #2
 800c7ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c7ee:	e00e      	b.n	800c80e <HAL_TIMEx_OCN_Start_DMA+0x12c>
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b08      	cmp	r3, #8
 800c7f4:	d104      	bne.n	800c800 <HAL_TIMEx_OCN_Start_DMA+0x11e>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7fe:	e006      	b.n	800c80e <HAL_TIMEx_OCN_Start_DMA+0x12c>
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2202      	movs	r2, #2
 800c804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c808:	e001      	b.n	800c80e <HAL_TIMEx_OCN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	e0d0      	b.n	800c9b0 <HAL_TIMEx_OCN_Start_DMA+0x2ce>
  }

  switch (Channel)
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b08      	cmp	r3, #8
 800c812:	d051      	beq.n	800c8b8 <HAL_TIMEx_OCN_Start_DMA+0x1d6>
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	2b08      	cmp	r3, #8
 800c818:	d872      	bhi.n	800c900 <HAL_TIMEx_OCN_Start_DMA+0x21e>
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <HAL_TIMEx_OCN_Start_DMA+0x146>
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b04      	cmp	r3, #4
 800c824:	d024      	beq.n	800c870 <HAL_TIMEx_OCN_Start_DMA+0x18e>
 800c826:	e06b      	b.n	800c900 <HAL_TIMEx_OCN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82c:	4a62      	ldr	r2, [pc, #392]	@ (800c9b8 <HAL_TIMEx_OCN_Start_DMA+0x2d6>)
 800c82e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c834:	4a61      	ldr	r2, [pc, #388]	@ (800c9bc <HAL_TIMEx_OCN_Start_DMA+0x2da>)
 800c836:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83c:	4a60      	ldr	r2, [pc, #384]	@ (800c9c0 <HAL_TIMEx_OCN_Start_DMA+0x2de>)
 800c83e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3334      	adds	r3, #52	@ 0x34
 800c84c:	461a      	mov	r2, r3
 800c84e:	887b      	ldrh	r3, [r7, #2]
 800c850:	f7f5 fed3 	bl	80025fa <HAL_DMA_Start_IT>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <HAL_TIMEx_OCN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e0a8      	b.n	800c9b0 <HAL_TIMEx_OCN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c86c:	60da      	str	r2, [r3, #12]
      break;
 800c86e:	e04a      	b.n	800c906 <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c874:	4a50      	ldr	r2, [pc, #320]	@ (800c9b8 <HAL_TIMEx_OCN_Start_DMA+0x2d6>)
 800c876:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c87c:	4a4f      	ldr	r2, [pc, #316]	@ (800c9bc <HAL_TIMEx_OCN_Start_DMA+0x2da>)
 800c87e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c884:	4a4e      	ldr	r2, [pc, #312]	@ (800c9c0 <HAL_TIMEx_OCN_Start_DMA+0x2de>)
 800c886:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3338      	adds	r3, #56	@ 0x38
 800c894:	461a      	mov	r2, r3
 800c896:	887b      	ldrh	r3, [r7, #2]
 800c898:	f7f5 feaf 	bl	80025fa <HAL_DMA_Start_IT>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <HAL_TIMEx_OCN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e084      	b.n	800c9b0 <HAL_TIMEx_OCN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c8b4:	60da      	str	r2, [r3, #12]
      break;
 800c8b6:	e026      	b.n	800c906 <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8bc:	4a3e      	ldr	r2, [pc, #248]	@ (800c9b8 <HAL_TIMEx_OCN_Start_DMA+0x2d6>)
 800c8be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c4:	4a3d      	ldr	r2, [pc, #244]	@ (800c9bc <HAL_TIMEx_OCN_Start_DMA+0x2da>)
 800c8c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8cc:	4a3c      	ldr	r2, [pc, #240]	@ (800c9c0 <HAL_TIMEx_OCN_Start_DMA+0x2de>)
 800c8ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c8d4:	6879      	ldr	r1, [r7, #4]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	333c      	adds	r3, #60	@ 0x3c
 800c8dc:	461a      	mov	r2, r3
 800c8de:	887b      	ldrh	r3, [r7, #2]
 800c8e0:	f7f5 fe8b 	bl	80025fa <HAL_DMA_Start_IT>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <HAL_TIMEx_OCN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e060      	b.n	800c9b0 <HAL_TIMEx_OCN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Output Compare DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68da      	ldr	r2, [r3, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8fc:	60da      	str	r2, [r3, #12]
      break;
 800c8fe:	e002      	b.n	800c906 <HAL_TIMEx_OCN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	75fb      	strb	r3, [r7, #23]
      break;
 800c904:	bf00      	nop
  }

  if (status == HAL_OK)
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d150      	bne.n	800c9ae <HAL_TIMEx_OCN_Start_DMA+0x2cc>
  {
    /* Enable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2204      	movs	r2, #4
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	4618      	mov	r0, r3
 800c916:	f001 fa5b 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c928:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a25      	ldr	r2, [pc, #148]	@ (800c9c4 <HAL_TIMEx_OCN_Start_DMA+0x2e2>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d022      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c93c:	d01d      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a21      	ldr	r2, [pc, #132]	@ (800c9c8 <HAL_TIMEx_OCN_Start_DMA+0x2e6>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d018      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a1f      	ldr	r2, [pc, #124]	@ (800c9cc <HAL_TIMEx_OCN_Start_DMA+0x2ea>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d013      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a1e      	ldr	r2, [pc, #120]	@ (800c9d0 <HAL_TIMEx_OCN_Start_DMA+0x2ee>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00e      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1c      	ldr	r2, [pc, #112]	@ (800c9d4 <HAL_TIMEx_OCN_Start_DMA+0x2f2>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d009      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9d8 <HAL_TIMEx_OCN_Start_DMA+0x2f6>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d004      	beq.n	800c97a <HAL_TIMEx_OCN_Start_DMA+0x298>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a19      	ldr	r2, [pc, #100]	@ (800c9dc <HAL_TIMEx_OCN_Start_DMA+0x2fa>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d111      	bne.n	800c99e <HAL_TIMEx_OCN_Start_DMA+0x2bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	f003 0307 	and.w	r3, r3, #7
 800c984:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	2b06      	cmp	r3, #6
 800c98a:	d010      	beq.n	800c9ae <HAL_TIMEx_OCN_Start_DMA+0x2cc>
      {
        __HAL_TIM_ENABLE(htim);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f042 0201 	orr.w	r2, r2, #1
 800c99a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c99c:	e007      	b.n	800c9ae <HAL_TIMEx_OCN_Start_DMA+0x2cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f042 0201 	orr.w	r2, r2, #1
 800c9ac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	0800dcdd 	.word	0x0800dcdd
 800c9bc:	0800ae9d 	.word	0x0800ae9d
 800c9c0:	0800dd63 	.word	0x0800dd63
 800c9c4:	40010000 	.word	0x40010000
 800c9c8:	40000400 	.word	0x40000400
 800c9cc:	40000800 	.word	0x40000800
 800c9d0:	40000c00 	.word	0x40000c00
 800c9d4:	40010400 	.word	0x40010400
 800c9d8:	40014000 	.word	0x40014000
 800c9dc:	40001800 	.word	0x40001800

0800c9e0 <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d025      	beq.n	800ca40 <HAL_TIMEx_OCN_Stop_DMA+0x60>
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2b08      	cmp	r3, #8
 800c9f8:	d830      	bhi.n	800ca5c <HAL_TIMEx_OCN_Stop_DMA+0x7c>
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d003      	beq.n	800ca08 <HAL_TIMEx_OCN_Stop_DMA+0x28>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	2b04      	cmp	r3, #4
 800ca04:	d00e      	beq.n	800ca24 <HAL_TIMEx_OCN_Stop_DMA+0x44>
 800ca06:	e029      	b.n	800ca5c <HAL_TIMEx_OCN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68da      	ldr	r2, [r3, #12]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ca16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f5 feb4 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800ca22:	e01e      	b.n	800ca62 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7f5 fea6 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800ca3e:	e010      	b.n	800ca62 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Output Compare DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68da      	ldr	r2, [r3, #12]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ca4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7f5 fe98 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800ca5a:	e002      	b.n	800ca62 <HAL_TIMEx_OCN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca60:	bf00      	nop
  }

  if (status == HAL_OK)
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d152      	bne.n	800cb0e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
  {
    /* Disable the Capture compare channel N */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f001 f9ad 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6a1a      	ldr	r2, [r3, #32]
 800ca7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ca80:	4013      	ands	r3, r2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10f      	bne.n	800caa6 <HAL_TIMEx_OCN_Stop_DMA+0xc6>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6a1a      	ldr	r2, [r3, #32]
 800ca8c:	f240 4344 	movw	r3, #1092	@ 0x444
 800ca90:	4013      	ands	r3, r2
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d107      	bne.n	800caa6 <HAL_TIMEx_OCN_Stop_DMA+0xc6>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800caa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6a1a      	ldr	r2, [r3, #32]
 800caac:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cab0:	4013      	ands	r3, r2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10f      	bne.n	800cad6 <HAL_TIMEx_OCN_Stop_DMA+0xf6>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	6a1a      	ldr	r2, [r3, #32]
 800cabc:	f240 4344 	movw	r3, #1092	@ 0x444
 800cac0:	4013      	ands	r3, r2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d107      	bne.n	800cad6 <HAL_TIMEx_OCN_Stop_DMA+0xf6>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f022 0201 	bic.w	r2, r2, #1
 800cad4:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d104      	bne.n	800cae6 <HAL_TIMEx_OCN_Stop_DMA+0x106>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cae4:	e013      	b.n	800cb0e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b04      	cmp	r3, #4
 800caea:	d104      	bne.n	800caf6 <HAL_TIMEx_OCN_Stop_DMA+0x116>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800caf4:	e00b      	b.n	800cb0e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b08      	cmp	r3, #8
 800cafa:	d104      	bne.n	800cb06 <HAL_TIMEx_OCN_Stop_DMA+0x126>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb04:	e003      	b.n	800cb0e <HAL_TIMEx_OCN_Stop_DMA+0x12e>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d109      	bne.n	800cb3c <HAL_TIMEx_PWMN_Start+0x24>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	bf14      	ite	ne
 800cb34:	2301      	movne	r3, #1
 800cb36:	2300      	moveq	r3, #0
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	e022      	b.n	800cb82 <HAL_TIMEx_PWMN_Start+0x6a>
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d109      	bne.n	800cb56 <HAL_TIMEx_PWMN_Start+0x3e>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	bf14      	ite	ne
 800cb4e:	2301      	movne	r3, #1
 800cb50:	2300      	moveq	r3, #0
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	e015      	b.n	800cb82 <HAL_TIMEx_PWMN_Start+0x6a>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b08      	cmp	r3, #8
 800cb5a:	d109      	bne.n	800cb70 <HAL_TIMEx_PWMN_Start+0x58>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	bf14      	ite	ne
 800cb68:	2301      	movne	r3, #1
 800cb6a:	2300      	moveq	r3, #0
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	e008      	b.n	800cb82 <HAL_TIMEx_PWMN_Start+0x6a>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	bf14      	ite	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	e06d      	b.n	800cc66 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d104      	bne.n	800cb9a <HAL_TIMEx_PWMN_Start+0x82>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2202      	movs	r2, #2
 800cb94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb98:	e013      	b.n	800cbc2 <HAL_TIMEx_PWMN_Start+0xaa>
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d104      	bne.n	800cbaa <HAL_TIMEx_PWMN_Start+0x92>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cba8:	e00b      	b.n	800cbc2 <HAL_TIMEx_PWMN_Start+0xaa>
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d104      	bne.n	800cbba <HAL_TIMEx_PWMN_Start+0xa2>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbb8:	e003      	b.n	800cbc2 <HAL_TIMEx_PWMN_Start+0xaa>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2202      	movs	r2, #2
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2204      	movs	r2, #4
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f001 f900 	bl	800ddd0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cbde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a22      	ldr	r2, [pc, #136]	@ (800cc70 <HAL_TIMEx_PWMN_Start+0x158>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d022      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbf2:	d01d      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a1e      	ldr	r2, [pc, #120]	@ (800cc74 <HAL_TIMEx_PWMN_Start+0x15c>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d018      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a1d      	ldr	r2, [pc, #116]	@ (800cc78 <HAL_TIMEx_PWMN_Start+0x160>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d013      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a1b      	ldr	r2, [pc, #108]	@ (800cc7c <HAL_TIMEx_PWMN_Start+0x164>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00e      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a1a      	ldr	r2, [pc, #104]	@ (800cc80 <HAL_TIMEx_PWMN_Start+0x168>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d009      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a18      	ldr	r2, [pc, #96]	@ (800cc84 <HAL_TIMEx_PWMN_Start+0x16c>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d004      	beq.n	800cc30 <HAL_TIMEx_PWMN_Start+0x118>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a17      	ldr	r2, [pc, #92]	@ (800cc88 <HAL_TIMEx_PWMN_Start+0x170>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d111      	bne.n	800cc54 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b06      	cmp	r3, #6
 800cc40:	d010      	beq.n	800cc64 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f042 0201 	orr.w	r2, r2, #1
 800cc50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc52:	e007      	b.n	800cc64 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f042 0201 	orr.w	r2, r2, #1
 800cc62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	40010000 	.word	0x40010000
 800cc74:	40000400 	.word	0x40000400
 800cc78:	40000800 	.word	0x40000800
 800cc7c:	40000c00 	.word	0x40000c00
 800cc80:	40010400 	.word	0x40010400
 800cc84:	40014000 	.word	0x40014000
 800cc88:	40001800 	.word	0x40001800

0800cc8c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f001 f896 	bl	800ddd0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6a1a      	ldr	r2, [r3, #32]
 800ccaa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ccae:	4013      	ands	r3, r2
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10f      	bne.n	800ccd4 <HAL_TIMEx_PWMN_Stop+0x48>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6a1a      	ldr	r2, [r3, #32]
 800ccba:	f240 4344 	movw	r3, #1092	@ 0x444
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d107      	bne.n	800ccd4 <HAL_TIMEx_PWMN_Stop+0x48>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ccd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6a1a      	ldr	r2, [r3, #32]
 800ccda:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ccde:	4013      	ands	r3, r2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10f      	bne.n	800cd04 <HAL_TIMEx_PWMN_Stop+0x78>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6a1a      	ldr	r2, [r3, #32]
 800ccea:	f240 4344 	movw	r3, #1092	@ 0x444
 800ccee:	4013      	ands	r3, r2
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d107      	bne.n	800cd04 <HAL_TIMEx_PWMN_Stop+0x78>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f022 0201 	bic.w	r2, r2, #1
 800cd02:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d104      	bne.n	800cd14 <HAL_TIMEx_PWMN_Stop+0x88>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cd12:	e013      	b.n	800cd3c <HAL_TIMEx_PWMN_Stop+0xb0>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2b04      	cmp	r3, #4
 800cd18:	d104      	bne.n	800cd24 <HAL_TIMEx_PWMN_Stop+0x98>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cd22:	e00b      	b.n	800cd3c <HAL_TIMEx_PWMN_Stop+0xb0>
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2b08      	cmp	r3, #8
 800cd28:	d104      	bne.n	800cd34 <HAL_TIMEx_PWMN_Stop+0xa8>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd32:	e003      	b.n	800cd3c <HAL_TIMEx_PWMN_Stop+0xb0>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d109      	bne.n	800cd6e <HAL_TIMEx_PWMN_Start_IT+0x28>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	bf14      	ite	ne
 800cd66:	2301      	movne	r3, #1
 800cd68:	2300      	moveq	r3, #0
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	e022      	b.n	800cdb4 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	d109      	bne.n	800cd88 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	bf14      	ite	ne
 800cd80:	2301      	movne	r3, #1
 800cd82:	2300      	moveq	r3, #0
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	e015      	b.n	800cdb4 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	2b08      	cmp	r3, #8
 800cd8c:	d109      	bne.n	800cda2 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	bf14      	ite	ne
 800cd9a:	2301      	movne	r3, #1
 800cd9c:	2300      	moveq	r3, #0
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	e008      	b.n	800cdb4 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	bf14      	ite	ne
 800cdae:	2301      	movne	r3, #1
 800cdb0:	2300      	moveq	r3, #0
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e0a3      	b.n	800cf04 <HAL_TIMEx_PWMN_Start_IT+0x1be>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d104      	bne.n	800cdcc <HAL_TIMEx_PWMN_Start_IT+0x86>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cdca:	e013      	b.n	800cdf4 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d104      	bne.n	800cddc <HAL_TIMEx_PWMN_Start_IT+0x96>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2202      	movs	r2, #2
 800cdd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cdda:	e00b      	b.n	800cdf4 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	2b08      	cmp	r3, #8
 800cde0:	d104      	bne.n	800cdec <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2202      	movs	r2, #2
 800cde6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cdea:	e003      	b.n	800cdf4 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b08      	cmp	r3, #8
 800cdf8:	d01b      	beq.n	800ce32 <HAL_TIMEx_PWMN_Start_IT+0xec>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b08      	cmp	r3, #8
 800cdfe:	d821      	bhi.n	800ce44 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d003      	beq.n	800ce0e <HAL_TIMEx_PWMN_Start_IT+0xc8>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	d009      	beq.n	800ce20 <HAL_TIMEx_PWMN_Start_IT+0xda>
 800ce0c:	e01a      	b.n	800ce44 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68da      	ldr	r2, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f042 0202 	orr.w	r2, r2, #2
 800ce1c:	60da      	str	r2, [r3, #12]
      break;
 800ce1e:	e014      	b.n	800ce4a <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f042 0204 	orr.w	r2, r2, #4
 800ce2e:	60da      	str	r2, [r3, #12]
      break;
 800ce30:	e00b      	b.n	800ce4a <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68da      	ldr	r2, [r3, #12]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f042 0208 	orr.w	r2, r2, #8
 800ce40:	60da      	str	r2, [r3, #12]
      break;
 800ce42:	e002      	b.n	800ce4a <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 800ce44:	2301      	movs	r3, #1
 800ce46:	73fb      	strb	r3, [r7, #15]
      break;
 800ce48:	bf00      	nop
  }

  if (status == HAL_OK)
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d158      	bne.n	800cf02 <HAL_TIMEx_PWMN_Start_IT+0x1bc>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68da      	ldr	r2, [r3, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ce5e:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2204      	movs	r2, #4
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 ffb1 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ce7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a22      	ldr	r2, [pc, #136]	@ (800cf0c <HAL_TIMEx_PWMN_Start_IT+0x1c6>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d022      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce90:	d01d      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a1e      	ldr	r2, [pc, #120]	@ (800cf10 <HAL_TIMEx_PWMN_Start_IT+0x1ca>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d018      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a1c      	ldr	r2, [pc, #112]	@ (800cf14 <HAL_TIMEx_PWMN_Start_IT+0x1ce>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d013      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a1b      	ldr	r2, [pc, #108]	@ (800cf18 <HAL_TIMEx_PWMN_Start_IT+0x1d2>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d00e      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a19      	ldr	r2, [pc, #100]	@ (800cf1c <HAL_TIMEx_PWMN_Start_IT+0x1d6>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d009      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a18      	ldr	r2, [pc, #96]	@ (800cf20 <HAL_TIMEx_PWMN_Start_IT+0x1da>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d004      	beq.n	800cece <HAL_TIMEx_PWMN_Start_IT+0x188>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a16      	ldr	r2, [pc, #88]	@ (800cf24 <HAL_TIMEx_PWMN_Start_IT+0x1de>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d111      	bne.n	800cef2 <HAL_TIMEx_PWMN_Start_IT+0x1ac>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f003 0307 	and.w	r3, r3, #7
 800ced8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b06      	cmp	r3, #6
 800cede:	d010      	beq.n	800cf02 <HAL_TIMEx_PWMN_Start_IT+0x1bc>
      {
        __HAL_TIM_ENABLE(htim);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f042 0201 	orr.w	r2, r2, #1
 800ceee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef0:	e007      	b.n	800cf02 <HAL_TIMEx_PWMN_Start_IT+0x1bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f042 0201 	orr.w	r2, r2, #1
 800cf00:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	40010000 	.word	0x40010000
 800cf10:	40000400 	.word	0x40000400
 800cf14:	40000800 	.word	0x40000800
 800cf18:	40000c00 	.word	0x40000c00
 800cf1c:	40010400 	.word	0x40010400
 800cf20:	40014000 	.word	0x40014000
 800cf24:	40001800 	.word	0x40001800

0800cf28 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b08      	cmp	r3, #8
 800cf3a:	d01b      	beq.n	800cf74 <HAL_TIMEx_PWMN_Stop_IT+0x4c>
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	2b08      	cmp	r3, #8
 800cf40:	d821      	bhi.n	800cf86 <HAL_TIMEx_PWMN_Stop_IT+0x5e>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <HAL_TIMEx_PWMN_Stop_IT+0x28>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	d009      	beq.n	800cf62 <HAL_TIMEx_PWMN_Stop_IT+0x3a>
 800cf4e:	e01a      	b.n	800cf86 <HAL_TIMEx_PWMN_Stop_IT+0x5e>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f022 0202 	bic.w	r2, r2, #2
 800cf5e:	60da      	str	r2, [r3, #12]
      break;
 800cf60:	e014      	b.n	800cf8c <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68da      	ldr	r2, [r3, #12]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f022 0204 	bic.w	r2, r2, #4
 800cf70:	60da      	str	r2, [r3, #12]
      break;
 800cf72:	e00b      	b.n	800cf8c <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	68da      	ldr	r2, [r3, #12]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0208 	bic.w	r2, r2, #8
 800cf82:	60da      	str	r2, [r3, #12]
      break;
 800cf84:	e002      	b.n	800cf8c <HAL_TIMEx_PWMN_Stop_IT+0x64>
    }

    default:
      status = HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	73fb      	strb	r3, [r7, #15]
      break;
 800cf8a:	bf00      	nop
  }

  if (status == HAL_OK)
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d164      	bne.n	800d05c <HAL_TIMEx_PWMN_Stop_IT+0x134>
  {
    /* Disable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2200      	movs	r2, #0
 800cf98:	6839      	ldr	r1, [r7, #0]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 ff18 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Disable the TIM Break interrupt (only if no more channel is active) */
    tmpccer = htim->Instance->CCER;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6a1b      	ldr	r3, [r3, #32]
 800cfa6:	60bb      	str	r3, [r7, #8]
    if ((tmpccer & TIM_CCER_CCxNE_MASK) == (uint32_t)RESET)
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	f240 4344 	movw	r3, #1092	@ 0x444
 800cfae:	4013      	ands	r3, r2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d107      	bne.n	800cfc4 <HAL_TIMEx_PWMN_Stop_IT+0x9c>
    {
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68da      	ldr	r2, [r3, #12]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cfc2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6a1a      	ldr	r2, [r3, #32]
 800cfca:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cfce:	4013      	ands	r3, r2
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10f      	bne.n	800cff4 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6a1a      	ldr	r2, [r3, #32]
 800cfda:	f240 4344 	movw	r3, #1092	@ 0x444
 800cfde:	4013      	ands	r3, r2
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d107      	bne.n	800cff4 <HAL_TIMEx_PWMN_Stop_IT+0xcc>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cff2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6a1a      	ldr	r2, [r3, #32]
 800cffa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800cffe:	4013      	ands	r3, r2
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10f      	bne.n	800d024 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6a1a      	ldr	r2, [r3, #32]
 800d00a:	f240 4344 	movw	r3, #1092	@ 0x444
 800d00e:	4013      	ands	r3, r2
 800d010:	2b00      	cmp	r3, #0
 800d012:	d107      	bne.n	800d024 <HAL_TIMEx_PWMN_Stop_IT+0xfc>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f022 0201 	bic.w	r2, r2, #1
 800d022:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d104      	bne.n	800d034 <HAL_TIMEx_PWMN_Stop_IT+0x10c>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d032:	e013      	b.n	800d05c <HAL_TIMEx_PWMN_Stop_IT+0x134>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b04      	cmp	r3, #4
 800d038:	d104      	bne.n	800d044 <HAL_TIMEx_PWMN_Stop_IT+0x11c>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d042:	e00b      	b.n	800d05c <HAL_TIMEx_PWMN_Stop_IT+0x134>
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	2b08      	cmp	r3, #8
 800d048:	d104      	bne.n	800d054 <HAL_TIMEx_PWMN_Stop_IT+0x12c>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d052:	e003      	b.n	800d05c <HAL_TIMEx_PWMN_Stop_IT+0x134>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                           uint16_t Length)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b086      	sub	sp, #24
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	60f8      	str	r0, [r7, #12]
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	607a      	str	r2, [r7, #4]
 800d072:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d109      	bne.n	800d092 <HAL_TIMEx_PWMN_Start_DMA+0x2c>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b02      	cmp	r3, #2
 800d088:	bf0c      	ite	eq
 800d08a:	2301      	moveq	r3, #1
 800d08c:	2300      	movne	r3, #0
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	e022      	b.n	800d0d8 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	2b04      	cmp	r3, #4
 800d096:	d109      	bne.n	800d0ac <HAL_TIMEx_PWMN_Start_DMA+0x46>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	bf0c      	ite	eq
 800d0a4:	2301      	moveq	r3, #1
 800d0a6:	2300      	movne	r3, #0
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	e015      	b.n	800d0d8 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b08      	cmp	r3, #8
 800d0b0:	d109      	bne.n	800d0c6 <HAL_TIMEx_PWMN_Start_DMA+0x60>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	bf0c      	ite	eq
 800d0be:	2301      	moveq	r3, #1
 800d0c0:	2300      	movne	r3, #0
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	e008      	b.n	800d0d8 <HAL_TIMEx_PWMN_Start_DMA+0x72>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	bf0c      	ite	eq
 800d0d2:	2301      	moveq	r3, #1
 800d0d4:	2300      	movne	r3, #0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <HAL_TIMEx_PWMN_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	e129      	b.n	800d334 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d109      	bne.n	800d0fa <HAL_TIMEx_PWMN_Start_DMA+0x94>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	bf0c      	ite	eq
 800d0f2:	2301      	moveq	r3, #1
 800d0f4:	2300      	movne	r3, #0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	e022      	b.n	800d140 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	d109      	bne.n	800d114 <HAL_TIMEx_PWMN_Start_DMA+0xae>
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b01      	cmp	r3, #1
 800d10a:	bf0c      	ite	eq
 800d10c:	2301      	moveq	r3, #1
 800d10e:	2300      	movne	r3, #0
 800d110:	b2db      	uxtb	r3, r3
 800d112:	e015      	b.n	800d140 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2b08      	cmp	r3, #8
 800d118:	d109      	bne.n	800d12e <HAL_TIMEx_PWMN_Start_DMA+0xc8>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b01      	cmp	r3, #1
 800d124:	bf0c      	ite	eq
 800d126:	2301      	moveq	r3, #1
 800d128:	2300      	movne	r3, #0
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	e008      	b.n	800d140 <HAL_TIMEx_PWMN_Start_DMA+0xda>
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b01      	cmp	r3, #1
 800d138:	bf0c      	ite	eq
 800d13a:	2301      	moveq	r3, #1
 800d13c:	2300      	movne	r3, #0
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b00      	cmp	r3, #0
 800d142:	d024      	beq.n	800d18e <HAL_TIMEx_PWMN_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 800d14a:	887b      	ldrh	r3, [r7, #2]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <HAL_TIMEx_PWMN_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e0ef      	b.n	800d334 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d104      	bne.n	800d164 <HAL_TIMEx_PWMN_Start_DMA+0xfe>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2202      	movs	r2, #2
 800d15e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d162:	e016      	b.n	800d192 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	2b04      	cmp	r3, #4
 800d168:	d104      	bne.n	800d174 <HAL_TIMEx_PWMN_Start_DMA+0x10e>
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2202      	movs	r2, #2
 800d16e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d172:	e00e      	b.n	800d192 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b08      	cmp	r3, #8
 800d178:	d104      	bne.n	800d184 <HAL_TIMEx_PWMN_Start_DMA+0x11e>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2202      	movs	r2, #2
 800d17e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d182:	e006      	b.n	800d192 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2202      	movs	r2, #2
 800d188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d18c:	e001      	b.n	800d192 <HAL_TIMEx_PWMN_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e0d0      	b.n	800d334 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
  }

  switch (Channel)
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2b08      	cmp	r3, #8
 800d196:	d051      	beq.n	800d23c <HAL_TIMEx_PWMN_Start_DMA+0x1d6>
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2b08      	cmp	r3, #8
 800d19c:	d872      	bhi.n	800d284 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d003      	beq.n	800d1ac <HAL_TIMEx_PWMN_Start_DMA+0x146>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b04      	cmp	r3, #4
 800d1a8:	d024      	beq.n	800d1f4 <HAL_TIMEx_PWMN_Start_DMA+0x18e>
 800d1aa:	e06b      	b.n	800d284 <HAL_TIMEx_PWMN_Start_DMA+0x21e>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b0:	4a62      	ldr	r2, [pc, #392]	@ (800d33c <HAL_TIMEx_PWMN_Start_DMA+0x2d6>)
 800d1b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b8:	4a61      	ldr	r2, [pc, #388]	@ (800d340 <HAL_TIMEx_PWMN_Start_DMA+0x2da>)
 800d1ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c0:	4a60      	ldr	r2, [pc, #384]	@ (800d344 <HAL_TIMEx_PWMN_Start_DMA+0x2de>)
 800d1c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d1c8:	6879      	ldr	r1, [r7, #4]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3334      	adds	r3, #52	@ 0x34
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	887b      	ldrh	r3, [r7, #2]
 800d1d4:	f7f5 fa11 	bl	80025fa <HAL_DMA_Start_IT>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <HAL_TIMEx_PWMN_Start_DMA+0x17c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e0a8      	b.n	800d334 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68da      	ldr	r2, [r3, #12]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d1f0:	60da      	str	r2, [r3, #12]
      break;
 800d1f2:	e04a      	b.n	800d28a <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1f8:	4a50      	ldr	r2, [pc, #320]	@ (800d33c <HAL_TIMEx_PWMN_Start_DMA+0x2d6>)
 800d1fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d200:	4a4f      	ldr	r2, [pc, #316]	@ (800d340 <HAL_TIMEx_PWMN_Start_DMA+0x2da>)
 800d202:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d208:	4a4e      	ldr	r2, [pc, #312]	@ (800d344 <HAL_TIMEx_PWMN_Start_DMA+0x2de>)
 800d20a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d210:	6879      	ldr	r1, [r7, #4]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3338      	adds	r3, #56	@ 0x38
 800d218:	461a      	mov	r2, r3
 800d21a:	887b      	ldrh	r3, [r7, #2]
 800d21c:	f7f5 f9ed 	bl	80025fa <HAL_DMA_Start_IT>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <HAL_TIMEx_PWMN_Start_DMA+0x1c4>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	e084      	b.n	800d334 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68da      	ldr	r2, [r3, #12]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d238:	60da      	str	r2, [r3, #12]
      break;
 800d23a:	e026      	b.n	800d28a <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d240:	4a3e      	ldr	r2, [pc, #248]	@ (800d33c <HAL_TIMEx_PWMN_Start_DMA+0x2d6>)
 800d242:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d248:	4a3d      	ldr	r2, [pc, #244]	@ (800d340 <HAL_TIMEx_PWMN_Start_DMA+0x2da>)
 800d24a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d250:	4a3c      	ldr	r2, [pc, #240]	@ (800d344 <HAL_TIMEx_PWMN_Start_DMA+0x2de>)
 800d252:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	333c      	adds	r3, #60	@ 0x3c
 800d260:	461a      	mov	r2, r3
 800d262:	887b      	ldrh	r3, [r7, #2]
 800d264:	f7f5 f9c9 	bl	80025fa <HAL_DMA_Start_IT>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <HAL_TIMEx_PWMN_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e060      	b.n	800d334 <HAL_TIMEx_PWMN_Start_DMA+0x2ce>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	68da      	ldr	r2, [r3, #12]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d280:	60da      	str	r2, [r3, #12]
      break;
 800d282:	e002      	b.n	800d28a <HAL_TIMEx_PWMN_Start_DMA+0x224>
    }

    default:
      status = HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	75fb      	strb	r3, [r7, #23]
      break;
 800d288:	bf00      	nop
  }

  if (status == HAL_OK)
 800d28a:	7dfb      	ldrb	r3, [r7, #23]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d150      	bne.n	800d332 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
  {
    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2204      	movs	r2, #4
 800d296:	68b9      	ldr	r1, [r7, #8]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 fd99 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d2ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a25      	ldr	r2, [pc, #148]	@ (800d348 <HAL_TIMEx_PWMN_Start_DMA+0x2e2>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d022      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2c0:	d01d      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a21      	ldr	r2, [pc, #132]	@ (800d34c <HAL_TIMEx_PWMN_Start_DMA+0x2e6>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d018      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a1f      	ldr	r2, [pc, #124]	@ (800d350 <HAL_TIMEx_PWMN_Start_DMA+0x2ea>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d013      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a1e      	ldr	r2, [pc, #120]	@ (800d354 <HAL_TIMEx_PWMN_Start_DMA+0x2ee>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d00e      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d358 <HAL_TIMEx_PWMN_Start_DMA+0x2f2>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d009      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a1b      	ldr	r2, [pc, #108]	@ (800d35c <HAL_TIMEx_PWMN_Start_DMA+0x2f6>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d004      	beq.n	800d2fe <HAL_TIMEx_PWMN_Start_DMA+0x298>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a19      	ldr	r2, [pc, #100]	@ (800d360 <HAL_TIMEx_PWMN_Start_DMA+0x2fa>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d111      	bne.n	800d322 <HAL_TIMEx_PWMN_Start_DMA+0x2bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	f003 0307 	and.w	r3, r3, #7
 800d308:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b06      	cmp	r3, #6
 800d30e:	d010      	beq.n	800d332 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      {
        __HAL_TIM_ENABLE(htim);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f042 0201 	orr.w	r2, r2, #1
 800d31e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d320:	e007      	b.n	800d332 <HAL_TIMEx_PWMN_Start_DMA+0x2cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f042 0201 	orr.w	r2, r2, #1
 800d330:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800d332:	7dfb      	ldrb	r3, [r7, #23]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0800dcdd 	.word	0x0800dcdd
 800d340:	0800ae9d 	.word	0x0800ae9d
 800d344:	0800dd63 	.word	0x0800dd63
 800d348:	40010000 	.word	0x40010000
 800d34c:	40000400 	.word	0x40000400
 800d350:	40000800 	.word	0x40000800
 800d354:	40000c00 	.word	0x40000c00
 800d358:	40010400 	.word	0x40010400
 800d35c:	40014000 	.word	0x40014000
 800d360:	40001800 	.word	0x40001800

0800d364 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b08      	cmp	r3, #8
 800d376:	d025      	beq.n	800d3c4 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b08      	cmp	r3, #8
 800d37c:	d830      	bhi.n	800d3e0 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d003      	beq.n	800d38c <HAL_TIMEx_PWMN_Stop_DMA+0x28>
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b04      	cmp	r3, #4
 800d388:	d00e      	beq.n	800d3a8 <HAL_TIMEx_PWMN_Stop_DMA+0x44>
 800d38a:	e029      	b.n	800d3e0 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68da      	ldr	r2, [r3, #12]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800d39a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7f5 f9f2 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800d3a6:	e01e      	b.n	800d3e6 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	68da      	ldr	r2, [r3, #12]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d3b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f5 f9e4 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800d3c2:	e010      	b.n	800d3e6 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68da      	ldr	r2, [r3, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d3d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7f5 f9d6 	bl	800278a <HAL_DMA_Abort_IT>
      break;
 800d3de:	e002      	b.n	800d3e6 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d152      	bne.n	800d492 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
  {
    /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f000 fceb 	bl	800ddd0 <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6a1a      	ldr	r2, [r3, #32]
 800d400:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d404:	4013      	ands	r3, r2
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10f      	bne.n	800d42a <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6a1a      	ldr	r2, [r3, #32]
 800d410:	f240 4344 	movw	r3, #1092	@ 0x444
 800d414:	4013      	ands	r3, r2
 800d416:	2b00      	cmp	r3, #0
 800d418:	d107      	bne.n	800d42a <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d428:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6a1a      	ldr	r2, [r3, #32]
 800d430:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d434:	4013      	ands	r3, r2
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10f      	bne.n	800d45a <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6a1a      	ldr	r2, [r3, #32]
 800d440:	f240 4344 	movw	r3, #1092	@ 0x444
 800d444:	4013      	ands	r3, r2
 800d446:	2b00      	cmp	r3, #0
 800d448:	d107      	bne.n	800d45a <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f022 0201 	bic.w	r2, r2, #1
 800d458:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d104      	bne.n	800d46a <HAL_TIMEx_PWMN_Stop_DMA+0x106>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d468:	e013      	b.n	800d492 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b04      	cmp	r3, #4
 800d46e:	d104      	bne.n	800d47a <HAL_TIMEx_PWMN_Stop_DMA+0x116>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d478:	e00b      	b.n	800d492 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b08      	cmp	r3, #8
 800d47e:	d104      	bne.n	800d48a <HAL_TIMEx_PWMN_Stop_DMA+0x126>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d488:	e003      	b.n	800d492 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800d492:	7bfb      	ldrb	r3, [r7, #15]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <HAL_TIMEx_OnePulseN_Start+0x14>
 800d4ac:	2304      	movs	r3, #4
 800d4ae:	e000      	b.n	800d4b2 <HAL_TIMEx_OnePulseN_Start+0x16>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d4ba:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d4c2:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d4ca:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d4d2:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4d4:	7afb      	ldrb	r3, [r7, #11]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d108      	bne.n	800d4ec <HAL_TIMEx_OnePulseN_Start+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4da:	7abb      	ldrb	r3, [r7, #10]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d105      	bne.n	800d4ec <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d4e0:	7a7b      	ldrb	r3, [r7, #9]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d102      	bne.n	800d4ec <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d4e6:	7a3b      	ldrb	r3, [r7, #8]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d001      	beq.n	800d4f0 <HAL_TIMEx_OnePulseN_Start+0x54>
  {
    return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e026      	b.n	800d53e <HAL_TIMEx_OnePulseN_Start+0xa2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2202      	movs	r2, #2
 800d4f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2202      	movs	r2, #2
 800d50c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2204      	movs	r2, #4
 800d516:	6839      	ldr	r1, [r7, #0]
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 fc59 	bl	800ddd0 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2201      	movs	r2, #1
 800d524:	68f9      	ldr	r1, [r7, #12]
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fa7e 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d53a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
 800d54e:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d101      	bne.n	800d55a <HAL_TIMEx_OnePulseN_Stop+0x14>
 800d556:	2304      	movs	r3, #4
 800d558:	e000      	b.n	800d55c <HAL_TIMEx_OnePulseN_Stop+0x16>
 800d55a:	2300      	movs	r3, #0
 800d55c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2200      	movs	r2, #0
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fc32 	bl	800ddd0 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	68f9      	ldr	r1, [r7, #12]
 800d574:	4618      	mov	r0, r3
 800d576:	f7fe fa57 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6a1a      	ldr	r2, [r3, #32]
 800d580:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d584:	4013      	ands	r3, r2
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10f      	bne.n	800d5aa <HAL_TIMEx_OnePulseN_Stop+0x64>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6a1a      	ldr	r2, [r3, #32]
 800d590:	f240 4344 	movw	r3, #1092	@ 0x444
 800d594:	4013      	ands	r3, r2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d107      	bne.n	800d5aa <HAL_TIMEx_OnePulseN_Stop+0x64>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d5a8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6a1a      	ldr	r2, [r3, #32]
 800d5b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10f      	bne.n	800d5da <HAL_TIMEx_OnePulseN_Stop+0x94>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6a1a      	ldr	r2, [r3, #32]
 800d5c0:	f240 4344 	movw	r3, #1092	@ 0x444
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d107      	bne.n	800d5da <HAL_TIMEx_OnePulseN_Stop+0x94>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f022 0201 	bic.w	r2, r2, #1
 800d5d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d101      	bne.n	800d618 <HAL_TIMEx_OnePulseN_Start_IT+0x14>
 800d614:	2304      	movs	r3, #4
 800d616:	e000      	b.n	800d61a <HAL_TIMEx_OnePulseN_Start_IT+0x16>
 800d618:	2300      	movs	r3, #0
 800d61a:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d622:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d62a:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d632:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d63a:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d63c:	7afb      	ldrb	r3, [r7, #11]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d108      	bne.n	800d654 <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d642:	7abb      	ldrb	r3, [r7, #10]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d105      	bne.n	800d654 <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d648:	7a7b      	ldrb	r3, [r7, #9]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d102      	bne.n	800d654 <HAL_TIMEx_OnePulseN_Start_IT+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d64e:	7a3b      	ldrb	r3, [r7, #8]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d001      	beq.n	800d658 <HAL_TIMEx_OnePulseN_Start_IT+0x54>
  {
    return HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	e036      	b.n	800d6c6 <HAL_TIMEx_OnePulseN_Start_IT+0xc2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2202      	movs	r2, #2
 800d65c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2202      	movs	r2, #2
 800d664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2202      	movs	r2, #2
 800d674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	68da      	ldr	r2, [r3, #12]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f042 0202 	orr.w	r2, r2, #2
 800d686:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68da      	ldr	r2, [r3, #12]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f042 0204 	orr.w	r2, r2, #4
 800d696:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2204      	movs	r2, #4
 800d69e:	6839      	ldr	r1, [r7, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 fb95 	bl	800ddd0 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	68f9      	ldr	r1, [r7, #12]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe f9ba 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d6c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
 800d6d6:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <HAL_TIMEx_OnePulseN_Stop_IT+0x14>
 800d6de:	2304      	movs	r3, #4
 800d6e0:	e000      	b.n	800d6e4 <HAL_TIMEx_OnePulseN_Stop_IT+0x16>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 0202 	bic.w	r2, r2, #2
 800d6f4:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f022 0204 	bic.w	r2, r2, #4
 800d704:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2200      	movs	r2, #0
 800d70c:	6839      	ldr	r1, [r7, #0]
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 fb5e 	bl	800ddd0 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2200      	movs	r2, #0
 800d71a:	68f9      	ldr	r1, [r7, #12]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe f983 	bl	800ba28 <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6a1a      	ldr	r2, [r3, #32]
 800d728:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d72c:	4013      	ands	r3, r2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10f      	bne.n	800d752 <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6a1a      	ldr	r2, [r3, #32]
 800d738:	f240 4344 	movw	r3, #1092	@ 0x444
 800d73c:	4013      	ands	r3, r2
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d107      	bne.n	800d752 <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d750:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	6a1a      	ldr	r2, [r3, #32]
 800d758:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d75c:	4013      	ands	r3, r2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d10f      	bne.n	800d782 <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6a1a      	ldr	r2, [r3, #32]
 800d768:	f240 4344 	movw	r3, #1092	@ 0x444
 800d76c:	4013      	ands	r3, r2
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d107      	bne.n	800d782 <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f022 0201 	bic.w	r2, r2, #1
 800d780:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                              uint32_t  CommutationSource)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d101      	bne.n	800d7c6 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	e04c      	b.n	800d860 <HAL_TIMEx_ConfigCommutEvent+0xb4>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d008      	beq.n	800d7e6 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b10      	cmp	r3, #16
 800d7d8:	d005      	beq.n	800d7e6 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b20      	cmp	r3, #32
 800d7de:	d002      	beq.n	800d7e6 <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b30      	cmp	r3, #48	@ 0x30
 800d7e4:	d10f      	bne.n	800d806 <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689a      	ldr	r2, [r3, #8]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d7f4:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6899      	ldr	r1, [r3, #8]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	430a      	orrs	r2, r1
 800d804:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f042 0201 	orr.w	r2, r2, #1
 800d814:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	685a      	ldr	r2, [r3, #4]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f022 0204 	bic.w	r2, r2, #4
 800d824:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	6859      	ldr	r1, [r3, #4]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	430a      	orrs	r2, r1
 800d834:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	68da      	ldr	r2, [r3, #12]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f022 0220 	bic.w	r2, r2, #32
 800d844:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68da      	ldr	r2, [r3, #12]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d854:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr

0800d86c <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d101      	bne.n	800d886 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800d882:	2302      	movs	r3, #2
 800d884:	e04c      	b.n	800d920 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d008      	beq.n	800d8a6 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2b10      	cmp	r3, #16
 800d898:	d005      	beq.n	800d8a6 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b20      	cmp	r3, #32
 800d89e:	d002      	beq.n	800d8a6 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	2b30      	cmp	r3, #48	@ 0x30
 800d8a4:	d10f      	bne.n	800d8c6 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d8b4:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6899      	ldr	r1, [r3, #8]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	430a      	orrs	r2, r1
 800d8c4:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0201 	orr.w	r2, r2, #1
 800d8d4:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 0204 	bic.w	r2, r2, #4
 800d8e4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6859      	ldr	r1, [r3, #4]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	430a      	orrs	r2, r1
 800d8f4:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68da      	ldr	r2, [r3, #12]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d904:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68da      	ldr	r2, [r3, #12]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f042 0220 	orr.w	r2, r2, #32
 800d914:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                  uint32_t  CommutationSource)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d101      	bne.n	800d946 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 800d942:	2302      	movs	r3, #2
 800d944:	e058      	b.n	800d9f8 <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	2b10      	cmp	r3, #16
 800d958:	d005      	beq.n	800d966 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	2b20      	cmp	r3, #32
 800d95e:	d002      	beq.n	800d966 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	2b30      	cmp	r3, #48	@ 0x30
 800d964:	d10f      	bne.n	800d986 <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	689a      	ldr	r2, [r3, #8]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800d974:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	6899      	ldr	r1, [r3, #8]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	430a      	orrs	r2, r1
 800d984:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	685a      	ldr	r2, [r3, #4]
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f042 0201 	orr.w	r2, r2, #1
 800d994:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f022 0204 	bic.w	r2, r2, #4
 800d9a4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	6859      	ldr	r1, [r3, #4]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ba:	4a12      	ldr	r2, [pc, #72]	@ (800da04 <HAL_TIMEx_ConfigCommutEvent_DMA+0xd8>)
 800d9bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c2:	4a11      	ldr	r2, [pc, #68]	@ (800da08 <HAL_TIMEx_ConfigCommutEvent_DMA+0xdc>)
 800d9c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ca:	4a10      	ldr	r2, [pc, #64]	@ (800da0c <HAL_TIMEx_ConfigCommutEvent_DMA+0xe0>)
 800d9cc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68da      	ldr	r2, [r3, #12]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f022 0220 	bic.w	r2, r2, #32
 800d9dc:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68da      	ldr	r2, [r3, #12]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d9ec:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	0800dc95 	.word	0x0800dc95
 800da08:	0800dcb9 	.word	0x0800dcb9
 800da0c:	0800ad63 	.word	0x0800ad63

0800da10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da20:	2b01      	cmp	r3, #1
 800da22:	d101      	bne.n	800da28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da24:	2302      	movs	r3, #2
 800da26:	e05a      	b.n	800dade <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2202      	movs	r2, #2
 800da34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	4313      	orrs	r3, r2
 800da58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a21      	ldr	r2, [pc, #132]	@ (800daec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d022      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da74:	d01d      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a1d      	ldr	r2, [pc, #116]	@ (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d018      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a1b      	ldr	r2, [pc, #108]	@ (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d013      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a1a      	ldr	r2, [pc, #104]	@ (800daf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d00e      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a18      	ldr	r2, [pc, #96]	@ (800dafc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d009      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a17      	ldr	r2, [pc, #92]	@ (800db00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d004      	beq.n	800dab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a15      	ldr	r2, [pc, #84]	@ (800db04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d10c      	bne.n	800dacc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	4313      	orrs	r3, r2
 800dac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3714      	adds	r7, #20
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	40010000 	.word	0x40010000
 800daf0:	40000400 	.word	0x40000400
 800daf4:	40000800 	.word	0x40000800
 800daf8:	40000c00 	.word	0x40000c00
 800dafc:	40010400 	.word	0x40010400
 800db00:	40014000 	.word	0x40014000
 800db04:	40001800 	.word	0x40001800

0800db08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db12:	2300      	movs	r3, #0
 800db14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d101      	bne.n	800db24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db20:	2302      	movs	r3, #2
 800db22:	e03d      	b.n	800dba0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	4313      	orrs	r3, r2
 800db38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	4313      	orrs	r3, r2
 800db46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	4313      	orrs	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4313      	orrs	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	4313      	orrs	r3, r2
 800db70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	69db      	ldr	r3, [r3, #28]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr

0800dbac <HAL_TIMEx_RemapConfig>:
  *         (**) Register not available in all devices.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d101      	bne.n	800dbc4 <HAL_TIMEx_RemapConfig+0x18>
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	e00c      	b.n	800dbde <HAL_TIMEx_RemapConfig+0x32>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Set the Timer remapping configuration */
    WRITE_REG(htim->Instance->OR, Remap);
  }
#else
  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* LPTIM_OR_TIM1_ITR2_RMP &&  LPTIM_OR_TIM5_ITR1_RMP && LPTIM_OR_TIM9_ITR1_RMP */

  __HAL_UNLOCK(htim);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(const TIM_HandleTypeDef *htim)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b083      	sub	sp, #12
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  return htim->State;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc34:	b2db      	uxtb	r3, r3
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <HAL_TIMEx_GetChannelNState>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  * @retval TIM Complementary channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(const TIM_HandleTypeDef *htim,  uint32_t ChannelN)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b085      	sub	sp, #20
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, ChannelN));

  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d104      	bne.n	800dc5c <HAL_TIMEx_GetChannelNState+0x1a>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	e013      	b.n	800dc84 <HAL_TIMEx_GetChannelNState+0x42>
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b04      	cmp	r3, #4
 800dc60:	d104      	bne.n	800dc6c <HAL_TIMEx_GetChannelNState+0x2a>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	e00b      	b.n	800dc84 <HAL_TIMEx_GetChannelNState+0x42>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	2b08      	cmp	r3, #8
 800dc70:	d104      	bne.n	800dc7c <HAL_TIMEx_GetChannelNState+0x3a>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	e003      	b.n	800dc84 <HAL_TIMEx_GetChannelNState+0x42>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3714      	adds	r7, #20
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca0:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7ff ff9d 	bl	800dbea <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcc4:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f7ff ff95 	bl	800dbfe <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800dcd4:	bf00      	nop
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d10b      	bne.n	800dd0c <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	69db      	ldr	r3, [r3, #28]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d125      	bne.n	800dd4e <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd0a:	e020      	b.n	800dd4e <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d10b      	bne.n	800dd2e <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2202      	movs	r2, #2
 800dd1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d114      	bne.n	800dd4e <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd2c:	e00f      	b.n	800dd4e <TIM_DMADelayPulseNCplt+0x72>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d10a      	bne.n	800dd4e <TIM_DMADelayPulseNCplt+0x72>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2204      	movs	r2, #4
 800dd3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	69db      	ldr	r3, [r3, #28]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d103      	bne.n	800dd4e <TIM_DMADelayPulseNCplt+0x72>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f7fc ff3e 	bl	800abd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	771a      	strb	r2, [r3, #28]
}
 800dd5a:	bf00      	nop
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b084      	sub	sp, #16
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d107      	bne.n	800dd8a <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd88:	e018      	b.n	800ddbc <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d107      	bne.n	800dda4 <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2202      	movs	r2, #2
 800dd98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dda2:	e00b      	b.n	800ddbc <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d106      	bne.n	800ddbc <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2204      	movs	r2, #4
 800ddb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7fc ff2f 	bl	800ac20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	771a      	strb	r2, [r3, #28]
}
 800ddc8:	bf00      	nop
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b087      	sub	sp, #28
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	f003 030f 	and.w	r3, r3, #15
 800dde2:	2204      	movs	r2, #4
 800dde4:	fa02 f303 	lsl.w	r3, r2, r3
 800dde8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6a1a      	ldr	r2, [r3, #32]
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	43db      	mvns	r3, r3
 800ddf2:	401a      	ands	r2, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6a1a      	ldr	r2, [r3, #32]
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f003 030f 	and.w	r3, r3, #15
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	fa01 f303 	lsl.w	r3, r1, r3
 800de08:	431a      	orrs	r2, r3
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	621a      	str	r2, [r3, #32]
}
 800de0e:	bf00      	nop
 800de10:	371c      	adds	r7, #28
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop

0800de1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e042      	b.n	800deb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d106      	bne.n	800de48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7f2 fdda 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2224      	movs	r2, #36	@ 0x24
 800de4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68da      	ldr	r2, [r3, #12]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800de5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f002 fc3d 	bl	80106e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	691a      	ldr	r2, [r3, #16]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800de74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	695a      	ldr	r2, [r3, #20]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800de84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68da      	ldr	r2, [r3, #12]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800de94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2220      	movs	r2, #32
 800dea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2220      	movs	r2, #32
 800dea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	e04a      	b.n	800df64 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d106      	bne.n	800dee8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7f2 fd8a 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2224      	movs	r2, #36	@ 0x24
 800deec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68da      	ldr	r2, [r3, #12]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800defe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f002 fbed 	bl	80106e0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	691a      	ldr	r2, [r3, #16]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800df14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	695a      	ldr	r2, [r3, #20]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800df24:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	695a      	ldr	r2, [r3, #20]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f042 0208 	orr.w	r2, r2, #8
 800df34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68da      	ldr	r2, [r3, #12]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800df44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2220      	movs	r2, #32
 800df50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2220      	movs	r2, #32
 800df58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800df7c:	2301      	movs	r3, #1
 800df7e:	e05a      	b.n	800e036 <HAL_LIN_Init+0xca>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df86:	b2db      	uxtb	r3, r3
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7f2 fd31 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2224      	movs	r2, #36	@ 0x24
 800df9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	68da      	ldr	r2, [r3, #12]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dfb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f002 fb94 	bl	80106e0 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	691a      	ldr	r2, [r3, #16]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dfc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	695a      	ldr	r2, [r3, #20]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dfd6:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	691a      	ldr	r2, [r3, #16]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfe6:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	691a      	ldr	r2, [r3, #16]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f022 0220 	bic.w	r2, r2, #32
 800dff6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	6919      	ldr	r1, [r3, #16]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	430a      	orrs	r2, r1
 800e006:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	68da      	ldr	r2, [r3, #12]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e016:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2220      	movs	r2, #32
 800e022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2220      	movs	r2, #32
 800e02a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e034:	2300      	movs	r3, #0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b084      	sub	sp, #16
 800e042:	af00      	add	r7, sp, #0
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	460b      	mov	r3, r1
 800e048:	607a      	str	r2, [r7, #4]
 800e04a:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e062      	b.n	800e11c <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7f2 fcc6 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2224      	movs	r2, #36	@ 0x24
 800e074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68da      	ldr	r2, [r3, #12]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	f002 fb29 	bl	80106e0 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	691a      	ldr	r2, [r3, #16]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e09c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	695a      	ldr	r2, [r3, #20]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e0ac:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	691a      	ldr	r2, [r3, #16]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f022 020f 	bic.w	r2, r2, #15
 800e0bc:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	6919      	ldr	r1, [r3, #16]
 800e0c4:	7afa      	ldrb	r2, [r7, #11]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	68da      	ldr	r2, [r3, #12]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e0dc:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68d9      	ldr	r1, [r3, #12]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	430a      	orrs	r2, r1
 800e0ec:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68da      	ldr	r2, [r3, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e0fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2220      	movs	r2, #32
 800e108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2220      	movs	r2, #32
 800e110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2200      	movs	r2, #0
 800e118:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e024      	b.n	800e180 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2224      	movs	r2, #36	@ 0x24
 800e13a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68da      	ldr	r2, [r3, #12]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e14c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7f2 fca4 	bl	8000a9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08a      	sub	sp, #40	@ 0x28
 800e1b4:	af02      	add	r7, sp, #8
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b20      	cmp	r3, #32
 800e1ce:	d175      	bne.n	800e2bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <HAL_UART_Transmit+0x2c>
 800e1d6:	88fb      	ldrh	r3, [r7, #6]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d101      	bne.n	800e1e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e06e      	b.n	800e2be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2221      	movs	r2, #33	@ 0x21
 800e1ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e1ee:	f7f2 ff2d 	bl	800104c <HAL_GetTick>
 800e1f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	88fa      	ldrh	r2, [r7, #6]
 800e1f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	88fa      	ldrh	r2, [r7, #6]
 800e1fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e208:	d108      	bne.n	800e21c <HAL_UART_Transmit+0x6c>
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d104      	bne.n	800e21c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e212:	2300      	movs	r3, #0
 800e214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	61bb      	str	r3, [r7, #24]
 800e21a:	e003      	b.n	800e224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e220:	2300      	movs	r3, #0
 800e222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e224:	e02e      	b.n	800e284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2200      	movs	r2, #0
 800e22e:	2180      	movs	r1, #128	@ 0x80
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f001 fed6 	bl	800ffe2 <UART_WaitOnFlagUntilTimeout>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d005      	beq.n	800e248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2220      	movs	r2, #32
 800e240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800e244:	2303      	movs	r3, #3
 800e246:	e03a      	b.n	800e2be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10b      	bne.n	800e266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	461a      	mov	r2, r3
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e25c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	3302      	adds	r3, #2
 800e262:	61bb      	str	r3, [r7, #24]
 800e264:	e007      	b.n	800e276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	781a      	ldrb	r2, [r3, #0]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	3301      	adds	r3, #1
 800e274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	3b01      	subs	r3, #1
 800e27e:	b29a      	uxth	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e288:	b29b      	uxth	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1cb      	bne.n	800e226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	2200      	movs	r2, #0
 800e296:	2140      	movs	r1, #64	@ 0x40
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f001 fea2 	bl	800ffe2 <UART_WaitOnFlagUntilTimeout>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d005      	beq.n	800e2b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e006      	b.n	800e2be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	e000      	b.n	800e2be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800e2bc:	2302      	movs	r3, #2
  }
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b08a      	sub	sp, #40	@ 0x28
 800e2ca:	af02      	add	r7, sp, #8
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	603b      	str	r3, [r7, #0]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b20      	cmp	r3, #32
 800e2e4:	f040 8081 	bne.w	800e3ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d002      	beq.n	800e2f4 <HAL_UART_Receive+0x2e>
 800e2ee:	88fb      	ldrh	r3, [r7, #6]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d101      	bne.n	800e2f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	e079      	b.n	800e3ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2222      	movs	r2, #34	@ 0x22
 800e302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e30c:	f7f2 fe9e 	bl	800104c <HAL_GetTick>
 800e310:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	88fa      	ldrh	r2, [r7, #6]
 800e316:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	88fa      	ldrh	r2, [r7, #6]
 800e31c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e326:	d108      	bne.n	800e33a <HAL_UART_Receive+0x74>
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d104      	bne.n	800e33a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800e330:	2300      	movs	r3, #0
 800e332:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	61bb      	str	r3, [r7, #24]
 800e338:	e003      	b.n	800e342 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e33e:	2300      	movs	r3, #0
 800e340:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e342:	e047      	b.n	800e3d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2200      	movs	r2, #0
 800e34c:	2120      	movs	r1, #32
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f001 fe47 	bl	800ffe2 <UART_WaitOnFlagUntilTimeout>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d005      	beq.n	800e366 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2220      	movs	r2, #32
 800e35e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e042      	b.n	800e3ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10c      	bne.n	800e386 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	b29b      	uxth	r3, r3
 800e374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e378:	b29a      	uxth	r2, r3
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	3302      	adds	r3, #2
 800e382:	61bb      	str	r3, [r7, #24]
 800e384:	e01f      	b.n	800e3c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e38e:	d007      	beq.n	800e3a0 <HAL_UART_Receive+0xda>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10a      	bne.n	800e3ae <HAL_UART_Receive+0xe8>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d106      	bne.n	800e3ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	701a      	strb	r2, [r3, #0]
 800e3ac:	e008      	b.n	800e3c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1b2      	bne.n	800e344 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2220      	movs	r2, #32
 800e3e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e000      	b.n	800e3ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800e3ea:	2302      	movs	r3, #2
  }
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3720      	adds	r7, #32
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	4613      	mov	r3, r2
 800e400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b20      	cmp	r3, #32
 800e40c:	d121      	bne.n	800e452 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <HAL_UART_Transmit_IT+0x26>
 800e414:	88fb      	ldrh	r3, [r7, #6]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e01a      	b.n	800e454 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	88fa      	ldrh	r2, [r7, #6]
 800e428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	88fa      	ldrh	r2, [r7, #6]
 800e42e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2221      	movs	r2, #33	@ 0x21
 800e43a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	68da      	ldr	r2, [r3, #12]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800e44c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800e44e:	2300      	movs	r3, #0
 800e450:	e000      	b.n	800e454 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800e452:	2302      	movs	r3, #2
  }
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	4613      	mov	r3, r2
 800e46c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b20      	cmp	r3, #32
 800e478:	d112      	bne.n	800e4a0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <HAL_UART_Receive_IT+0x26>
 800e480:	88fb      	ldrh	r3, [r7, #6]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e00b      	b.n	800e4a2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e490:	88fb      	ldrh	r3, [r7, #6]
 800e492:	461a      	mov	r2, r3
 800e494:	68b9      	ldr	r1, [r7, #8]
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f001 fdfc 	bl	8010094 <UART_Start_Receive_IT>
 800e49c:	4603      	mov	r3, r0
 800e49e:	e000      	b.n	800e4a2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e4a0:	2302      	movs	r3, #2
  }
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b08c      	sub	sp, #48	@ 0x30
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	60f8      	str	r0, [r7, #12]
 800e4b2:	60b9      	str	r1, [r7, #8]
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b20      	cmp	r3, #32
 800e4c2:	d156      	bne.n	800e572 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <HAL_UART_Transmit_DMA+0x26>
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e04f      	b.n	800e574 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	88fa      	ldrh	r2, [r7, #6]
 800e4de:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	88fa      	ldrh	r2, [r7, #6]
 800e4e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2221      	movs	r2, #33	@ 0x21
 800e4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f8:	4a20      	ldr	r2, [pc, #128]	@ (800e57c <HAL_UART_Transmit_DMA+0xd2>)
 800e4fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e500:	4a1f      	ldr	r2, [pc, #124]	@ (800e580 <HAL_UART_Transmit_DMA+0xd6>)
 800e502:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e508:	4a1e      	ldr	r2, [pc, #120]	@ (800e584 <HAL_UART_Transmit_DMA+0xda>)
 800e50a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e510:	2200      	movs	r2, #0
 800e512:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e514:	f107 0308 	add.w	r3, r7, #8
 800e518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e520:	6819      	ldr	r1, [r3, #0]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3304      	adds	r3, #4
 800e528:	461a      	mov	r2, r3
 800e52a:	88fb      	ldrh	r3, [r7, #6]
 800e52c:	f7f4 f865 	bl	80025fa <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e538:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3314      	adds	r3, #20
 800e540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	617b      	str	r3, [r7, #20]
   return(result);
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e550:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	3314      	adds	r3, #20
 800e558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e55a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e55c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6a39      	ldr	r1, [r7, #32]
 800e560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	61fb      	str	r3, [r7, #28]
   return(result);
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e5      	bne.n	800e53a <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800e56e:	2300      	movs	r3, #0
 800e570:	e000      	b.n	800e574 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800e572:	2302      	movs	r3, #2
  }
}
 800e574:	4618      	mov	r0, r3
 800e576:	3730      	adds	r7, #48	@ 0x30
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	0800fd31 	.word	0x0800fd31
 800e580:	0800fdcb 	.word	0x0800fdcb
 800e584:	0800ff4f 	.word	0x0800ff4f

0800e588 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	4613      	mov	r3, r2
 800e594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b20      	cmp	r3, #32
 800e5a0:	d112      	bne.n	800e5c8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <HAL_UART_Receive_DMA+0x26>
 800e5a8:	88fb      	ldrh	r3, [r7, #6]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d101      	bne.n	800e5b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e00b      	b.n	800e5ca <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e5b8:	88fb      	ldrh	r3, [r7, #6]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	68b9      	ldr	r1, [r7, #8]
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f001 fda2 	bl	8010108 <UART_Start_Receive_DMA>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	e000      	b.n	800e5ca <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e5c8:	2302      	movs	r3, #2
  }
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800e5d2:	b480      	push	{r7}
 800e5d4:	b09d      	sub	sp, #116	@ 0x74
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	695b      	ldr	r3, [r3, #20]
 800e5e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5e8:	2b80      	cmp	r3, #128	@ 0x80
 800e5ea:	bf0c      	ite	eq
 800e5ec:	2301      	moveq	r3, #1
 800e5ee:	2300      	movne	r3, #0
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	2b21      	cmp	r3, #33	@ 0x21
 800e5fe:	d11c      	bne.n	800e63a <HAL_UART_DMAPause+0x68>
 800e600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e602:	2b00      	cmp	r3, #0
 800e604:	d019      	beq.n	800e63a <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3314      	adds	r3, #20
 800e60c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e610:	e853 3f00 	ldrex	r3, [r3]
 800e614:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e61c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3314      	adds	r3, #20
 800e624:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e626:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e628:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e62c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e62e:	e841 2300 	strex	r3, r2, [r1]
 800e632:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1e5      	bne.n	800e606 <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e644:	2b40      	cmp	r3, #64	@ 0x40
 800e646:	bf0c      	ite	eq
 800e648:	2301      	moveq	r3, #1
 800e64a:	2300      	movne	r3, #0
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b22      	cmp	r3, #34	@ 0x22
 800e65a:	d150      	bne.n	800e6fe <HAL_UART_DMAPause+0x12c>
 800e65c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d04d      	beq.n	800e6fe <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	330c      	adds	r3, #12
 800e668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e66c:	e853 3f00 	ldrex	r3, [r3]
 800e670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e678:	667b      	str	r3, [r7, #100]	@ 0x64
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	330c      	adds	r3, #12
 800e680:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e682:	647a      	str	r2, [r7, #68]	@ 0x44
 800e684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e68a:	e841 2300 	strex	r3, r2, [r1]
 800e68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1e5      	bne.n	800e662 <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	3314      	adds	r3, #20
 800e69c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a0:	e853 3f00 	ldrex	r3, [r3]
 800e6a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	f023 0301 	bic.w	r3, r3, #1
 800e6ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3314      	adds	r3, #20
 800e6b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e6b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6be:	e841 2300 	strex	r3, r2, [r1]
 800e6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1e5      	bne.n	800e696 <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	3314      	adds	r3, #20
 800e6d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3314      	adds	r3, #20
 800e6e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e6ea:	61fa      	str	r2, [r7, #28]
 800e6ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	69b9      	ldr	r1, [r7, #24]
 800e6f0:	69fa      	ldr	r2, [r7, #28]
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	617b      	str	r3, [r7, #20]
   return(result);
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e5      	bne.n	800e6ca <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3774      	adds	r7, #116	@ 0x74
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b09d      	sub	sp, #116	@ 0x74
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b21      	cmp	r3, #33	@ 0x21
 800e71e:	d119      	bne.n	800e754 <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3314      	adds	r3, #20
 800e726:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e72a:	e853 3f00 	ldrex	r3, [r3]
 800e72e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e736:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3314      	adds	r3, #20
 800e73e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e740:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e742:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e744:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e746:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e748:	e841 2300 	strex	r3, r2, [r1]
 800e74c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e74e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e750:	2b00      	cmp	r3, #0
 800e752:	d1e5      	bne.n	800e720 <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b22      	cmp	r3, #34	@ 0x22
 800e75e:	d15c      	bne.n	800e81a <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800e760:	2300      	movs	r3, #0
 800e762:	60fb      	str	r3, [r7, #12]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d019      	beq.n	800e7b2 <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	330c      	adds	r3, #12
 800e784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e788:	e853 3f00 	ldrex	r3, [r3]
 800e78c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e794:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	330c      	adds	r3, #12
 800e79c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e79e:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e7a0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e7a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e7a6:	e841 2300 	strex	r3, r2, [r1]
 800e7aa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e7ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1e5      	bne.n	800e77e <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3314      	adds	r3, #20
 800e7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7bc:	e853 3f00 	ldrex	r3, [r3]
 800e7c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c4:	f043 0301 	orr.w	r3, r3, #1
 800e7c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3314      	adds	r3, #20
 800e7d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7d2:	637a      	str	r2, [r7, #52]	@ 0x34
 800e7d4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e7d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e5      	bne.n	800e7b2 <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3314      	adds	r3, #20
 800e7ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3314      	adds	r3, #20
 800e804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e806:	623a      	str	r2, [r7, #32]
 800e808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	69f9      	ldr	r1, [r7, #28]
 800e80c:	6a3a      	ldr	r2, [r7, #32]
 800e80e:	e841 2300 	strex	r3, r2, [r1]
 800e812:	61bb      	str	r3, [r7, #24]
   return(result);
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1e5      	bne.n	800e7e6 <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3774      	adds	r7, #116	@ 0x74
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b090      	sub	sp, #64	@ 0x40
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e830:	2300      	movs	r3, #0
 800e832:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	695b      	ldr	r3, [r3, #20]
 800e83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e83e:	2b80      	cmp	r3, #128	@ 0x80
 800e840:	bf0c      	ite	eq
 800e842:	2301      	moveq	r3, #1
 800e844:	2300      	movne	r3, #0
 800e846:	b2db      	uxtb	r3, r3
 800e848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e850:	b2db      	uxtb	r3, r3
 800e852:	2b21      	cmp	r3, #33	@ 0x21
 800e854:	d128      	bne.n	800e8a8 <HAL_UART_DMAStop+0x80>
 800e856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d025      	beq.n	800e8a8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	3314      	adds	r3, #20
 800e862:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e866:	e853 3f00 	ldrex	r3, [r3]
 800e86a:	623b      	str	r3, [r7, #32]
   return(result);
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e872:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	3314      	adds	r3, #20
 800e87a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e87c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e880:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e884:	e841 2300 	strex	r3, r2, [r1]
 800e888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1e5      	bne.n	800e85c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e894:	2b00      	cmp	r3, #0
 800e896:	d004      	beq.n	800e8a2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7f3 ff04 	bl	80026aa <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f001 fcca 	bl	801023c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	695b      	ldr	r3, [r3, #20]
 800e8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8b2:	2b40      	cmp	r3, #64	@ 0x40
 800e8b4:	bf0c      	ite	eq
 800e8b6:	2301      	moveq	r3, #1
 800e8b8:	2300      	movne	r3, #0
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	2b22      	cmp	r3, #34	@ 0x22
 800e8c8:	d128      	bne.n	800e91c <HAL_UART_DMAStop+0xf4>
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d025      	beq.n	800e91c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	3314      	adds	r3, #20
 800e8d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	e853 3f00 	ldrex	r3, [r3]
 800e8de:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	3314      	adds	r3, #20
 800e8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8f0:	61fa      	str	r2, [r7, #28]
 800e8f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f4:	69b9      	ldr	r1, [r7, #24]
 800e8f6:	69fa      	ldr	r2, [r7, #28]
 800e8f8:	e841 2300 	strex	r3, r2, [r1]
 800e8fc:	617b      	str	r3, [r7, #20]
   return(result);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1e5      	bne.n	800e8d0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d004      	beq.n	800e916 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e910:	4618      	mov	r0, r3
 800e912:	f7f3 feca 	bl	80026aa <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f001 fcb8 	bl	801028c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3740      	adds	r7, #64	@ 0x40
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b088      	sub	sp, #32
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	603b      	str	r3, [r7, #0]
 800e932:	4613      	mov	r3, r2
 800e934:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	2b20      	cmp	r3, #32
 800e940:	f040 80c0 	bne.w	800eac4 <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800e94a:	88fb      	ldrh	r3, [r7, #6]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e0b8      	b.n	800eac6 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2222      	movs	r2, #34	@ 0x22
 800e95e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2201      	movs	r2, #1
 800e966:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e96e:	f7f2 fb6d 	bl	800104c <HAL_GetTick>
 800e972:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	88fa      	ldrh	r2, [r7, #6]
 800e978:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	88fa      	ldrh	r2, [r7, #6]
 800e97e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e988:	d108      	bne.n	800e99c <HAL_UARTEx_ReceiveToIdle+0x76>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d104      	bne.n	800e99c <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 800e992:	2300      	movs	r3, #0
 800e994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	61bb      	str	r3, [r7, #24]
 800e99a:	e003      	b.n	800e9a4 <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e9aa:	e077      	b.n	800ea9c <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f003 0310 	and.w	r3, r3, #16
 800e9b6:	2b10      	cmp	r3, #16
 800e9b8:	d117      	bne.n	800e9ea <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	613b      	str	r3, [r7, #16]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	613b      	str	r3, [r7, #16]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	613b      	str	r3, [r7, #16]
 800e9ce:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d008      	beq.n	800e9ea <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	635a      	str	r2, [r3, #52]	@ 0x34
          huart->RxState = HAL_UART_STATE_READY;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2220      	movs	r2, #32
 800e9e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e06d      	b.n	800eac6 <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f003 0320 	and.w	r3, r3, #32
 800e9f4:	2b20      	cmp	r3, #32
 800e9f6:	d13c      	bne.n	800ea72 <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d10c      	bne.n	800ea18 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	3302      	adds	r3, #2
 800ea14:	61bb      	str	r3, [r7, #24]
 800ea16:	e01f      	b.n	800ea58 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea20:	d007      	beq.n	800ea32 <HAL_UARTEx_ReceiveToIdle+0x10c>
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10a      	bne.n	800ea40 <HAL_UARTEx_ReceiveToIdle+0x11a>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d106      	bne.n	800ea40 <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	701a      	strb	r2, [r3, #0]
 800ea3e:	e008      	b.n	800ea52 <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	3301      	adds	r3, #1
 800ea56:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	881b      	ldrh	r3, [r3, #0]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	3b01      	subs	r3, #1
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	85da      	strh	r2, [r3, #46]	@ 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ea72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea78:	d010      	beq.n	800ea9c <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ea7a:	f7f2 fae7 	bl	800104c <HAL_GetTick>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d302      	bcc.n	800ea90 <HAL_UARTEx_ReceiveToIdle+0x16a>
 800ea8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d105      	bne.n	800ea9c <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2220      	movs	r2, #32
 800ea94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          return HAL_TIMEOUT;
 800ea98:	2303      	movs	r3, #3
 800ea9a:	e014      	b.n	800eac6 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eaa0:	b29b      	uxth	r3, r3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d182      	bne.n	800e9ac <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2220      	movs	r2, #32
 800eabc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800eac0:	2300      	movs	r3, #0
 800eac2:	e000      	b.n	800eac6 <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800eac4:	2302      	movs	r3, #2
  }
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3720      	adds	r7, #32
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b08c      	sub	sp, #48	@ 0x30
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	60b9      	str	r1, [r7, #8]
 800ead8:	4613      	mov	r3, r2
 800eada:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	2b20      	cmp	r3, #32
 800eae6:	d14a      	bne.n	800eb7e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800eaee:	88fb      	ldrh	r3, [r7, #6]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e043      	b.n	800eb80 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2201      	movs	r2, #1
 800eafc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800eb04:	88fb      	ldrh	r3, [r7, #6]
 800eb06:	461a      	mov	r2, r3
 800eb08:	68b9      	ldr	r1, [r7, #8]
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f001 fac2 	bl	8010094 <UART_Start_Receive_IT>
 800eb10:	4603      	mov	r3, r0
 800eb12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800eb16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d12c      	bne.n	800eb78 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d125      	bne.n	800eb72 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800eb26:	2300      	movs	r3, #0
 800eb28:	613b      	str	r3, [r7, #16]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	613b      	str	r3, [r7, #16]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	613b      	str	r3, [r7, #16]
 800eb3a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	330c      	adds	r3, #12
 800eb42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	e853 3f00 	ldrex	r3, [r3]
 800eb4a:	617b      	str	r3, [r7, #20]
   return(result);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	f043 0310 	orr.w	r3, r3, #16
 800eb52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	330c      	adds	r3, #12
 800eb5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb5c:	627a      	str	r2, [r7, #36]	@ 0x24
 800eb5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb60:	6a39      	ldr	r1, [r7, #32]
 800eb62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb64:	e841 2300 	strex	r3, r2, [r1]
 800eb68:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1e5      	bne.n	800eb3c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800eb70:	e002      	b.n	800eb78 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800eb78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb7c:	e000      	b.n	800eb80 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800eb7e:	2302      	movs	r3, #2
  }
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3730      	adds	r7, #48	@ 0x30
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08c      	sub	sp, #48	@ 0x30
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	4613      	mov	r3, r2
 800eb94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b20      	cmp	r3, #32
 800eba0:	d14a      	bne.n	800ec38 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d002      	beq.n	800ebae <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800eba8:	88fb      	ldrh	r3, [r7, #6]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d101      	bne.n	800ebb2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ebae:	2301      	movs	r3, #1
 800ebb0:	e043      	b.n	800ec3a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ebbe:	88fb      	ldrh	r3, [r7, #6]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	68b9      	ldr	r1, [r7, #8]
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f001 fa9f 	bl	8010108 <UART_Start_Receive_DMA>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ebd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d12c      	bne.n	800ec32 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d125      	bne.n	800ec2c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	613b      	str	r3, [r7, #16]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	613b      	str	r3, [r7, #16]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	613b      	str	r3, [r7, #16]
 800ebf4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	330c      	adds	r3, #12
 800ebfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	e853 3f00 	ldrex	r3, [r3]
 800ec04:	617b      	str	r3, [r7, #20]
   return(result);
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	f043 0310 	orr.w	r3, r3, #16
 800ec0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	330c      	adds	r3, #12
 800ec14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec16:	627a      	str	r2, [r7, #36]	@ 0x24
 800ec18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6a39      	ldr	r1, [r7, #32]
 800ec1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e5      	bne.n	800ebf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800ec2a:	e002      	b.n	800ec32 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ec32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ec36:	e000      	b.n	800ec3a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800ec38:	2302      	movs	r3, #2
  }
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3730      	adds	r7, #48	@ 0x30
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 800ec42:	b480      	push	{r7}
 800ec44:	b083      	sub	sp, #12
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	370c      	adds	r7, #12
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b0a0      	sub	sp, #128	@ 0x80
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	330c      	adds	r3, #12
 800ec68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec6c:	e853 3f00 	ldrex	r3, [r3]
 800ec70:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ec72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec74:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ec78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	330c      	adds	r3, #12
 800ec80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ec82:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ec84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec86:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ec88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ec8a:	e841 2300 	strex	r3, r2, [r1]
 800ec8e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ec90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1e5      	bne.n	800ec62 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	3314      	adds	r3, #20
 800ec9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eca0:	e853 3f00 	ldrex	r3, [r3]
 800eca4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca8:	f023 0301 	bic.w	r3, r3, #1
 800ecac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3314      	adds	r3, #20
 800ecb4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ecb6:	657a      	str	r2, [r7, #84]	@ 0x54
 800ecb8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ecbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ecbe:	e841 2300 	strex	r3, r2, [r1]
 800ecc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ecc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1e5      	bne.n	800ec96 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d119      	bne.n	800ed06 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	330c      	adds	r3, #12
 800ecd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecdc:	e853 3f00 	ldrex	r3, [r3]
 800ece0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ece2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece4:	f023 0310 	bic.w	r3, r3, #16
 800ece8:	677b      	str	r3, [r7, #116]	@ 0x74
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	330c      	adds	r3, #12
 800ecf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ecf2:	643a      	str	r2, [r7, #64]	@ 0x40
 800ecf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecfa:	e841 2300 	strex	r3, r2, [r1]
 800ecfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1e5      	bne.n	800ecd2 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	695b      	ldr	r3, [r3, #20]
 800ed0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed10:	2b80      	cmp	r3, #128	@ 0x80
 800ed12:	d136      	bne.n	800ed82 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	3314      	adds	r3, #20
 800ed1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed1c:	6a3b      	ldr	r3, [r7, #32]
 800ed1e:	e853 3f00 	ldrex	r3, [r3]
 800ed22:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed2a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3314      	adds	r3, #20
 800ed32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ed34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed3c:	e841 2300 	strex	r3, r2, [r1]
 800ed40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1e5      	bne.n	800ed14 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d018      	beq.n	800ed82 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed54:	2200      	movs	r2, #0
 800ed56:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7f3 fca4 	bl	80026aa <HAL_DMA_Abort>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00c      	beq.n	800ed82 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7f4 f862 	bl	8002e36 <HAL_DMA_GetError>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b20      	cmp	r3, #32
 800ed76:	d104      	bne.n	800ed82 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2210      	movs	r2, #16
 800ed7c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800ed7e:	2303      	movs	r3, #3
 800ed80:	e052      	b.n	800ee28 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed8c:	2b40      	cmp	r3, #64	@ 0x40
 800ed8e:	d136      	bne.n	800edfe <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3314      	adds	r3, #20
 800ed96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	e853 3f00 	ldrex	r3, [r3]
 800ed9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eda6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	3314      	adds	r3, #20
 800edae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800edb0:	61ba      	str	r2, [r7, #24]
 800edb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb4:	6979      	ldr	r1, [r7, #20]
 800edb6:	69ba      	ldr	r2, [r7, #24]
 800edb8:	e841 2300 	strex	r3, r2, [r1]
 800edbc:	613b      	str	r3, [r7, #16]
   return(result);
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d1e5      	bne.n	800ed90 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d018      	beq.n	800edfe <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edd0:	2200      	movs	r2, #0
 800edd2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edd8:	4618      	mov	r0, r3
 800edda:	f7f3 fc66 	bl	80026aa <HAL_DMA_Abort>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00c      	beq.n	800edfe <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ede8:	4618      	mov	r0, r3
 800edea:	f7f4 f824 	bl	8002e36 <HAL_DMA_GetError>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	d104      	bne.n	800edfe <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2210      	movs	r2, #16
 800edf8:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800edfa:	2303      	movs	r3, #3
 800edfc:	e014      	b.n	800ee28 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2200      	movs	r2, #0
 800ee08:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2220      	movs	r2, #32
 800ee14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2220      	movs	r2, #32
 800ee1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800ee26:	2300      	movs	r3, #0
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3780      	adds	r7, #128	@ 0x80
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b08e      	sub	sp, #56	@ 0x38
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	330c      	adds	r3, #12
 800ee3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ee4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	330c      	adds	r3, #12
 800ee56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e5      	bne.n	800ee38 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	695b      	ldr	r3, [r3, #20]
 800ee72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee76:	2b80      	cmp	r3, #128	@ 0x80
 800ee78:	d136      	bne.n	800eee8 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	3314      	adds	r3, #20
 800ee80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	e853 3f00 	ldrex	r3, [r3]
 800ee88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee90:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	3314      	adds	r3, #20
 800ee98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee9a:	61ba      	str	r2, [r7, #24]
 800ee9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee9e:	6979      	ldr	r1, [r7, #20]
 800eea0:	69ba      	ldr	r2, [r7, #24]
 800eea2:	e841 2300 	strex	r3, r2, [r1]
 800eea6:	613b      	str	r3, [r7, #16]
   return(result);
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1e5      	bne.n	800ee7a <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d018      	beq.n	800eee8 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeba:	2200      	movs	r2, #0
 800eebc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7f3 fbf1 	bl	80026aa <HAL_DMA_Abort>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00c      	beq.n	800eee8 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7f3 ffaf 	bl	8002e36 <HAL_DMA_GetError>
 800eed8:	4603      	mov	r3, r0
 800eeda:	2b20      	cmp	r3, #32
 800eedc:	d104      	bne.n	800eee8 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2210      	movs	r2, #16
 800eee2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800eee4:	2303      	movs	r3, #3
 800eee6:	e007      	b.n	800eef8 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2220      	movs	r2, #32
 800eef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3738      	adds	r7, #56	@ 0x38
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b09a      	sub	sp, #104	@ 0x68
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	330c      	adds	r3, #12
 800ef0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef12:	e853 3f00 	ldrex	r3, [r3]
 800ef16:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ef18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ef1e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	330c      	adds	r3, #12
 800ef26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ef28:	657a      	str	r2, [r7, #84]	@ 0x54
 800ef2a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ef2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef30:	e841 2300 	strex	r3, r2, [r1]
 800ef34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ef36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d1e5      	bne.n	800ef08 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	3314      	adds	r3, #20
 800ef42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef46:	e853 3f00 	ldrex	r3, [r3]
 800ef4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ef4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4e:	f023 0301 	bic.w	r3, r3, #1
 800ef52:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	3314      	adds	r3, #20
 800ef5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ef5c:	643a      	str	r2, [r7, #64]	@ 0x40
 800ef5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef64:	e841 2300 	strex	r3, r2, [r1]
 800ef68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1e5      	bne.n	800ef3c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d119      	bne.n	800efac <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	330c      	adds	r3, #12
 800ef7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef80:	6a3b      	ldr	r3, [r7, #32]
 800ef82:	e853 3f00 	ldrex	r3, [r3]
 800ef86:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	f023 0310 	bic.w	r3, r3, #16
 800ef8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	330c      	adds	r3, #12
 800ef96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ef98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800efa0:	e841 2300 	strex	r3, r2, [r1]
 800efa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800efa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1e5      	bne.n	800ef78 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	695b      	ldr	r3, [r3, #20]
 800efb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efb6:	2b40      	cmp	r3, #64	@ 0x40
 800efb8:	d136      	bne.n	800f028 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3314      	adds	r3, #20
 800efc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	e853 3f00 	ldrex	r3, [r3]
 800efc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3314      	adds	r3, #20
 800efd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efda:	61ba      	str	r2, [r7, #24]
 800efdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efde:	6979      	ldr	r1, [r7, #20]
 800efe0:	69ba      	ldr	r2, [r7, #24]
 800efe2:	e841 2300 	strex	r3, r2, [r1]
 800efe6:	613b      	str	r3, [r7, #16]
   return(result);
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1e5      	bne.n	800efba <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d018      	beq.n	800f028 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800effa:	2200      	movs	r2, #0
 800effc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f002:	4618      	mov	r0, r3
 800f004:	f7f3 fb51 	bl	80026aa <HAL_DMA_Abort>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00c      	beq.n	800f028 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f012:	4618      	mov	r0, r3
 800f014:	f7f3 ff0f 	bl	8002e36 <HAL_DMA_GetError>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b20      	cmp	r3, #32
 800f01c:	d104      	bne.n	800f028 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2210      	movs	r2, #16
 800f022:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800f024:	2303      	movs	r3, #3
 800f026:	e00a      	b.n	800f03e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2200      	movs	r2, #0
 800f02c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2220      	movs	r2, #32
 800f032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3768      	adds	r7, #104	@ 0x68
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b0a2      	sub	sp, #136	@ 0x88
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800f04e:	2301      	movs	r3, #1
 800f050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	330c      	adds	r3, #12
 800f05a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f05e:	e853 3f00 	ldrex	r3, [r3]
 800f062:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f066:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f06a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	330c      	adds	r3, #12
 800f074:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f078:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f07a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f07e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f080:	e841 2300 	strex	r3, r2, [r1]
 800f084:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1e3      	bne.n	800f054 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3314      	adds	r3, #20
 800f092:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f096:	e853 3f00 	ldrex	r3, [r3]
 800f09a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f09c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f09e:	f023 0301 	bic.w	r3, r3, #1
 800f0a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3314      	adds	r3, #20
 800f0aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f0ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f0ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f0b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f0ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e5      	bne.n	800f08c <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d119      	bne.n	800f0fc <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	330c      	adds	r3, #12
 800f0ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d2:	e853 3f00 	ldrex	r3, [r3]
 800f0d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0da:	f023 0310 	bic.w	r3, r3, #16
 800f0de:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	330c      	adds	r3, #12
 800f0e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f0e8:	647a      	str	r2, [r7, #68]	@ 0x44
 800f0ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0f0:	e841 2300 	strex	r3, r2, [r1]
 800f0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1e5      	bne.n	800f0c8 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00f      	beq.n	800f124 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	695b      	ldr	r3, [r3, #20]
 800f10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f10e:	2b80      	cmp	r3, #128	@ 0x80
 800f110:	d104      	bne.n	800f11c <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f116:	4a54      	ldr	r2, [pc, #336]	@ (800f268 <HAL_UART_Abort_IT+0x222>)
 800f118:	651a      	str	r2, [r3, #80]	@ 0x50
 800f11a:	e003      	b.n	800f124 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f120:	2200      	movs	r2, #0
 800f122:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00f      	beq.n	800f14c <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f136:	2b40      	cmp	r3, #64	@ 0x40
 800f138:	d104      	bne.n	800f144 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f13e:	4a4b      	ldr	r2, [pc, #300]	@ (800f26c <HAL_UART_Abort_IT+0x226>)
 800f140:	651a      	str	r2, [r3, #80]	@ 0x50
 800f142:	e003      	b.n	800f14c <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f148:	2200      	movs	r2, #0
 800f14a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	695b      	ldr	r3, [r3, #20]
 800f152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f156:	2b80      	cmp	r3, #128	@ 0x80
 800f158:	d12d      	bne.n	800f1b6 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	3314      	adds	r3, #20
 800f160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f164:	e853 3f00 	ldrex	r3, [r3]
 800f168:	623b      	str	r3, [r7, #32]
   return(result);
 800f16a:	6a3b      	ldr	r3, [r7, #32]
 800f16c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f170:	677b      	str	r3, [r7, #116]	@ 0x74
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	3314      	adds	r3, #20
 800f178:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f17a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f17c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f17e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f182:	e841 2300 	strex	r3, r2, [r1]
 800f186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d1e5      	bne.n	800f15a <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00f      	beq.n	800f1b6 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f3 faf5 	bl	800278a <HAL_DMA_Abort_IT>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	651a      	str	r2, [r3, #80]	@ 0x50
 800f1ae:	e002      	b.n	800f1b6 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1c0:	2b40      	cmp	r3, #64	@ 0x40
 800f1c2:	d130      	bne.n	800f226 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3314      	adds	r3, #20
 800f1ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	e853 3f00 	ldrex	r3, [r3]
 800f1d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1da:	673b      	str	r3, [r7, #112]	@ 0x70
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	3314      	adds	r3, #20
 800f1e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f1e4:	61fa      	str	r2, [r7, #28]
 800f1e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e8:	69b9      	ldr	r1, [r7, #24]
 800f1ea:	69fa      	ldr	r2, [r7, #28]
 800f1ec:	e841 2300 	strex	r3, r2, [r1]
 800f1f0:	617b      	str	r3, [r7, #20]
   return(result);
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d1e5      	bne.n	800f1c4 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d012      	beq.n	800f226 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f204:	4618      	mov	r0, r3
 800f206:	f7f3 fac0 	bl	800278a <HAL_DMA_Abort_IT>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f214:	2200      	movs	r2, #0
 800f216:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 800f218:	2301      	movs	r3, #1
 800f21a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f21e:	e002      	b.n	800f226 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800f220:	2300      	movs	r3, #0
 800f222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800f226:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d116      	bne.n	800f25c <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2200      	movs	r2, #0
 800f232:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2220      	movs	r2, #32
 800f244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2220      	movs	r2, #32
 800f24c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fbf4 	bl	800fa44 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3788      	adds	r7, #136	@ 0x88
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	0801037b 	.word	0x0801037b
 800f26c:	080103db 	.word	0x080103db

0800f270 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b08e      	sub	sp, #56	@ 0x38
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	330c      	adds	r3, #12
 800f27e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	e853 3f00 	ldrex	r3, [r3]
 800f286:	61fb      	str	r3, [r7, #28]
   return(result);
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f28e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	330c      	adds	r3, #12
 800f296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f29a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f29c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2a0:	e841 2300 	strex	r3, r2, [r1]
 800f2a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1e5      	bne.n	800f278 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	695b      	ldr	r3, [r3, #20]
 800f2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2b6:	2b80      	cmp	r3, #128	@ 0x80
 800f2b8:	d13c      	bne.n	800f334 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3314      	adds	r3, #20
 800f2c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	e853 3f00 	ldrex	r3, [r3]
 800f2c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	3314      	adds	r3, #20
 800f2d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2da:	61ba      	str	r2, [r7, #24]
 800f2dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2de:	6979      	ldr	r1, [r7, #20]
 800f2e0:	69ba      	ldr	r2, [r7, #24]
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e5      	bne.n	800f2ba <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d013      	beq.n	800f31e <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2fa:	4a16      	ldr	r2, [pc, #88]	@ (800f354 <HAL_UART_AbortTransmit_IT+0xe4>)
 800f2fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f302:	4618      	mov	r0, r3
 800f304:	f7f3 fa41 	bl	800278a <HAL_DMA_Abort_IT>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d01c      	beq.n	800f348 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f318:	4610      	mov	r0, r2
 800f31a:	4798      	blx	r3
 800f31c:	e014      	b.n	800f348 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	84da      	strh	r2, [r3, #38]	@ 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2220      	movs	r2, #32
 800f328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 fb93 	bl	800fa58 <HAL_UART_AbortTransmitCpltCallback>
 800f332:	e009      	b.n	800f348 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2220      	movs	r2, #32
 800f33e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fb88 	bl	800fa58 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3738      	adds	r7, #56	@ 0x38
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	0801043b 	.word	0x0801043b

0800f358 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b09a      	sub	sp, #104	@ 0x68
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	330c      	adds	r3, #12
 800f366:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f36a:	e853 3f00 	ldrex	r3, [r3]
 800f36e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f376:	667b      	str	r3, [r7, #100]	@ 0x64
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	330c      	adds	r3, #12
 800f37e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f380:	657a      	str	r2, [r7, #84]	@ 0x54
 800f382:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f384:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f386:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f388:	e841 2300 	strex	r3, r2, [r1]
 800f38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f38e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1e5      	bne.n	800f360 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3314      	adds	r3, #20
 800f39a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f39e:	e853 3f00 	ldrex	r3, [r3]
 800f3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a6:	f023 0301 	bic.w	r3, r3, #1
 800f3aa:	663b      	str	r3, [r7, #96]	@ 0x60
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	3314      	adds	r3, #20
 800f3b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f3b4:	643a      	str	r2, [r7, #64]	@ 0x40
 800f3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f3ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f3bc:	e841 2300 	strex	r3, r2, [r1]
 800f3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1e5      	bne.n	800f394 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d119      	bne.n	800f404 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	330c      	adds	r3, #12
 800f3d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	e853 3f00 	ldrex	r3, [r3]
 800f3de:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	f023 0310 	bic.w	r3, r3, #16
 800f3e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	330c      	adds	r3, #12
 800f3ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3f8:	e841 2300 	strex	r3, r2, [r1]
 800f3fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1e5      	bne.n	800f3d0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f40e:	2b40      	cmp	r3, #64	@ 0x40
 800f410:	d13f      	bne.n	800f492 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3314      	adds	r3, #20
 800f418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	e853 3f00 	ldrex	r3, [r3]
 800f420:	60bb      	str	r3, [r7, #8]
   return(result);
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f428:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3314      	adds	r3, #20
 800f430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f432:	61ba      	str	r2, [r7, #24]
 800f434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f436:	6979      	ldr	r1, [r7, #20]
 800f438:	69ba      	ldr	r2, [r7, #24]
 800f43a:	e841 2300 	strex	r3, r2, [r1]
 800f43e:	613b      	str	r3, [r7, #16]
   return(result);
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e5      	bne.n	800f412 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d013      	beq.n	800f476 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f452:	4a19      	ldr	r2, [pc, #100]	@ (800f4b8 <HAL_UART_AbortReceive_IT+0x160>)
 800f454:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7f3 f995 	bl	800278a <HAL_DMA_Abort_IT>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d022      	beq.n	800f4ac <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f470:	4610      	mov	r0, r2
 800f472:	4798      	blx	r3
 800f474:	e01a      	b.n	800f4ac <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2200      	movs	r2, #0
 800f47a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2220      	movs	r2, #32
 800f480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f000 faee 	bl	800fa6c <HAL_UART_AbortReceiveCpltCallback>
 800f490:	e00c      	b.n	800f4ac <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2220      	movs	r2, #32
 800f49c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fae0 	bl	800fa6c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3768      	adds	r7, #104	@ 0x68
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	08010465 	.word	0x08010465

0800f4bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b0ba      	sub	sp, #232	@ 0xe8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	695b      	ldr	r3, [r3, #20]
 800f4de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4f2:	f003 030f 	and.w	r3, r3, #15
 800f4f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f4fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d10f      	bne.n	800f522 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f506:	f003 0320 	and.w	r3, r3, #32
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d009      	beq.n	800f522 <HAL_UART_IRQHandler+0x66>
 800f50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f512:	f003 0320 	and.w	r3, r3, #32
 800f516:	2b00      	cmp	r3, #0
 800f518:	d003      	beq.n	800f522 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f001 f822 	bl	8010564 <UART_Receive_IT>
      return;
 800f520:	e25b      	b.n	800f9da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f526:	2b00      	cmp	r3, #0
 800f528:	f000 80de 	beq.w	800f6e8 <HAL_UART_IRQHandler+0x22c>
 800f52c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f530:	f003 0301 	and.w	r3, r3, #1
 800f534:	2b00      	cmp	r3, #0
 800f536:	d106      	bne.n	800f546 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f53c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f540:	2b00      	cmp	r3, #0
 800f542:	f000 80d1 	beq.w	800f6e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f54a:	f003 0301 	and.w	r3, r3, #1
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d00b      	beq.n	800f56a <HAL_UART_IRQHandler+0xae>
 800f552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d005      	beq.n	800f56a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f562:	f043 0201 	orr.w	r2, r3, #1
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f56e:	f003 0304 	and.w	r3, r3, #4
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00b      	beq.n	800f58e <HAL_UART_IRQHandler+0xd2>
 800f576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f57a:	f003 0301 	and.w	r3, r3, #1
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d005      	beq.n	800f58e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f586:	f043 0202 	orr.w	r2, r3, #2
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f592:	f003 0302 	and.w	r3, r3, #2
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00b      	beq.n	800f5b2 <HAL_UART_IRQHandler+0xf6>
 800f59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f59e:	f003 0301 	and.w	r3, r3, #1
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d005      	beq.n	800f5b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5aa:	f043 0204 	orr.w	r2, r3, #4
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5b6:	f003 0308 	and.w	r3, r3, #8
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d011      	beq.n	800f5e2 <HAL_UART_IRQHandler+0x126>
 800f5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5c2:	f003 0320 	and.w	r3, r3, #32
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d105      	bne.n	800f5d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f5ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f5ce:	f003 0301 	and.w	r3, r3, #1
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d005      	beq.n	800f5e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5da:	f043 0208 	orr.w	r2, r3, #8
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f000 81f2 	beq.w	800f9d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5f0:	f003 0320 	and.w	r3, r3, #32
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d008      	beq.n	800f60a <HAL_UART_IRQHandler+0x14e>
 800f5f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5fc:	f003 0320 	and.w	r3, r3, #32
 800f600:	2b00      	cmp	r3, #0
 800f602:	d002      	beq.n	800f60a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 ffad 	bl	8010564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	695b      	ldr	r3, [r3, #20]
 800f610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f614:	2b40      	cmp	r3, #64	@ 0x40
 800f616:	bf0c      	ite	eq
 800f618:	2301      	moveq	r3, #1
 800f61a:	2300      	movne	r3, #0
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f626:	f003 0308 	and.w	r3, r3, #8
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d103      	bne.n	800f636 <HAL_UART_IRQHandler+0x17a>
 800f62e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f632:	2b00      	cmp	r3, #0
 800f634:	d04f      	beq.n	800f6d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 fe28 	bl	801028c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	695b      	ldr	r3, [r3, #20]
 800f642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f646:	2b40      	cmp	r3, #64	@ 0x40
 800f648:	d141      	bne.n	800f6ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3314      	adds	r3, #20
 800f650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f654:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f658:	e853 3f00 	ldrex	r3, [r3]
 800f65c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	3314      	adds	r3, #20
 800f672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f676:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f67a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f67e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f686:	e841 2300 	strex	r3, r2, [r1]
 800f68a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f68e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1d9      	bne.n	800f64a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d013      	beq.n	800f6c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6a2:	4a7e      	ldr	r2, [pc, #504]	@ (800f89c <HAL_UART_IRQHandler+0x3e0>)
 800f6a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f3 f86d 	bl	800278a <HAL_DMA_Abort_IT>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d016      	beq.n	800f6e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6c4:	e00e      	b.n	800f6e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 f9b2 	bl	800fa30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6cc:	e00a      	b.n	800f6e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f9ae 	bl	800fa30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6d4:	e006      	b.n	800f6e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 f9aa 	bl	800fa30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f6e2:	e175      	b.n	800f9d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6e4:	bf00      	nop
    return;
 800f6e6:	e173      	b.n	800f9d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	f040 814f 	bne.w	800f990 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6f6:	f003 0310 	and.w	r3, r3, #16
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f000 8148 	beq.w	800f990 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f704:	f003 0310 	and.w	r3, r3, #16
 800f708:	2b00      	cmp	r3, #0
 800f70a:	f000 8141 	beq.w	800f990 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f70e:	2300      	movs	r3, #0
 800f710:	60bb      	str	r3, [r7, #8]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	60bb      	str	r3, [r7, #8]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	60bb      	str	r3, [r7, #8]
 800f722:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	695b      	ldr	r3, [r3, #20]
 800f72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f72e:	2b40      	cmp	r3, #64	@ 0x40
 800f730:	f040 80b6 	bne.w	800f8a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 8145 	beq.w	800f9d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f74e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f752:	429a      	cmp	r2, r3
 800f754:	f080 813e 	bcs.w	800f9d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f75e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f764:	69db      	ldr	r3, [r3, #28]
 800f766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f76a:	f000 8088 	beq.w	800f87e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	330c      	adds	r3, #12
 800f774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f77c:	e853 3f00 	ldrex	r3, [r3]
 800f780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f78c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	330c      	adds	r3, #12
 800f796:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f79a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f79e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f7a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f7aa:	e841 2300 	strex	r3, r2, [r1]
 800f7ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f7b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1d9      	bne.n	800f76e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3314      	adds	r3, #20
 800f7c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f7c4:	e853 3f00 	ldrex	r3, [r3]
 800f7c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f7ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f7cc:	f023 0301 	bic.w	r3, r3, #1
 800f7d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3314      	adds	r3, #20
 800f7da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f7de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f7e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f7e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f7ea:	e841 2300 	strex	r3, r2, [r1]
 800f7ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f7f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1e1      	bne.n	800f7ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3314      	adds	r3, #20
 800f7fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f800:	e853 3f00 	ldrex	r3, [r3]
 800f804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f80c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	3314      	adds	r3, #20
 800f816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f81a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f81c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f822:	e841 2300 	strex	r3, r2, [r1]
 800f826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1e3      	bne.n	800f7f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2220      	movs	r2, #32
 800f832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	330c      	adds	r3, #12
 800f842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f846:	e853 3f00 	ldrex	r3, [r3]
 800f84a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f84c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f84e:	f023 0310 	bic.w	r3, r3, #16
 800f852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	330c      	adds	r3, #12
 800f85c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f860:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f862:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f868:	e841 2300 	strex	r3, r2, [r1]
 800f86c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f86e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f870:	2b00      	cmp	r3, #0
 800f872:	d1e3      	bne.n	800f83c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f2 ff16 	bl	80026aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2202      	movs	r2, #2
 800f882:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	b29b      	uxth	r3, r3
 800f892:	4619      	mov	r1, r3
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	f000 f8f3 	bl	800fa80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f89a:	e09b      	b.n	800f9d4 <HAL_UART_IRQHandler+0x518>
 800f89c:	08010353 	.word	0x08010353
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	1ad3      	subs	r3, r2, r3
 800f8ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8b4:	b29b      	uxth	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f000 808e 	beq.w	800f9d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f8bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f000 8089 	beq.w	800f9d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	330c      	adds	r3, #12
 800f8cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d0:	e853 3f00 	ldrex	r3, [r3]
 800f8d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	330c      	adds	r3, #12
 800f8e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f8ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800f8ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f8f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8f2:	e841 2300 	strex	r3, r2, [r1]
 800f8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d1e3      	bne.n	800f8c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3314      	adds	r3, #20
 800f904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f908:	e853 3f00 	ldrex	r3, [r3]
 800f90c:	623b      	str	r3, [r7, #32]
   return(result);
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	f023 0301 	bic.w	r3, r3, #1
 800f914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3314      	adds	r3, #20
 800f91e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f922:	633a      	str	r2, [r7, #48]	@ 0x30
 800f924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f92a:	e841 2300 	strex	r3, r2, [r1]
 800f92e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1e3      	bne.n	800f8fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2220      	movs	r2, #32
 800f93a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	330c      	adds	r3, #12
 800f94a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	e853 3f00 	ldrex	r3, [r3]
 800f952:	60fb      	str	r3, [r7, #12]
   return(result);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	f023 0310 	bic.w	r3, r3, #16
 800f95a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	330c      	adds	r3, #12
 800f964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f968:	61fa      	str	r2, [r7, #28]
 800f96a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96c:	69b9      	ldr	r1, [r7, #24]
 800f96e:	69fa      	ldr	r2, [r7, #28]
 800f970:	e841 2300 	strex	r3, r2, [r1]
 800f974:	617b      	str	r3, [r7, #20]
   return(result);
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1e3      	bne.n	800f944 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2202      	movs	r2, #2
 800f980:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f982:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f986:	4619      	mov	r1, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f879 	bl	800fa80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f98e:	e023      	b.n	800f9d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d009      	beq.n	800f9b0 <HAL_UART_IRQHandler+0x4f4>
 800f99c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d003      	beq.n	800f9b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fd73 	bl	8010494 <UART_Transmit_IT>
    return;
 800f9ae:	e014      	b.n	800f9da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f9b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00e      	beq.n	800f9da <HAL_UART_IRQHandler+0x51e>
 800f9bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d008      	beq.n	800f9da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fdb3 	bl	8010534 <UART_EndTransmit_IT>
    return;
 800f9ce:	e004      	b.n	800f9da <HAL_UART_IRQHandler+0x51e>
    return;
 800f9d0:	bf00      	nop
 800f9d2:	e002      	b.n	800f9da <HAL_UART_IRQHandler+0x51e>
      return;
 800f9d4:	bf00      	nop
 800f9d6:	e000      	b.n	800f9da <HAL_UART_IRQHandler+0x51e>
      return;
 800f9d8:	bf00      	nop
  }
}
 800f9da:	37e8      	adds	r7, #232	@ 0xe8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f9e8:	bf00      	nop
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f9fc:	bf00      	nop
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fa38:	bf00      	nop
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b089      	sub	sp, #36	@ 0x24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	d101      	bne.n	800faae <HAL_LIN_SendBreak+0x16>
 800faaa:	2302      	movs	r3, #2
 800faac:	e02a      	b.n	800fb04 <HAL_LIN_SendBreak+0x6c>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2201      	movs	r2, #1
 800fab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2224      	movs	r2, #36	@ 0x24
 800faba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	330c      	adds	r3, #12
 800fac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	e853 3f00 	ldrex	r3, [r3]
 800facc:	60bb      	str	r3, [r7, #8]
   return(result);
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f043 0301 	orr.w	r3, r3, #1
 800fad4:	61fb      	str	r3, [r7, #28]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	330c      	adds	r3, #12
 800fadc:	69fa      	ldr	r2, [r7, #28]
 800fade:	61ba      	str	r2, [r7, #24]
 800fae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae2:	6979      	ldr	r1, [r7, #20]
 800fae4:	69ba      	ldr	r2, [r7, #24]
 800fae6:	e841 2300 	strex	r3, r2, [r1]
 800faea:	613b      	str	r3, [r7, #16]
   return(result);
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d1e5      	bne.n	800fabe <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2220      	movs	r2, #32
 800faf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3724      	adds	r7, #36	@ 0x24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b089      	sub	sp, #36	@ 0x24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d101      	bne.n	800fb26 <HAL_MultiProcessor_EnterMuteMode+0x16>
 800fb22:	2302      	movs	r3, #2
 800fb24:	e02d      	b.n	800fb82 <HAL_MultiProcessor_EnterMuteMode+0x72>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2224      	movs	r2, #36	@ 0x24
 800fb32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	330c      	adds	r3, #12
 800fb3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	e853 3f00 	ldrex	r3, [r3]
 800fb44:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	f043 0302 	orr.w	r3, r3, #2
 800fb4c:	61fb      	str	r3, [r7, #28]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	330c      	adds	r3, #12
 800fb54:	69fa      	ldr	r2, [r7, #28]
 800fb56:	61ba      	str	r2, [r7, #24]
 800fb58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb5a:	6979      	ldr	r1, [r7, #20]
 800fb5c:	69ba      	ldr	r2, [r7, #24]
 800fb5e:	e841 2300 	strex	r3, r2, [r1]
 800fb62:	613b      	str	r3, [r7, #16]
   return(result);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1e5      	bne.n	800fb36 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2220      	movs	r2, #32
 800fb6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3724      	adds	r7, #36	@ 0x24
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b089      	sub	sp, #36	@ 0x24
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d101      	bne.n	800fba4 <HAL_MultiProcessor_ExitMuteMode+0x16>
 800fba0:	2302      	movs	r3, #2
 800fba2:	e02d      	b.n	800fc00 <HAL_MultiProcessor_ExitMuteMode+0x72>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2224      	movs	r2, #36	@ 0x24
 800fbb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	330c      	adds	r3, #12
 800fbba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	e853 3f00 	ldrex	r3, [r3]
 800fbc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	f023 0302 	bic.w	r3, r3, #2
 800fbca:	61fb      	str	r3, [r7, #28]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	330c      	adds	r3, #12
 800fbd2:	69fa      	ldr	r2, [r7, #28]
 800fbd4:	61ba      	str	r2, [r7, #24]
 800fbd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd8:	6979      	ldr	r1, [r7, #20]
 800fbda:	69ba      	ldr	r2, [r7, #24]
 800fbdc:	e841 2300 	strex	r3, r2, [r1]
 800fbe0:	613b      	str	r3, [r7, #16]
   return(result);
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1e5      	bne.n	800fbb4 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3724      	adds	r7, #36	@ 0x24
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800fc14:	2300      	movs	r3, #0
 800fc16:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d101      	bne.n	800fc26 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800fc22:	2302      	movs	r3, #2
 800fc24:	e020      	b.n	800fc68 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2224      	movs	r2, #36	@ 0x24
 800fc32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f023 030c 	bic.w	r3, r3, #12
 800fc44:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f043 0308 	orr.w	r3, r3, #8
 800fc4c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2220      	movs	r2, #32
 800fc5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3714      	adds	r7, #20
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d101      	bne.n	800fc8e <HAL_HalfDuplex_EnableReceiver+0x1a>
 800fc8a:	2302      	movs	r3, #2
 800fc8c:	e020      	b.n	800fcd0 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2201      	movs	r2, #1
 800fc92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2224      	movs	r2, #36	@ 0x24
 800fc9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f023 030c 	bic.w	r3, r3, #12
 800fcac:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f043 0304 	orr.w	r3, r3, #4
 800fcb4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2220      	movs	r2, #32
 800fcc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800fce4:	2300      	movs	r3, #0
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	2300      	movs	r3, #0
 800fcea:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	b2db      	uxtb	r3, r3
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3714      	adds	r7, #20
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b090      	sub	sp, #64	@ 0x40
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d137      	bne.n	800fdbc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4e:	2200      	movs	r2, #0
 800fd50:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	3314      	adds	r3, #20
 800fd58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5c:	e853 3f00 	ldrex	r3, [r3]
 800fd60:	623b      	str	r3, [r7, #32]
   return(result);
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3314      	adds	r3, #20
 800fd70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd72:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd7a:	e841 2300 	strex	r3, r2, [r1]
 800fd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d1e5      	bne.n	800fd52 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	330c      	adds	r3, #12
 800fd8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	e853 3f00 	ldrex	r3, [r3]
 800fd94:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	330c      	adds	r3, #12
 800fda4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fda6:	61fa      	str	r2, [r7, #28]
 800fda8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdaa:	69b9      	ldr	r1, [r7, #24]
 800fdac:	69fa      	ldr	r2, [r7, #28]
 800fdae:	e841 2300 	strex	r3, r2, [r1]
 800fdb2:	617b      	str	r3, [r7, #20]
   return(result);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d1e5      	bne.n	800fd86 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdba:	e002      	b.n	800fdc2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800fdbc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fdbe:	f7ff fe0f 	bl	800f9e0 <HAL_UART_TxCpltCallback>
}
 800fdc2:	bf00      	nop
 800fdc4:	3740      	adds	r7, #64	@ 0x40
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f7ff fe0b 	bl	800f9f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdde:	bf00      	nop
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b09c      	sub	sp, #112	@ 0x70
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdf2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d172      	bne.n	800fee8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800fe02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe04:	2200      	movs	r2, #0
 800fe06:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	330c      	adds	r3, #12
 800fe0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe12:	e853 3f00 	ldrex	r3, [r3]
 800fe16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fe18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fe20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	330c      	adds	r3, #12
 800fe26:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fe28:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fe2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe30:	e841 2300 	strex	r3, r2, [r1]
 800fe34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fe36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1e5      	bne.n	800fe08 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	3314      	adds	r3, #20
 800fe42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe46:	e853 3f00 	ldrex	r3, [r3]
 800fe4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe4e:	f023 0301 	bic.w	r3, r3, #1
 800fe52:	667b      	str	r3, [r7, #100]	@ 0x64
 800fe54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3314      	adds	r3, #20
 800fe5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fe5c:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe5e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe64:	e841 2300 	strex	r3, r2, [r1]
 800fe68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d1e5      	bne.n	800fe3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	3314      	adds	r3, #20
 800fe76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7a:	e853 3f00 	ldrex	r3, [r3]
 800fe7e:	623b      	str	r3, [r7, #32]
   return(result);
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe86:	663b      	str	r3, [r7, #96]	@ 0x60
 800fe88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	3314      	adds	r3, #20
 800fe8e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fe90:	633a      	str	r2, [r7, #48]	@ 0x30
 800fe92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe98:	e841 2300 	strex	r3, r2, [r1]
 800fe9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fe9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1e5      	bne.n	800fe70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fea6:	2220      	movs	r2, #32
 800fea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800feae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d119      	bne.n	800fee8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	330c      	adds	r3, #12
 800feba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	e853 3f00 	ldrex	r3, [r3]
 800fec2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f023 0310 	bic.w	r3, r3, #16
 800feca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	330c      	adds	r3, #12
 800fed2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fed4:	61fa      	str	r2, [r7, #28]
 800fed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed8:	69b9      	ldr	r1, [r7, #24]
 800feda:	69fa      	ldr	r2, [r7, #28]
 800fedc:	e841 2300 	strex	r3, r2, [r1]
 800fee0:	617b      	str	r3, [r7, #20]
   return(result);
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1e5      	bne.n	800feb4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800feea:	2200      	movs	r2, #0
 800feec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800feee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d106      	bne.n	800ff04 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fef8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fefa:	4619      	mov	r1, r3
 800fefc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fefe:	f7ff fdbf 	bl	800fa80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff02:	e002      	b.n	800ff0a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ff04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ff06:	f7f0 fc79 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 800ff0a:	bf00      	nop
 800ff0c:	3770      	adds	r7, #112	@ 0x70
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b084      	sub	sp, #16
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff1e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2201      	movs	r2, #1
 800ff24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d108      	bne.n	800ff40 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ff32:	085b      	lsrs	r3, r3, #1
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	4619      	mov	r1, r3
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	f7ff fda1 	bl	800fa80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff3e:	e002      	b.n	800ff46 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f7ff fd6b 	bl	800fa1c <HAL_UART_RxHalfCpltCallback>
}
 800ff46:	bf00      	nop
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b084      	sub	sp, #16
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ff56:	2300      	movs	r3, #0
 800ff58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	695b      	ldr	r3, [r3, #20]
 800ff66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ff6a:	2b80      	cmp	r3, #128	@ 0x80
 800ff6c:	bf0c      	ite	eq
 800ff6e:	2301      	moveq	r3, #1
 800ff70:	2300      	movne	r3, #0
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b21      	cmp	r3, #33	@ 0x21
 800ff80:	d108      	bne.n	800ff94 <UART_DMAError+0x46>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d005      	beq.n	800ff94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ff8e:	68b8      	ldr	r0, [r7, #8]
 800ff90:	f000 f954 	bl	801023c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff9e:	2b40      	cmp	r3, #64	@ 0x40
 800ffa0:	bf0c      	ite	eq
 800ffa2:	2301      	moveq	r3, #1
 800ffa4:	2300      	movne	r3, #0
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	2b22      	cmp	r3, #34	@ 0x22
 800ffb4:	d108      	bne.n	800ffc8 <UART_DMAError+0x7a>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d005      	beq.n	800ffc8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ffc2:	68b8      	ldr	r0, [r7, #8]
 800ffc4:	f000 f962 	bl	801028c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffcc:	f043 0210 	orr.w	r2, r3, #16
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ffd4:	68b8      	ldr	r0, [r7, #8]
 800ffd6:	f7ff fd2b 	bl	800fa30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffda:	bf00      	nop
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b086      	sub	sp, #24
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	60f8      	str	r0, [r7, #12]
 800ffea:	60b9      	str	r1, [r7, #8]
 800ffec:	603b      	str	r3, [r7, #0]
 800ffee:	4613      	mov	r3, r2
 800fff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fff2:	e03b      	b.n	801006c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fff4:	6a3b      	ldr	r3, [r7, #32]
 800fff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fffa:	d037      	beq.n	801006c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fffc:	f7f1 f826 	bl	800104c <HAL_GetTick>
 8010000:	4602      	mov	r2, r0
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	6a3a      	ldr	r2, [r7, #32]
 8010008:	429a      	cmp	r2, r3
 801000a:	d302      	bcc.n	8010012 <UART_WaitOnFlagUntilTimeout+0x30>
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010012:	2303      	movs	r3, #3
 8010014:	e03a      	b.n	801008c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	f003 0304 	and.w	r3, r3, #4
 8010020:	2b00      	cmp	r3, #0
 8010022:	d023      	beq.n	801006c <UART_WaitOnFlagUntilTimeout+0x8a>
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	2b80      	cmp	r3, #128	@ 0x80
 8010028:	d020      	beq.n	801006c <UART_WaitOnFlagUntilTimeout+0x8a>
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	2b40      	cmp	r3, #64	@ 0x40
 801002e:	d01d      	beq.n	801006c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 0308 	and.w	r3, r3, #8
 801003a:	2b08      	cmp	r3, #8
 801003c:	d116      	bne.n	801006c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 801003e:	2300      	movs	r3, #0
 8010040:	617b      	str	r3, [r7, #20]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	617b      	str	r3, [r7, #20]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	617b      	str	r3, [r7, #20]
 8010052:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f000 f919 	bl	801028c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2208      	movs	r2, #8
 801005e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010068:	2301      	movs	r3, #1
 801006a:	e00f      	b.n	801008c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	4013      	ands	r3, r2
 8010076:	68ba      	ldr	r2, [r7, #8]
 8010078:	429a      	cmp	r2, r3
 801007a:	bf0c      	ite	eq
 801007c:	2301      	moveq	r3, #1
 801007e:	2300      	movne	r3, #0
 8010080:	b2db      	uxtb	r3, r3
 8010082:	461a      	mov	r2, r3
 8010084:	79fb      	ldrb	r3, [r7, #7]
 8010086:	429a      	cmp	r2, r3
 8010088:	d0b4      	beq.n	800fff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801008a:	2300      	movs	r3, #0
}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010094:	b480      	push	{r7}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	4613      	mov	r3, r2
 80100a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	88fa      	ldrh	r2, [r7, #6]
 80100ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	88fa      	ldrh	r2, [r7, #6]
 80100b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2200      	movs	r2, #0
 80100b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2222      	movs	r2, #34	@ 0x22
 80100be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d007      	beq.n	80100da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68da      	ldr	r2, [r3, #12]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80100d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	695a      	ldr	r2, [r3, #20]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f042 0201 	orr.w	r2, r2, #1
 80100e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	68da      	ldr	r2, [r3, #12]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f042 0220 	orr.w	r2, r2, #32
 80100f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b098      	sub	sp, #96	@ 0x60
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	4613      	mov	r3, r2
 8010114:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	88fa      	ldrh	r2, [r7, #6]
 8010120:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2200      	movs	r2, #0
 8010126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2222      	movs	r2, #34	@ 0x22
 801012c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010134:	4a3e      	ldr	r2, [pc, #248]	@ (8010230 <UART_Start_Receive_DMA+0x128>)
 8010136:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801013c:	4a3d      	ldr	r2, [pc, #244]	@ (8010234 <UART_Start_Receive_DMA+0x12c>)
 801013e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010144:	4a3c      	ldr	r2, [pc, #240]	@ (8010238 <UART_Start_Receive_DMA+0x130>)
 8010146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801014c:	2200      	movs	r2, #0
 801014e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8010150:	f107 0308 	add.w	r3, r7, #8
 8010154:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	3304      	adds	r3, #4
 8010160:	4619      	mov	r1, r3
 8010162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	88fb      	ldrh	r3, [r7, #6]
 8010168:	f7f2 fa47 	bl	80025fa <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801016c:	2300      	movs	r3, #0
 801016e:	613b      	str	r3, [r7, #16]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	613b      	str	r3, [r7, #16]
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	613b      	str	r3, [r7, #16]
 8010180:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	691b      	ldr	r3, [r3, #16]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d019      	beq.n	80101be <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	330c      	adds	r3, #12
 8010190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010194:	e853 3f00 	ldrex	r3, [r3]
 8010198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801019a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801019c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80101a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	330c      	adds	r3, #12
 80101a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80101aa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80101ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80101b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80101b2:	e841 2300 	strex	r3, r2, [r1]
 80101b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80101b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d1e5      	bne.n	801018a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3314      	adds	r3, #20
 80101c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c8:	e853 3f00 	ldrex	r3, [r3]
 80101cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d0:	f043 0301 	orr.w	r3, r3, #1
 80101d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	3314      	adds	r3, #20
 80101dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80101de:	63ba      	str	r2, [r7, #56]	@ 0x38
 80101e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80101e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101e6:	e841 2300 	strex	r3, r2, [r1]
 80101ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80101ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1e5      	bne.n	80101be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3314      	adds	r3, #20
 80101f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	e853 3f00 	ldrex	r3, [r3]
 8010200:	617b      	str	r3, [r7, #20]
   return(result);
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010208:	653b      	str	r3, [r7, #80]	@ 0x50
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	3314      	adds	r3, #20
 8010210:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010212:	627a      	str	r2, [r7, #36]	@ 0x24
 8010214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010216:	6a39      	ldr	r1, [r7, #32]
 8010218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801021a:	e841 2300 	strex	r3, r2, [r1]
 801021e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1e5      	bne.n	80101f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8010226:	2300      	movs	r3, #0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3760      	adds	r7, #96	@ 0x60
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	0800fde7 	.word	0x0800fde7
 8010234:	0800ff13 	.word	0x0800ff13
 8010238:	0800ff4f 	.word	0x0800ff4f

0801023c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801023c:	b480      	push	{r7}
 801023e:	b089      	sub	sp, #36	@ 0x24
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	330c      	adds	r3, #12
 801024a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	e853 3f00 	ldrex	r3, [r3]
 8010252:	60bb      	str	r3, [r7, #8]
   return(result);
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801025a:	61fb      	str	r3, [r7, #28]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	330c      	adds	r3, #12
 8010262:	69fa      	ldr	r2, [r7, #28]
 8010264:	61ba      	str	r2, [r7, #24]
 8010266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010268:	6979      	ldr	r1, [r7, #20]
 801026a:	69ba      	ldr	r2, [r7, #24]
 801026c:	e841 2300 	strex	r3, r2, [r1]
 8010270:	613b      	str	r3, [r7, #16]
   return(result);
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1e5      	bne.n	8010244 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2220      	movs	r2, #32
 801027c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8010280:	bf00      	nop
 8010282:	3724      	adds	r7, #36	@ 0x24
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801028c:	b480      	push	{r7}
 801028e:	b095      	sub	sp, #84	@ 0x54
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	330c      	adds	r3, #12
 801029a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801029c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801029e:	e853 3f00 	ldrex	r3, [r3]
 80102a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80102a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	330c      	adds	r3, #12
 80102b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80102b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80102b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80102ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80102bc:	e841 2300 	strex	r3, r2, [r1]
 80102c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80102c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d1e5      	bne.n	8010294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	3314      	adds	r3, #20
 80102ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d0:	6a3b      	ldr	r3, [r7, #32]
 80102d2:	e853 3f00 	ldrex	r3, [r3]
 80102d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80102d8:	69fb      	ldr	r3, [r7, #28]
 80102da:	f023 0301 	bic.w	r3, r3, #1
 80102de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	3314      	adds	r3, #20
 80102e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80102e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80102ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80102ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102f0:	e841 2300 	strex	r3, r2, [r1]
 80102f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80102f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1e5      	bne.n	80102c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010300:	2b01      	cmp	r3, #1
 8010302:	d119      	bne.n	8010338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	330c      	adds	r3, #12
 801030a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	e853 3f00 	ldrex	r3, [r3]
 8010312:	60bb      	str	r3, [r7, #8]
   return(result);
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	f023 0310 	bic.w	r3, r3, #16
 801031a:	647b      	str	r3, [r7, #68]	@ 0x44
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	330c      	adds	r3, #12
 8010322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010324:	61ba      	str	r2, [r7, #24]
 8010326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010328:	6979      	ldr	r1, [r7, #20]
 801032a:	69ba      	ldr	r2, [r7, #24]
 801032c:	e841 2300 	strex	r3, r2, [r1]
 8010330:	613b      	str	r3, [r7, #16]
   return(result);
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d1e5      	bne.n	8010304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2220      	movs	r2, #32
 801033c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010346:	bf00      	nop
 8010348:	3754      	adds	r7, #84	@ 0x54
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b084      	sub	sp, #16
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801035e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2200      	movs	r2, #0
 8010364:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff fb5f 	bl	800fa30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010372:	bf00      	nop
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b084      	sub	sp, #16
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010386:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801038c:	2200      	movs	r2, #0
 801038e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010394:	2b00      	cmp	r3, #0
 8010396:	d004      	beq.n	80103a2 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801039c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d117      	bne.n	80103d2 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2200      	movs	r2, #0
 80103b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2220      	movs	r2, #32
 80103b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2220      	movs	r2, #32
 80103c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7ff fb3a 	bl	800fa44 <HAL_UART_AbortCpltCallback>
 80103d0:	e000      	b.n	80103d4 <UART_DMATxAbortCallback+0x5a>
      return;
 80103d2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103e6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ec:	2200      	movs	r2, #0
 80103ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d004      	beq.n	8010402 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d117      	bne.n	8010432 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2200      	movs	r2, #0
 8010406:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2200      	movs	r2, #0
 801040c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2220      	movs	r2, #32
 8010418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2220      	movs	r2, #32
 8010420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2200      	movs	r2, #0
 8010428:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7ff fb0a 	bl	800fa44 <HAL_UART_AbortCpltCallback>
 8010430:	e000      	b.n	8010434 <UART_DMARxAbortCallback+0x5a>
      return;
 8010432:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b084      	sub	sp, #16
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010446:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2200      	movs	r2, #0
 801044c:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2220      	movs	r2, #32
 8010452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f7ff fafe 	bl	800fa58 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801045c:	bf00      	nop
 801045e:	3710      	adds	r7, #16
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010470:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2200      	movs	r2, #0
 8010476:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2220      	movs	r2, #32
 801047c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2200      	movs	r2, #0
 8010484:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7ff faf0 	bl	800fa6c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801048c:	bf00      	nop
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	2b21      	cmp	r3, #33	@ 0x21
 80104a6:	d13e      	bne.n	8010526 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104b0:	d114      	bne.n	80104dc <UART_Transmit_IT+0x48>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	691b      	ldr	r3, [r3, #16]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d110      	bne.n	80104dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a1b      	ldr	r3, [r3, #32]
 80104be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80104ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6a1b      	ldr	r3, [r3, #32]
 80104d4:	1c9a      	adds	r2, r3, #2
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	621a      	str	r2, [r3, #32]
 80104da:	e008      	b.n	80104ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a1b      	ldr	r3, [r3, #32]
 80104e0:	1c59      	adds	r1, r3, #1
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	6211      	str	r1, [r2, #32]
 80104e6:	781a      	ldrb	r2, [r3, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	3b01      	subs	r3, #1
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	4619      	mov	r1, r3
 80104fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d10f      	bne.n	8010522 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	68da      	ldr	r2, [r3, #12]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010510:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	68da      	ldr	r2, [r3, #12]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010520:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010522:	2300      	movs	r3, #0
 8010524:	e000      	b.n	8010528 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010526:	2302      	movs	r3, #2
  }
}
 8010528:	4618      	mov	r0, r3
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	68da      	ldr	r2, [r3, #12]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801054a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2220      	movs	r2, #32
 8010550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f7ff fa43 	bl	800f9e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b08c      	sub	sp, #48	@ 0x30
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010572:	b2db      	uxtb	r3, r3
 8010574:	2b22      	cmp	r3, #34	@ 0x22
 8010576:	f040 80ae 	bne.w	80106d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010582:	d117      	bne.n	80105b4 <UART_Receive_IT+0x50>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	691b      	ldr	r3, [r3, #16]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d113      	bne.n	80105b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801058c:	2300      	movs	r3, #0
 801058e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010594:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	b29b      	uxth	r3, r3
 801059e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ac:	1c9a      	adds	r2, r3, #2
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80105b2:	e026      	b.n	8010602 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80105ba:	2300      	movs	r3, #0
 80105bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105c6:	d007      	beq.n	80105d8 <UART_Receive_IT+0x74>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	689b      	ldr	r3, [r3, #8]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d10a      	bne.n	80105e6 <UART_Receive_IT+0x82>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d106      	bne.n	80105e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	b2da      	uxtb	r2, r3
 80105e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e2:	701a      	strb	r2, [r3, #0]
 80105e4:	e008      	b.n	80105f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105f2:	b2da      	uxtb	r2, r3
 80105f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105fc:	1c5a      	adds	r2, r3, #1
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010606:	b29b      	uxth	r3, r3
 8010608:	3b01      	subs	r3, #1
 801060a:	b29b      	uxth	r3, r3
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	4619      	mov	r1, r3
 8010610:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8010612:	2b00      	cmp	r3, #0
 8010614:	d15d      	bne.n	80106d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	68da      	ldr	r2, [r3, #12]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f022 0220 	bic.w	r2, r2, #32
 8010624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68da      	ldr	r2, [r3, #12]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	695a      	ldr	r2, [r3, #20]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f022 0201 	bic.w	r2, r2, #1
 8010644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2220      	movs	r2, #32
 801064a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010658:	2b01      	cmp	r3, #1
 801065a:	d135      	bne.n	80106c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	330c      	adds	r3, #12
 8010668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	e853 3f00 	ldrex	r3, [r3]
 8010670:	613b      	str	r3, [r7, #16]
   return(result);
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	f023 0310 	bic.w	r3, r3, #16
 8010678:	627b      	str	r3, [r7, #36]	@ 0x24
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	330c      	adds	r3, #12
 8010680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010682:	623a      	str	r2, [r7, #32]
 8010684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010686:	69f9      	ldr	r1, [r7, #28]
 8010688:	6a3a      	ldr	r2, [r7, #32]
 801068a:	e841 2300 	strex	r3, r2, [r1]
 801068e:	61bb      	str	r3, [r7, #24]
   return(result);
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d1e5      	bne.n	8010662 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 0310 	and.w	r3, r3, #16
 80106a0:	2b10      	cmp	r3, #16
 80106a2:	d10a      	bne.n	80106ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80106a4:	2300      	movs	r3, #0
 80106a6:	60fb      	str	r3, [r7, #12]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	60fb      	str	r3, [r7, #12]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7ff f9dd 	bl	800fa80 <HAL_UARTEx_RxEventCallback>
 80106c6:	e002      	b.n	80106ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7f0 f897 	bl	80007fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	e002      	b.n	80106d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80106d2:	2300      	movs	r3, #0
 80106d4:	e000      	b.n	80106d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80106d6:	2302      	movs	r3, #2
  }
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3730      	adds	r7, #48	@ 0x30
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106e4:	b0c0      	sub	sp, #256	@ 0x100
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80106ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80106f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80106fc:	68d9      	ldr	r1, [r3, #12]
 80106fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	ea40 0301 	orr.w	r3, r0, r1
 8010708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801070a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801070e:	689a      	ldr	r2, [r3, #8]
 8010710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	431a      	orrs	r2, r3
 8010718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	431a      	orrs	r2, r3
 8010720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010724:	69db      	ldr	r3, [r3, #28]
 8010726:	4313      	orrs	r3, r2
 8010728:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801072c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010738:	f021 010c 	bic.w	r1, r1, #12
 801073c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010746:	430b      	orrs	r3, r1
 8010748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801074a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	695b      	ldr	r3, [r3, #20]
 8010752:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801075a:	6999      	ldr	r1, [r3, #24]
 801075c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	ea40 0301 	orr.w	r3, r0, r1
 8010766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	4b8f      	ldr	r3, [pc, #572]	@ (80109ac <UART_SetConfig+0x2cc>)
 8010770:	429a      	cmp	r2, r3
 8010772:	d005      	beq.n	8010780 <UART_SetConfig+0xa0>
 8010774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	4b8d      	ldr	r3, [pc, #564]	@ (80109b0 <UART_SetConfig+0x2d0>)
 801077c:	429a      	cmp	r2, r3
 801077e:	d104      	bne.n	801078a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010780:	f7f3 fc38 	bl	8003ff4 <HAL_RCC_GetPCLK2Freq>
 8010784:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010788:	e003      	b.n	8010792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801078a:	f7f3 fc1f 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 801078e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010796:	69db      	ldr	r3, [r3, #28]
 8010798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801079c:	f040 810c 	bne.w	80109b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80107a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80107a4:	2200      	movs	r2, #0
 80107a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80107aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80107ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80107b2:	4622      	mov	r2, r4
 80107b4:	462b      	mov	r3, r5
 80107b6:	1891      	adds	r1, r2, r2
 80107b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80107ba:	415b      	adcs	r3, r3
 80107bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80107be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80107c2:	4621      	mov	r1, r4
 80107c4:	eb12 0801 	adds.w	r8, r2, r1
 80107c8:	4629      	mov	r1, r5
 80107ca:	eb43 0901 	adc.w	r9, r3, r1
 80107ce:	f04f 0200 	mov.w	r2, #0
 80107d2:	f04f 0300 	mov.w	r3, #0
 80107d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80107da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80107de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80107e2:	4690      	mov	r8, r2
 80107e4:	4699      	mov	r9, r3
 80107e6:	4623      	mov	r3, r4
 80107e8:	eb18 0303 	adds.w	r3, r8, r3
 80107ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80107f0:	462b      	mov	r3, r5
 80107f2:	eb49 0303 	adc.w	r3, r9, r3
 80107f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80107fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010806:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801080a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801080e:	460b      	mov	r3, r1
 8010810:	18db      	adds	r3, r3, r3
 8010812:	653b      	str	r3, [r7, #80]	@ 0x50
 8010814:	4613      	mov	r3, r2
 8010816:	eb42 0303 	adc.w	r3, r2, r3
 801081a:	657b      	str	r3, [r7, #84]	@ 0x54
 801081c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010824:	f000 ff30 	bl	8011688 <__aeabi_uldivmod>
 8010828:	4602      	mov	r2, r0
 801082a:	460b      	mov	r3, r1
 801082c:	4b61      	ldr	r3, [pc, #388]	@ (80109b4 <UART_SetConfig+0x2d4>)
 801082e:	fba3 2302 	umull	r2, r3, r3, r2
 8010832:	095b      	lsrs	r3, r3, #5
 8010834:	011c      	lsls	r4, r3, #4
 8010836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801083a:	2200      	movs	r2, #0
 801083c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010840:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010848:	4642      	mov	r2, r8
 801084a:	464b      	mov	r3, r9
 801084c:	1891      	adds	r1, r2, r2
 801084e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010850:	415b      	adcs	r3, r3
 8010852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010858:	4641      	mov	r1, r8
 801085a:	eb12 0a01 	adds.w	sl, r2, r1
 801085e:	4649      	mov	r1, r9
 8010860:	eb43 0b01 	adc.w	fp, r3, r1
 8010864:	f04f 0200 	mov.w	r2, #0
 8010868:	f04f 0300 	mov.w	r3, #0
 801086c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010878:	4692      	mov	sl, r2
 801087a:	469b      	mov	fp, r3
 801087c:	4643      	mov	r3, r8
 801087e:	eb1a 0303 	adds.w	r3, sl, r3
 8010882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010886:	464b      	mov	r3, r9
 8010888:	eb4b 0303 	adc.w	r3, fp, r3
 801088c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801089c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80108a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80108a4:	460b      	mov	r3, r1
 80108a6:	18db      	adds	r3, r3, r3
 80108a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80108aa:	4613      	mov	r3, r2
 80108ac:	eb42 0303 	adc.w	r3, r2, r3
 80108b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80108b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80108b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80108ba:	f000 fee5 	bl	8011688 <__aeabi_uldivmod>
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	4611      	mov	r1, r2
 80108c4:	4b3b      	ldr	r3, [pc, #236]	@ (80109b4 <UART_SetConfig+0x2d4>)
 80108c6:	fba3 2301 	umull	r2, r3, r3, r1
 80108ca:	095b      	lsrs	r3, r3, #5
 80108cc:	2264      	movs	r2, #100	@ 0x64
 80108ce:	fb02 f303 	mul.w	r3, r2, r3
 80108d2:	1acb      	subs	r3, r1, r3
 80108d4:	00db      	lsls	r3, r3, #3
 80108d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80108da:	4b36      	ldr	r3, [pc, #216]	@ (80109b4 <UART_SetConfig+0x2d4>)
 80108dc:	fba3 2302 	umull	r2, r3, r3, r2
 80108e0:	095b      	lsrs	r3, r3, #5
 80108e2:	005b      	lsls	r3, r3, #1
 80108e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80108e8:	441c      	add	r4, r3
 80108ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80108ee:	2200      	movs	r2, #0
 80108f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80108f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80108f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80108fc:	4642      	mov	r2, r8
 80108fe:	464b      	mov	r3, r9
 8010900:	1891      	adds	r1, r2, r2
 8010902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010904:	415b      	adcs	r3, r3
 8010906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801090c:	4641      	mov	r1, r8
 801090e:	1851      	adds	r1, r2, r1
 8010910:	6339      	str	r1, [r7, #48]	@ 0x30
 8010912:	4649      	mov	r1, r9
 8010914:	414b      	adcs	r3, r1
 8010916:	637b      	str	r3, [r7, #52]	@ 0x34
 8010918:	f04f 0200 	mov.w	r2, #0
 801091c:	f04f 0300 	mov.w	r3, #0
 8010920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010924:	4659      	mov	r1, fp
 8010926:	00cb      	lsls	r3, r1, #3
 8010928:	4651      	mov	r1, sl
 801092a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801092e:	4651      	mov	r1, sl
 8010930:	00ca      	lsls	r2, r1, #3
 8010932:	4610      	mov	r0, r2
 8010934:	4619      	mov	r1, r3
 8010936:	4603      	mov	r3, r0
 8010938:	4642      	mov	r2, r8
 801093a:	189b      	adds	r3, r3, r2
 801093c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010940:	464b      	mov	r3, r9
 8010942:	460a      	mov	r2, r1
 8010944:	eb42 0303 	adc.w	r3, r2, r3
 8010948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801094c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010958:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801095c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010960:	460b      	mov	r3, r1
 8010962:	18db      	adds	r3, r3, r3
 8010964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010966:	4613      	mov	r3, r2
 8010968:	eb42 0303 	adc.w	r3, r2, r3
 801096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801096e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010976:	f000 fe87 	bl	8011688 <__aeabi_uldivmod>
 801097a:	4602      	mov	r2, r0
 801097c:	460b      	mov	r3, r1
 801097e:	4b0d      	ldr	r3, [pc, #52]	@ (80109b4 <UART_SetConfig+0x2d4>)
 8010980:	fba3 1302 	umull	r1, r3, r3, r2
 8010984:	095b      	lsrs	r3, r3, #5
 8010986:	2164      	movs	r1, #100	@ 0x64
 8010988:	fb01 f303 	mul.w	r3, r1, r3
 801098c:	1ad3      	subs	r3, r2, r3
 801098e:	00db      	lsls	r3, r3, #3
 8010990:	3332      	adds	r3, #50	@ 0x32
 8010992:	4a08      	ldr	r2, [pc, #32]	@ (80109b4 <UART_SetConfig+0x2d4>)
 8010994:	fba2 2303 	umull	r2, r3, r2, r3
 8010998:	095b      	lsrs	r3, r3, #5
 801099a:	f003 0207 	and.w	r2, r3, #7
 801099e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4422      	add	r2, r4
 80109a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80109a8:	e106      	b.n	8010bb8 <UART_SetConfig+0x4d8>
 80109aa:	bf00      	nop
 80109ac:	40011000 	.word	0x40011000
 80109b0:	40011400 	.word	0x40011400
 80109b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80109b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80109bc:	2200      	movs	r2, #0
 80109be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80109c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80109c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80109ca:	4642      	mov	r2, r8
 80109cc:	464b      	mov	r3, r9
 80109ce:	1891      	adds	r1, r2, r2
 80109d0:	6239      	str	r1, [r7, #32]
 80109d2:	415b      	adcs	r3, r3
 80109d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80109d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80109da:	4641      	mov	r1, r8
 80109dc:	1854      	adds	r4, r2, r1
 80109de:	4649      	mov	r1, r9
 80109e0:	eb43 0501 	adc.w	r5, r3, r1
 80109e4:	f04f 0200 	mov.w	r2, #0
 80109e8:	f04f 0300 	mov.w	r3, #0
 80109ec:	00eb      	lsls	r3, r5, #3
 80109ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80109f2:	00e2      	lsls	r2, r4, #3
 80109f4:	4614      	mov	r4, r2
 80109f6:	461d      	mov	r5, r3
 80109f8:	4643      	mov	r3, r8
 80109fa:	18e3      	adds	r3, r4, r3
 80109fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010a00:	464b      	mov	r3, r9
 8010a02:	eb45 0303 	adc.w	r3, r5, r3
 8010a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010a1a:	f04f 0200 	mov.w	r2, #0
 8010a1e:	f04f 0300 	mov.w	r3, #0
 8010a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010a26:	4629      	mov	r1, r5
 8010a28:	008b      	lsls	r3, r1, #2
 8010a2a:	4621      	mov	r1, r4
 8010a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010a30:	4621      	mov	r1, r4
 8010a32:	008a      	lsls	r2, r1, #2
 8010a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010a38:	f000 fe26 	bl	8011688 <__aeabi_uldivmod>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	460b      	mov	r3, r1
 8010a40:	4b60      	ldr	r3, [pc, #384]	@ (8010bc4 <UART_SetConfig+0x4e4>)
 8010a42:	fba3 2302 	umull	r2, r3, r3, r2
 8010a46:	095b      	lsrs	r3, r3, #5
 8010a48:	011c      	lsls	r4, r3, #4
 8010a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010a5c:	4642      	mov	r2, r8
 8010a5e:	464b      	mov	r3, r9
 8010a60:	1891      	adds	r1, r2, r2
 8010a62:	61b9      	str	r1, [r7, #24]
 8010a64:	415b      	adcs	r3, r3
 8010a66:	61fb      	str	r3, [r7, #28]
 8010a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010a6c:	4641      	mov	r1, r8
 8010a6e:	1851      	adds	r1, r2, r1
 8010a70:	6139      	str	r1, [r7, #16]
 8010a72:	4649      	mov	r1, r9
 8010a74:	414b      	adcs	r3, r1
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	f04f 0200 	mov.w	r2, #0
 8010a7c:	f04f 0300 	mov.w	r3, #0
 8010a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010a84:	4659      	mov	r1, fp
 8010a86:	00cb      	lsls	r3, r1, #3
 8010a88:	4651      	mov	r1, sl
 8010a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010a8e:	4651      	mov	r1, sl
 8010a90:	00ca      	lsls	r2, r1, #3
 8010a92:	4610      	mov	r0, r2
 8010a94:	4619      	mov	r1, r3
 8010a96:	4603      	mov	r3, r0
 8010a98:	4642      	mov	r2, r8
 8010a9a:	189b      	adds	r3, r3, r2
 8010a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010aa0:	464b      	mov	r3, r9
 8010aa2:	460a      	mov	r2, r1
 8010aa4:	eb42 0303 	adc.w	r3, r2, r3
 8010aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010ab6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010ab8:	f04f 0200 	mov.w	r2, #0
 8010abc:	f04f 0300 	mov.w	r3, #0
 8010ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010ac4:	4649      	mov	r1, r9
 8010ac6:	008b      	lsls	r3, r1, #2
 8010ac8:	4641      	mov	r1, r8
 8010aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010ace:	4641      	mov	r1, r8
 8010ad0:	008a      	lsls	r2, r1, #2
 8010ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010ad6:	f000 fdd7 	bl	8011688 <__aeabi_uldivmod>
 8010ada:	4602      	mov	r2, r0
 8010adc:	460b      	mov	r3, r1
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4b38      	ldr	r3, [pc, #224]	@ (8010bc4 <UART_SetConfig+0x4e4>)
 8010ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8010ae6:	095b      	lsrs	r3, r3, #5
 8010ae8:	2264      	movs	r2, #100	@ 0x64
 8010aea:	fb02 f303 	mul.w	r3, r2, r3
 8010aee:	1acb      	subs	r3, r1, r3
 8010af0:	011b      	lsls	r3, r3, #4
 8010af2:	3332      	adds	r3, #50	@ 0x32
 8010af4:	4a33      	ldr	r2, [pc, #204]	@ (8010bc4 <UART_SetConfig+0x4e4>)
 8010af6:	fba2 2303 	umull	r2, r3, r2, r3
 8010afa:	095b      	lsrs	r3, r3, #5
 8010afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b00:	441c      	add	r4, r3
 8010b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010b06:	2200      	movs	r2, #0
 8010b08:	673b      	str	r3, [r7, #112]	@ 0x70
 8010b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8010b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010b10:	4642      	mov	r2, r8
 8010b12:	464b      	mov	r3, r9
 8010b14:	1891      	adds	r1, r2, r2
 8010b16:	60b9      	str	r1, [r7, #8]
 8010b18:	415b      	adcs	r3, r3
 8010b1a:	60fb      	str	r3, [r7, #12]
 8010b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010b20:	4641      	mov	r1, r8
 8010b22:	1851      	adds	r1, r2, r1
 8010b24:	6039      	str	r1, [r7, #0]
 8010b26:	4649      	mov	r1, r9
 8010b28:	414b      	adcs	r3, r1
 8010b2a:	607b      	str	r3, [r7, #4]
 8010b2c:	f04f 0200 	mov.w	r2, #0
 8010b30:	f04f 0300 	mov.w	r3, #0
 8010b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010b38:	4659      	mov	r1, fp
 8010b3a:	00cb      	lsls	r3, r1, #3
 8010b3c:	4651      	mov	r1, sl
 8010b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010b42:	4651      	mov	r1, sl
 8010b44:	00ca      	lsls	r2, r1, #3
 8010b46:	4610      	mov	r0, r2
 8010b48:	4619      	mov	r1, r3
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	4642      	mov	r2, r8
 8010b4e:	189b      	adds	r3, r3, r2
 8010b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b52:	464b      	mov	r3, r9
 8010b54:	460a      	mov	r2, r1
 8010b56:	eb42 0303 	adc.w	r3, r2, r3
 8010b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8010b66:	667a      	str	r2, [r7, #100]	@ 0x64
 8010b68:	f04f 0200 	mov.w	r2, #0
 8010b6c:	f04f 0300 	mov.w	r3, #0
 8010b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010b74:	4649      	mov	r1, r9
 8010b76:	008b      	lsls	r3, r1, #2
 8010b78:	4641      	mov	r1, r8
 8010b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010b7e:	4641      	mov	r1, r8
 8010b80:	008a      	lsls	r2, r1, #2
 8010b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010b86:	f000 fd7f 	bl	8011688 <__aeabi_uldivmod>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8010bc4 <UART_SetConfig+0x4e4>)
 8010b90:	fba3 1302 	umull	r1, r3, r3, r2
 8010b94:	095b      	lsrs	r3, r3, #5
 8010b96:	2164      	movs	r1, #100	@ 0x64
 8010b98:	fb01 f303 	mul.w	r3, r1, r3
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	011b      	lsls	r3, r3, #4
 8010ba0:	3332      	adds	r3, #50	@ 0x32
 8010ba2:	4a08      	ldr	r2, [pc, #32]	@ (8010bc4 <UART_SetConfig+0x4e4>)
 8010ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba8:	095b      	lsrs	r3, r3, #5
 8010baa:	f003 020f 	and.w	r2, r3, #15
 8010bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4422      	add	r2, r4
 8010bb6:	609a      	str	r2, [r3, #8]
}
 8010bb8:	bf00      	nop
 8010bba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010bc4:	51eb851f 	.word	0x51eb851f
	...

08010bd0 <memchr>:
 8010bd0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010bd4:	2a10      	cmp	r2, #16
 8010bd6:	db2b      	blt.n	8010c30 <memchr+0x60>
 8010bd8:	f010 0f07 	tst.w	r0, #7
 8010bdc:	d008      	beq.n	8010bf0 <memchr+0x20>
 8010bde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010be2:	3a01      	subs	r2, #1
 8010be4:	428b      	cmp	r3, r1
 8010be6:	d02d      	beq.n	8010c44 <memchr+0x74>
 8010be8:	f010 0f07 	tst.w	r0, #7
 8010bec:	b342      	cbz	r2, 8010c40 <memchr+0x70>
 8010bee:	d1f6      	bne.n	8010bde <memchr+0xe>
 8010bf0:	b4f0      	push	{r4, r5, r6, r7}
 8010bf2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010bf6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8010bfa:	f022 0407 	bic.w	r4, r2, #7
 8010bfe:	f07f 0700 	mvns.w	r7, #0
 8010c02:	2300      	movs	r3, #0
 8010c04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010c08:	3c08      	subs	r4, #8
 8010c0a:	ea85 0501 	eor.w	r5, r5, r1
 8010c0e:	ea86 0601 	eor.w	r6, r6, r1
 8010c12:	fa85 f547 	uadd8	r5, r5, r7
 8010c16:	faa3 f587 	sel	r5, r3, r7
 8010c1a:	fa86 f647 	uadd8	r6, r6, r7
 8010c1e:	faa5 f687 	sel	r6, r5, r7
 8010c22:	b98e      	cbnz	r6, 8010c48 <memchr+0x78>
 8010c24:	d1ee      	bne.n	8010c04 <memchr+0x34>
 8010c26:	bcf0      	pop	{r4, r5, r6, r7}
 8010c28:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010c2c:	f002 0207 	and.w	r2, r2, #7
 8010c30:	b132      	cbz	r2, 8010c40 <memchr+0x70>
 8010c32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010c36:	3a01      	subs	r2, #1
 8010c38:	ea83 0301 	eor.w	r3, r3, r1
 8010c3c:	b113      	cbz	r3, 8010c44 <memchr+0x74>
 8010c3e:	d1f8      	bne.n	8010c32 <memchr+0x62>
 8010c40:	2000      	movs	r0, #0
 8010c42:	4770      	bx	lr
 8010c44:	3801      	subs	r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	2d00      	cmp	r5, #0
 8010c4a:	bf06      	itte	eq
 8010c4c:	4635      	moveq	r5, r6
 8010c4e:	3803      	subeq	r0, #3
 8010c50:	3807      	subne	r0, #7
 8010c52:	f015 0f01 	tst.w	r5, #1
 8010c56:	d107      	bne.n	8010c68 <memchr+0x98>
 8010c58:	3001      	adds	r0, #1
 8010c5a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8010c5e:	bf02      	ittt	eq
 8010c60:	3001      	addeq	r0, #1
 8010c62:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010c66:	3001      	addeq	r0, #1
 8010c68:	bcf0      	pop	{r4, r5, r6, r7}
 8010c6a:	3801      	subs	r0, #1
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop

08010c70 <strlen>:
 8010c70:	4603      	mov	r3, r0
 8010c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c76:	2a00      	cmp	r2, #0
 8010c78:	d1fb      	bne.n	8010c72 <strlen+0x2>
 8010c7a:	1a18      	subs	r0, r3, r0
 8010c7c:	3801      	subs	r0, #1
 8010c7e:	4770      	bx	lr

08010c80 <__aeabi_drsub>:
 8010c80:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8010c84:	e002      	b.n	8010c8c <__adddf3>
 8010c86:	bf00      	nop

08010c88 <__aeabi_dsub>:
 8010c88:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08010c8c <__adddf3>:
 8010c8c:	b530      	push	{r4, r5, lr}
 8010c8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010c92:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010c96:	ea94 0f05 	teq	r4, r5
 8010c9a:	bf08      	it	eq
 8010c9c:	ea90 0f02 	teqeq	r0, r2
 8010ca0:	bf1f      	itttt	ne
 8010ca2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010ca6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8010caa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010cae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010cb2:	f000 80e2 	beq.w	8010e7a <__adddf3+0x1ee>
 8010cb6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8010cba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010cbe:	bfb8      	it	lt
 8010cc0:	426d      	neglt	r5, r5
 8010cc2:	dd0c      	ble.n	8010cde <__adddf3+0x52>
 8010cc4:	442c      	add	r4, r5
 8010cc6:	ea80 0202 	eor.w	r2, r0, r2
 8010cca:	ea81 0303 	eor.w	r3, r1, r3
 8010cce:	ea82 0000 	eor.w	r0, r2, r0
 8010cd2:	ea83 0101 	eor.w	r1, r3, r1
 8010cd6:	ea80 0202 	eor.w	r2, r0, r2
 8010cda:	ea81 0303 	eor.w	r3, r1, r3
 8010cde:	2d36      	cmp	r5, #54	@ 0x36
 8010ce0:	bf88      	it	hi
 8010ce2:	bd30      	pophi	{r4, r5, pc}
 8010ce4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010ce8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010cec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010cf0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010cf4:	d002      	beq.n	8010cfc <__adddf3+0x70>
 8010cf6:	4240      	negs	r0, r0
 8010cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010cfc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010d00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010d04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010d08:	d002      	beq.n	8010d10 <__adddf3+0x84>
 8010d0a:	4252      	negs	r2, r2
 8010d0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d10:	ea94 0f05 	teq	r4, r5
 8010d14:	f000 80a7 	beq.w	8010e66 <__adddf3+0x1da>
 8010d18:	f1a4 0401 	sub.w	r4, r4, #1
 8010d1c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010d20:	db0d      	blt.n	8010d3e <__adddf3+0xb2>
 8010d22:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010d26:	fa22 f205 	lsr.w	r2, r2, r5
 8010d2a:	1880      	adds	r0, r0, r2
 8010d2c:	f141 0100 	adc.w	r1, r1, #0
 8010d30:	fa03 f20e 	lsl.w	r2, r3, lr
 8010d34:	1880      	adds	r0, r0, r2
 8010d36:	fa43 f305 	asr.w	r3, r3, r5
 8010d3a:	4159      	adcs	r1, r3
 8010d3c:	e00e      	b.n	8010d5c <__adddf3+0xd0>
 8010d3e:	f1a5 0520 	sub.w	r5, r5, #32
 8010d42:	f10e 0e20 	add.w	lr, lr, #32
 8010d46:	2a01      	cmp	r2, #1
 8010d48:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010d4c:	bf28      	it	cs
 8010d4e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010d52:	fa43 f305 	asr.w	r3, r3, r5
 8010d56:	18c0      	adds	r0, r0, r3
 8010d58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010d5c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010d60:	d507      	bpl.n	8010d72 <__adddf3+0xe6>
 8010d62:	f04f 0e00 	mov.w	lr, #0
 8010d66:	f1dc 0c00 	rsbs	ip, ip, #0
 8010d6a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010d6e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010d72:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8010d76:	d31b      	bcc.n	8010db0 <__adddf3+0x124>
 8010d78:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8010d7c:	d30c      	bcc.n	8010d98 <__adddf3+0x10c>
 8010d7e:	0849      	lsrs	r1, r1, #1
 8010d80:	ea5f 0030 	movs.w	r0, r0, rrx
 8010d84:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010d88:	f104 0401 	add.w	r4, r4, #1
 8010d8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010d90:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8010d94:	f080 809a 	bcs.w	8010ecc <__adddf3+0x240>
 8010d98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8010d9c:	bf08      	it	eq
 8010d9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010da2:	f150 0000 	adcs.w	r0, r0, #0
 8010da6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010daa:	ea41 0105 	orr.w	r1, r1, r5
 8010dae:	bd30      	pop	{r4, r5, pc}
 8010db0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010db4:	4140      	adcs	r0, r0
 8010db6:	eb41 0101 	adc.w	r1, r1, r1
 8010dba:	3c01      	subs	r4, #1
 8010dbc:	bf28      	it	cs
 8010dbe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8010dc2:	d2e9      	bcs.n	8010d98 <__adddf3+0x10c>
 8010dc4:	f091 0f00 	teq	r1, #0
 8010dc8:	bf04      	itt	eq
 8010dca:	4601      	moveq	r1, r0
 8010dcc:	2000      	moveq	r0, #0
 8010dce:	fab1 f381 	clz	r3, r1
 8010dd2:	bf08      	it	eq
 8010dd4:	3320      	addeq	r3, #32
 8010dd6:	f1a3 030b 	sub.w	r3, r3, #11
 8010dda:	f1b3 0220 	subs.w	r2, r3, #32
 8010dde:	da0c      	bge.n	8010dfa <__adddf3+0x16e>
 8010de0:	320c      	adds	r2, #12
 8010de2:	dd08      	ble.n	8010df6 <__adddf3+0x16a>
 8010de4:	f102 0c14 	add.w	ip, r2, #20
 8010de8:	f1c2 020c 	rsb	r2, r2, #12
 8010dec:	fa01 f00c 	lsl.w	r0, r1, ip
 8010df0:	fa21 f102 	lsr.w	r1, r1, r2
 8010df4:	e00c      	b.n	8010e10 <__adddf3+0x184>
 8010df6:	f102 0214 	add.w	r2, r2, #20
 8010dfa:	bfd8      	it	le
 8010dfc:	f1c2 0c20 	rsble	ip, r2, #32
 8010e00:	fa01 f102 	lsl.w	r1, r1, r2
 8010e04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010e08:	bfdc      	itt	le
 8010e0a:	ea41 010c 	orrle.w	r1, r1, ip
 8010e0e:	4090      	lslle	r0, r2
 8010e10:	1ae4      	subs	r4, r4, r3
 8010e12:	bfa2      	ittt	ge
 8010e14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010e18:	4329      	orrge	r1, r5
 8010e1a:	bd30      	popge	{r4, r5, pc}
 8010e1c:	ea6f 0404 	mvn.w	r4, r4
 8010e20:	3c1f      	subs	r4, #31
 8010e22:	da1c      	bge.n	8010e5e <__adddf3+0x1d2>
 8010e24:	340c      	adds	r4, #12
 8010e26:	dc0e      	bgt.n	8010e46 <__adddf3+0x1ba>
 8010e28:	f104 0414 	add.w	r4, r4, #20
 8010e2c:	f1c4 0220 	rsb	r2, r4, #32
 8010e30:	fa20 f004 	lsr.w	r0, r0, r4
 8010e34:	fa01 f302 	lsl.w	r3, r1, r2
 8010e38:	ea40 0003 	orr.w	r0, r0, r3
 8010e3c:	fa21 f304 	lsr.w	r3, r1, r4
 8010e40:	ea45 0103 	orr.w	r1, r5, r3
 8010e44:	bd30      	pop	{r4, r5, pc}
 8010e46:	f1c4 040c 	rsb	r4, r4, #12
 8010e4a:	f1c4 0220 	rsb	r2, r4, #32
 8010e4e:	fa20 f002 	lsr.w	r0, r0, r2
 8010e52:	fa01 f304 	lsl.w	r3, r1, r4
 8010e56:	ea40 0003 	orr.w	r0, r0, r3
 8010e5a:	4629      	mov	r1, r5
 8010e5c:	bd30      	pop	{r4, r5, pc}
 8010e5e:	fa21 f004 	lsr.w	r0, r1, r4
 8010e62:	4629      	mov	r1, r5
 8010e64:	bd30      	pop	{r4, r5, pc}
 8010e66:	f094 0f00 	teq	r4, #0
 8010e6a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8010e6e:	bf06      	itte	eq
 8010e70:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8010e74:	3401      	addeq	r4, #1
 8010e76:	3d01      	subne	r5, #1
 8010e78:	e74e      	b.n	8010d18 <__adddf3+0x8c>
 8010e7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010e7e:	bf18      	it	ne
 8010e80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010e84:	d029      	beq.n	8010eda <__adddf3+0x24e>
 8010e86:	ea94 0f05 	teq	r4, r5
 8010e8a:	bf08      	it	eq
 8010e8c:	ea90 0f02 	teqeq	r0, r2
 8010e90:	d005      	beq.n	8010e9e <__adddf3+0x212>
 8010e92:	ea54 0c00 	orrs.w	ip, r4, r0
 8010e96:	bf04      	itt	eq
 8010e98:	4619      	moveq	r1, r3
 8010e9a:	4610      	moveq	r0, r2
 8010e9c:	bd30      	pop	{r4, r5, pc}
 8010e9e:	ea91 0f03 	teq	r1, r3
 8010ea2:	bf1e      	ittt	ne
 8010ea4:	2100      	movne	r1, #0
 8010ea6:	2000      	movne	r0, #0
 8010ea8:	bd30      	popne	{r4, r5, pc}
 8010eaa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010eae:	d105      	bne.n	8010ebc <__adddf3+0x230>
 8010eb0:	0040      	lsls	r0, r0, #1
 8010eb2:	4149      	adcs	r1, r1
 8010eb4:	bf28      	it	cs
 8010eb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8010eba:	bd30      	pop	{r4, r5, pc}
 8010ebc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8010ec0:	bf3c      	itt	cc
 8010ec2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8010ec6:	bd30      	popcc	{r4, r5, pc}
 8010ec8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010ecc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010ed0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010ed4:	f04f 0000 	mov.w	r0, #0
 8010ed8:	bd30      	pop	{r4, r5, pc}
 8010eda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010ede:	bf1a      	itte	ne
 8010ee0:	4619      	movne	r1, r3
 8010ee2:	4610      	movne	r0, r2
 8010ee4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010ee8:	bf1c      	itt	ne
 8010eea:	460b      	movne	r3, r1
 8010eec:	4602      	movne	r2, r0
 8010eee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010ef2:	bf06      	itte	eq
 8010ef4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010ef8:	ea91 0f03 	teqeq	r1, r3
 8010efc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010f00:	bd30      	pop	{r4, r5, pc}
 8010f02:	bf00      	nop

08010f04 <__aeabi_ui2d>:
 8010f04:	f090 0f00 	teq	r0, #0
 8010f08:	bf04      	itt	eq
 8010f0a:	2100      	moveq	r1, #0
 8010f0c:	4770      	bxeq	lr
 8010f0e:	b530      	push	{r4, r5, lr}
 8010f10:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010f14:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010f18:	f04f 0500 	mov.w	r5, #0
 8010f1c:	f04f 0100 	mov.w	r1, #0
 8010f20:	e750      	b.n	8010dc4 <__adddf3+0x138>
 8010f22:	bf00      	nop

08010f24 <__aeabi_i2d>:
 8010f24:	f090 0f00 	teq	r0, #0
 8010f28:	bf04      	itt	eq
 8010f2a:	2100      	moveq	r1, #0
 8010f2c:	4770      	bxeq	lr
 8010f2e:	b530      	push	{r4, r5, lr}
 8010f30:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010f34:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010f38:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8010f3c:	bf48      	it	mi
 8010f3e:	4240      	negmi	r0, r0
 8010f40:	f04f 0100 	mov.w	r1, #0
 8010f44:	e73e      	b.n	8010dc4 <__adddf3+0x138>
 8010f46:	bf00      	nop

08010f48 <__aeabi_f2d>:
 8010f48:	0042      	lsls	r2, r0, #1
 8010f4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010f4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010f52:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010f56:	bf1f      	itttt	ne
 8010f58:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8010f5c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010f60:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010f64:	4770      	bxne	lr
 8010f66:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8010f6a:	bf08      	it	eq
 8010f6c:	4770      	bxeq	lr
 8010f6e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8010f72:	bf04      	itt	eq
 8010f74:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8010f78:	4770      	bxeq	lr
 8010f7a:	b530      	push	{r4, r5, lr}
 8010f7c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8010f80:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010f84:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010f88:	e71c      	b.n	8010dc4 <__adddf3+0x138>
 8010f8a:	bf00      	nop

08010f8c <__aeabi_ul2d>:
 8010f8c:	ea50 0201 	orrs.w	r2, r0, r1
 8010f90:	bf08      	it	eq
 8010f92:	4770      	bxeq	lr
 8010f94:	b530      	push	{r4, r5, lr}
 8010f96:	f04f 0500 	mov.w	r5, #0
 8010f9a:	e00a      	b.n	8010fb2 <__aeabi_l2d+0x16>

08010f9c <__aeabi_l2d>:
 8010f9c:	ea50 0201 	orrs.w	r2, r0, r1
 8010fa0:	bf08      	it	eq
 8010fa2:	4770      	bxeq	lr
 8010fa4:	b530      	push	{r4, r5, lr}
 8010fa6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8010faa:	d502      	bpl.n	8010fb2 <__aeabi_l2d+0x16>
 8010fac:	4240      	negs	r0, r0
 8010fae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010fb2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010fb6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010fba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010fbe:	f43f aed8 	beq.w	8010d72 <__adddf3+0xe6>
 8010fc2:	f04f 0203 	mov.w	r2, #3
 8010fc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010fca:	bf18      	it	ne
 8010fcc:	3203      	addne	r2, #3
 8010fce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010fd2:	bf18      	it	ne
 8010fd4:	3203      	addne	r2, #3
 8010fd6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010fda:	f1c2 0320 	rsb	r3, r2, #32
 8010fde:	fa00 fc03 	lsl.w	ip, r0, r3
 8010fe2:	fa20 f002 	lsr.w	r0, r0, r2
 8010fe6:	fa01 fe03 	lsl.w	lr, r1, r3
 8010fea:	ea40 000e 	orr.w	r0, r0, lr
 8010fee:	fa21 f102 	lsr.w	r1, r1, r2
 8010ff2:	4414      	add	r4, r2
 8010ff4:	e6bd      	b.n	8010d72 <__adddf3+0xe6>
 8010ff6:	bf00      	nop

08010ff8 <__aeabi_dmul>:
 8010ff8:	b570      	push	{r4, r5, r6, lr}
 8010ffa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010ffe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8011002:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8011006:	bf1d      	ittte	ne
 8011008:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801100c:	ea94 0f0c 	teqne	r4, ip
 8011010:	ea95 0f0c 	teqne	r5, ip
 8011014:	f000 f8de 	bleq	80111d4 <__aeabi_dmul+0x1dc>
 8011018:	442c      	add	r4, r5
 801101a:	ea81 0603 	eor.w	r6, r1, r3
 801101e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8011022:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8011026:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801102a:	bf18      	it	ne
 801102c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8011030:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8011034:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011038:	d038      	beq.n	80110ac <__aeabi_dmul+0xb4>
 801103a:	fba0 ce02 	umull	ip, lr, r0, r2
 801103e:	f04f 0500 	mov.w	r5, #0
 8011042:	fbe1 e502 	umlal	lr, r5, r1, r2
 8011046:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801104a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801104e:	f04f 0600 	mov.w	r6, #0
 8011052:	fbe1 5603 	umlal	r5, r6, r1, r3
 8011056:	f09c 0f00 	teq	ip, #0
 801105a:	bf18      	it	ne
 801105c:	f04e 0e01 	orrne.w	lr, lr, #1
 8011060:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8011064:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8011068:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801106c:	d204      	bcs.n	8011078 <__aeabi_dmul+0x80>
 801106e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8011072:	416d      	adcs	r5, r5
 8011074:	eb46 0606 	adc.w	r6, r6, r6
 8011078:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801107c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8011080:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8011084:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8011088:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801108c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8011090:	bf88      	it	hi
 8011092:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8011096:	d81e      	bhi.n	80110d6 <__aeabi_dmul+0xde>
 8011098:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 801109c:	bf08      	it	eq
 801109e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80110a2:	f150 0000 	adcs.w	r0, r0, #0
 80110a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80110aa:	bd70      	pop	{r4, r5, r6, pc}
 80110ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80110b0:	ea46 0101 	orr.w	r1, r6, r1
 80110b4:	ea40 0002 	orr.w	r0, r0, r2
 80110b8:	ea81 0103 	eor.w	r1, r1, r3
 80110bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80110c0:	bfc2      	ittt	gt
 80110c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80110c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80110ca:	bd70      	popgt	{r4, r5, r6, pc}
 80110cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80110d0:	f04f 0e00 	mov.w	lr, #0
 80110d4:	3c01      	subs	r4, #1
 80110d6:	f300 80ab 	bgt.w	8011230 <__aeabi_dmul+0x238>
 80110da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80110de:	bfde      	ittt	le
 80110e0:	2000      	movle	r0, #0
 80110e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80110e6:	bd70      	pople	{r4, r5, r6, pc}
 80110e8:	f1c4 0400 	rsb	r4, r4, #0
 80110ec:	3c20      	subs	r4, #32
 80110ee:	da35      	bge.n	801115c <__aeabi_dmul+0x164>
 80110f0:	340c      	adds	r4, #12
 80110f2:	dc1b      	bgt.n	801112c <__aeabi_dmul+0x134>
 80110f4:	f104 0414 	add.w	r4, r4, #20
 80110f8:	f1c4 0520 	rsb	r5, r4, #32
 80110fc:	fa00 f305 	lsl.w	r3, r0, r5
 8011100:	fa20 f004 	lsr.w	r0, r0, r4
 8011104:	fa01 f205 	lsl.w	r2, r1, r5
 8011108:	ea40 0002 	orr.w	r0, r0, r2
 801110c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8011110:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8011114:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8011118:	fa21 f604 	lsr.w	r6, r1, r4
 801111c:	eb42 0106 	adc.w	r1, r2, r6
 8011120:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011124:	bf08      	it	eq
 8011126:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801112a:	bd70      	pop	{r4, r5, r6, pc}
 801112c:	f1c4 040c 	rsb	r4, r4, #12
 8011130:	f1c4 0520 	rsb	r5, r4, #32
 8011134:	fa00 f304 	lsl.w	r3, r0, r4
 8011138:	fa20 f005 	lsr.w	r0, r0, r5
 801113c:	fa01 f204 	lsl.w	r2, r1, r4
 8011140:	ea40 0002 	orr.w	r0, r0, r2
 8011144:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8011148:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801114c:	f141 0100 	adc.w	r1, r1, #0
 8011150:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011154:	bf08      	it	eq
 8011156:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801115a:	bd70      	pop	{r4, r5, r6, pc}
 801115c:	f1c4 0520 	rsb	r5, r4, #32
 8011160:	fa00 f205 	lsl.w	r2, r0, r5
 8011164:	ea4e 0e02 	orr.w	lr, lr, r2
 8011168:	fa20 f304 	lsr.w	r3, r0, r4
 801116c:	fa01 f205 	lsl.w	r2, r1, r5
 8011170:	ea43 0302 	orr.w	r3, r3, r2
 8011174:	fa21 f004 	lsr.w	r0, r1, r4
 8011178:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 801117c:	fa21 f204 	lsr.w	r2, r1, r4
 8011180:	ea20 0002 	bic.w	r0, r0, r2
 8011184:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8011188:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801118c:	bf08      	it	eq
 801118e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8011192:	bd70      	pop	{r4, r5, r6, pc}
 8011194:	f094 0f00 	teq	r4, #0
 8011198:	d10f      	bne.n	80111ba <__aeabi_dmul+0x1c2>
 801119a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 801119e:	0040      	lsls	r0, r0, #1
 80111a0:	eb41 0101 	adc.w	r1, r1, r1
 80111a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80111a8:	bf08      	it	eq
 80111aa:	3c01      	subeq	r4, #1
 80111ac:	d0f7      	beq.n	801119e <__aeabi_dmul+0x1a6>
 80111ae:	ea41 0106 	orr.w	r1, r1, r6
 80111b2:	f095 0f00 	teq	r5, #0
 80111b6:	bf18      	it	ne
 80111b8:	4770      	bxne	lr
 80111ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80111be:	0052      	lsls	r2, r2, #1
 80111c0:	eb43 0303 	adc.w	r3, r3, r3
 80111c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80111c8:	bf08      	it	eq
 80111ca:	3d01      	subeq	r5, #1
 80111cc:	d0f7      	beq.n	80111be <__aeabi_dmul+0x1c6>
 80111ce:	ea43 0306 	orr.w	r3, r3, r6
 80111d2:	4770      	bx	lr
 80111d4:	ea94 0f0c 	teq	r4, ip
 80111d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80111dc:	bf18      	it	ne
 80111de:	ea95 0f0c 	teqne	r5, ip
 80111e2:	d00c      	beq.n	80111fe <__aeabi_dmul+0x206>
 80111e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80111e8:	bf18      	it	ne
 80111ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80111ee:	d1d1      	bne.n	8011194 <__aeabi_dmul+0x19c>
 80111f0:	ea81 0103 	eor.w	r1, r1, r3
 80111f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80111f8:	f04f 0000 	mov.w	r0, #0
 80111fc:	bd70      	pop	{r4, r5, r6, pc}
 80111fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8011202:	bf06      	itte	eq
 8011204:	4610      	moveq	r0, r2
 8011206:	4619      	moveq	r1, r3
 8011208:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801120c:	d019      	beq.n	8011242 <__aeabi_dmul+0x24a>
 801120e:	ea94 0f0c 	teq	r4, ip
 8011212:	d102      	bne.n	801121a <__aeabi_dmul+0x222>
 8011214:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8011218:	d113      	bne.n	8011242 <__aeabi_dmul+0x24a>
 801121a:	ea95 0f0c 	teq	r5, ip
 801121e:	d105      	bne.n	801122c <__aeabi_dmul+0x234>
 8011220:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8011224:	bf1c      	itt	ne
 8011226:	4610      	movne	r0, r2
 8011228:	4619      	movne	r1, r3
 801122a:	d10a      	bne.n	8011242 <__aeabi_dmul+0x24a>
 801122c:	ea81 0103 	eor.w	r1, r1, r3
 8011230:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8011234:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8011238:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801123c:	f04f 0000 	mov.w	r0, #0
 8011240:	bd70      	pop	{r4, r5, r6, pc}
 8011242:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8011246:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801124a:	bd70      	pop	{r4, r5, r6, pc}

0801124c <__aeabi_ddiv>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8011252:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8011256:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801125a:	bf1d      	ittte	ne
 801125c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8011260:	ea94 0f0c 	teqne	r4, ip
 8011264:	ea95 0f0c 	teqne	r5, ip
 8011268:	f000 f8a7 	bleq	80113ba <__aeabi_ddiv+0x16e>
 801126c:	eba4 0405 	sub.w	r4, r4, r5
 8011270:	ea81 0e03 	eor.w	lr, r1, r3
 8011274:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8011278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801127c:	f000 8088 	beq.w	8011390 <__aeabi_ddiv+0x144>
 8011280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011284:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8011288:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801128c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8011290:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8011294:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8011298:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801129c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80112a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80112a4:	429d      	cmp	r5, r3
 80112a6:	bf08      	it	eq
 80112a8:	4296      	cmpeq	r6, r2
 80112aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80112ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80112b2:	d202      	bcs.n	80112ba <__aeabi_ddiv+0x6e>
 80112b4:	085b      	lsrs	r3, r3, #1
 80112b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80112ba:	1ab6      	subs	r6, r6, r2
 80112bc:	eb65 0503 	sbc.w	r5, r5, r3
 80112c0:	085b      	lsrs	r3, r3, #1
 80112c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80112c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80112ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80112ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80112d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80112d6:	bf22      	ittt	cs
 80112d8:	1ab6      	subcs	r6, r6, r2
 80112da:	4675      	movcs	r5, lr
 80112dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80112e0:	085b      	lsrs	r3, r3, #1
 80112e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80112e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80112ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80112ee:	bf22      	ittt	cs
 80112f0:	1ab6      	subcs	r6, r6, r2
 80112f2:	4675      	movcs	r5, lr
 80112f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80112f8:	085b      	lsrs	r3, r3, #1
 80112fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80112fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8011302:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011306:	bf22      	ittt	cs
 8011308:	1ab6      	subcs	r6, r6, r2
 801130a:	4675      	movcs	r5, lr
 801130c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8011310:	085b      	lsrs	r3, r3, #1
 8011312:	ea4f 0232 	mov.w	r2, r2, rrx
 8011316:	ebb6 0e02 	subs.w	lr, r6, r2
 801131a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801131e:	bf22      	ittt	cs
 8011320:	1ab6      	subcs	r6, r6, r2
 8011322:	4675      	movcs	r5, lr
 8011324:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8011328:	ea55 0e06 	orrs.w	lr, r5, r6
 801132c:	d018      	beq.n	8011360 <__aeabi_ddiv+0x114>
 801132e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8011332:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8011336:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801133a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801133e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8011342:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011346:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801134a:	d1c0      	bne.n	80112ce <__aeabi_ddiv+0x82>
 801134c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8011350:	d10b      	bne.n	801136a <__aeabi_ddiv+0x11e>
 8011352:	ea41 0100 	orr.w	r1, r1, r0
 8011356:	f04f 0000 	mov.w	r0, #0
 801135a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801135e:	e7b6      	b.n	80112ce <__aeabi_ddiv+0x82>
 8011360:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8011364:	bf04      	itt	eq
 8011366:	4301      	orreq	r1, r0
 8011368:	2000      	moveq	r0, #0
 801136a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801136e:	bf88      	it	hi
 8011370:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8011374:	f63f aeaf 	bhi.w	80110d6 <__aeabi_dmul+0xde>
 8011378:	ebb5 0c03 	subs.w	ip, r5, r3
 801137c:	bf04      	itt	eq
 801137e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8011382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011386:	f150 0000 	adcs.w	r0, r0, #0
 801138a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801138e:	bd70      	pop	{r4, r5, r6, pc}
 8011390:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8011394:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8011398:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801139c:	bfc2      	ittt	gt
 801139e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80113a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80113a6:	bd70      	popgt	{r4, r5, r6, pc}
 80113a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80113ac:	f04f 0e00 	mov.w	lr, #0
 80113b0:	3c01      	subs	r4, #1
 80113b2:	e690      	b.n	80110d6 <__aeabi_dmul+0xde>
 80113b4:	ea45 0e06 	orr.w	lr, r5, r6
 80113b8:	e68d      	b.n	80110d6 <__aeabi_dmul+0xde>
 80113ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80113be:	ea94 0f0c 	teq	r4, ip
 80113c2:	bf08      	it	eq
 80113c4:	ea95 0f0c 	teqeq	r5, ip
 80113c8:	f43f af3b 	beq.w	8011242 <__aeabi_dmul+0x24a>
 80113cc:	ea94 0f0c 	teq	r4, ip
 80113d0:	d10a      	bne.n	80113e8 <__aeabi_ddiv+0x19c>
 80113d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80113d6:	f47f af34 	bne.w	8011242 <__aeabi_dmul+0x24a>
 80113da:	ea95 0f0c 	teq	r5, ip
 80113de:	f47f af25 	bne.w	801122c <__aeabi_dmul+0x234>
 80113e2:	4610      	mov	r0, r2
 80113e4:	4619      	mov	r1, r3
 80113e6:	e72c      	b.n	8011242 <__aeabi_dmul+0x24a>
 80113e8:	ea95 0f0c 	teq	r5, ip
 80113ec:	d106      	bne.n	80113fc <__aeabi_ddiv+0x1b0>
 80113ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80113f2:	f43f aefd 	beq.w	80111f0 <__aeabi_dmul+0x1f8>
 80113f6:	4610      	mov	r0, r2
 80113f8:	4619      	mov	r1, r3
 80113fa:	e722      	b.n	8011242 <__aeabi_dmul+0x24a>
 80113fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8011400:	bf18      	it	ne
 8011402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8011406:	f47f aec5 	bne.w	8011194 <__aeabi_dmul+0x19c>
 801140a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801140e:	f47f af0d 	bne.w	801122c <__aeabi_dmul+0x234>
 8011412:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8011416:	f47f aeeb 	bne.w	80111f0 <__aeabi_dmul+0x1f8>
 801141a:	e712      	b.n	8011242 <__aeabi_dmul+0x24a>

0801141c <__gedf2>:
 801141c:	f04f 3cff 	mov.w	ip, #4294967295
 8011420:	e006      	b.n	8011430 <__cmpdf2+0x4>
 8011422:	bf00      	nop

08011424 <__ledf2>:
 8011424:	f04f 0c01 	mov.w	ip, #1
 8011428:	e002      	b.n	8011430 <__cmpdf2+0x4>
 801142a:	bf00      	nop

0801142c <__cmpdf2>:
 801142c:	f04f 0c01 	mov.w	ip, #1
 8011430:	f84d cd04 	str.w	ip, [sp, #-4]!
 8011434:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011438:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801143c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011440:	bf18      	it	ne
 8011442:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8011446:	d01b      	beq.n	8011480 <__cmpdf2+0x54>
 8011448:	b001      	add	sp, #4
 801144a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801144e:	bf0c      	ite	eq
 8011450:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8011454:	ea91 0f03 	teqne	r1, r3
 8011458:	bf02      	ittt	eq
 801145a:	ea90 0f02 	teqeq	r0, r2
 801145e:	2000      	moveq	r0, #0
 8011460:	4770      	bxeq	lr
 8011462:	f110 0f00 	cmn.w	r0, #0
 8011466:	ea91 0f03 	teq	r1, r3
 801146a:	bf58      	it	pl
 801146c:	4299      	cmppl	r1, r3
 801146e:	bf08      	it	eq
 8011470:	4290      	cmpeq	r0, r2
 8011472:	bf2c      	ite	cs
 8011474:	17d8      	asrcs	r0, r3, #31
 8011476:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801147a:	f040 0001 	orr.w	r0, r0, #1
 801147e:	4770      	bx	lr
 8011480:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011488:	d102      	bne.n	8011490 <__cmpdf2+0x64>
 801148a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801148e:	d107      	bne.n	80114a0 <__cmpdf2+0x74>
 8011490:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011494:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011498:	d1d6      	bne.n	8011448 <__cmpdf2+0x1c>
 801149a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801149e:	d0d3      	beq.n	8011448 <__cmpdf2+0x1c>
 80114a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop

080114a8 <__aeabi_cdrcmple>:
 80114a8:	4684      	mov	ip, r0
 80114aa:	4610      	mov	r0, r2
 80114ac:	4662      	mov	r2, ip
 80114ae:	468c      	mov	ip, r1
 80114b0:	4619      	mov	r1, r3
 80114b2:	4663      	mov	r3, ip
 80114b4:	e000      	b.n	80114b8 <__aeabi_cdcmpeq>
 80114b6:	bf00      	nop

080114b8 <__aeabi_cdcmpeq>:
 80114b8:	b501      	push	{r0, lr}
 80114ba:	f7ff ffb7 	bl	801142c <__cmpdf2>
 80114be:	2800      	cmp	r0, #0
 80114c0:	bf48      	it	mi
 80114c2:	f110 0f00 	cmnmi.w	r0, #0
 80114c6:	bd01      	pop	{r0, pc}

080114c8 <__aeabi_dcmpeq>:
 80114c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114cc:	f7ff fff4 	bl	80114b8 <__aeabi_cdcmpeq>
 80114d0:	bf0c      	ite	eq
 80114d2:	2001      	moveq	r0, #1
 80114d4:	2000      	movne	r0, #0
 80114d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80114da:	bf00      	nop

080114dc <__aeabi_dcmplt>:
 80114dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114e0:	f7ff ffea 	bl	80114b8 <__aeabi_cdcmpeq>
 80114e4:	bf34      	ite	cc
 80114e6:	2001      	movcc	r0, #1
 80114e8:	2000      	movcs	r0, #0
 80114ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80114ee:	bf00      	nop

080114f0 <__aeabi_dcmple>:
 80114f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114f4:	f7ff ffe0 	bl	80114b8 <__aeabi_cdcmpeq>
 80114f8:	bf94      	ite	ls
 80114fa:	2001      	movls	r0, #1
 80114fc:	2000      	movhi	r0, #0
 80114fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8011502:	bf00      	nop

08011504 <__aeabi_dcmpge>:
 8011504:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011508:	f7ff ffce 	bl	80114a8 <__aeabi_cdrcmple>
 801150c:	bf94      	ite	ls
 801150e:	2001      	movls	r0, #1
 8011510:	2000      	movhi	r0, #0
 8011512:	f85d fb08 	ldr.w	pc, [sp], #8
 8011516:	bf00      	nop

08011518 <__aeabi_dcmpgt>:
 8011518:	f84d ed08 	str.w	lr, [sp, #-8]!
 801151c:	f7ff ffc4 	bl	80114a8 <__aeabi_cdrcmple>
 8011520:	bf34      	ite	cc
 8011522:	2001      	movcc	r0, #1
 8011524:	2000      	movcs	r0, #0
 8011526:	f85d fb08 	ldr.w	pc, [sp], #8
 801152a:	bf00      	nop

0801152c <__aeabi_dcmpun>:
 801152c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011534:	d102      	bne.n	801153c <__aeabi_dcmpun+0x10>
 8011536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801153a:	d10a      	bne.n	8011552 <__aeabi_dcmpun+0x26>
 801153c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011544:	d102      	bne.n	801154c <__aeabi_dcmpun+0x20>
 8011546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801154a:	d102      	bne.n	8011552 <__aeabi_dcmpun+0x26>
 801154c:	f04f 0000 	mov.w	r0, #0
 8011550:	4770      	bx	lr
 8011552:	f04f 0001 	mov.w	r0, #1
 8011556:	4770      	bx	lr

08011558 <__aeabi_d2iz>:
 8011558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801155c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8011560:	d215      	bcs.n	801158e <__aeabi_d2iz+0x36>
 8011562:	d511      	bpl.n	8011588 <__aeabi_d2iz+0x30>
 8011564:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8011568:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801156c:	d912      	bls.n	8011594 <__aeabi_d2iz+0x3c>
 801156e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801157a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 801157e:	fa23 f002 	lsr.w	r0, r3, r2
 8011582:	bf18      	it	ne
 8011584:	4240      	negne	r0, r0
 8011586:	4770      	bx	lr
 8011588:	f04f 0000 	mov.w	r0, #0
 801158c:	4770      	bx	lr
 801158e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8011592:	d105      	bne.n	80115a0 <__aeabi_d2iz+0x48>
 8011594:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8011598:	bf08      	it	eq
 801159a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 801159e:	4770      	bx	lr
 80115a0:	f04f 0000 	mov.w	r0, #0
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop

080115a8 <__aeabi_d2uiz>:
 80115a8:	004a      	lsls	r2, r1, #1
 80115aa:	d211      	bcs.n	80115d0 <__aeabi_d2uiz+0x28>
 80115ac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80115b0:	d211      	bcs.n	80115d6 <__aeabi_d2uiz+0x2e>
 80115b2:	d50d      	bpl.n	80115d0 <__aeabi_d2uiz+0x28>
 80115b4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80115b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80115bc:	d40e      	bmi.n	80115dc <__aeabi_d2uiz+0x34>
 80115be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80115c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80115ca:	fa23 f002 	lsr.w	r0, r3, r2
 80115ce:	4770      	bx	lr
 80115d0:	f04f 0000 	mov.w	r0, #0
 80115d4:	4770      	bx	lr
 80115d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80115da:	d102      	bne.n	80115e2 <__aeabi_d2uiz+0x3a>
 80115dc:	f04f 30ff 	mov.w	r0, #4294967295
 80115e0:	4770      	bx	lr
 80115e2:	f04f 0000 	mov.w	r0, #0
 80115e6:	4770      	bx	lr

080115e8 <__aeabi_d2f>:
 80115e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80115ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80115f0:	bf24      	itt	cs
 80115f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80115f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80115fa:	d90d      	bls.n	8011618 <__aeabi_d2f+0x30>
 80115fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8011600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8011604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8011608:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 801160c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8011610:	bf08      	it	eq
 8011612:	f020 0001 	biceq.w	r0, r0, #1
 8011616:	4770      	bx	lr
 8011618:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 801161c:	d121      	bne.n	8011662 <__aeabi_d2f+0x7a>
 801161e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8011622:	bfbc      	itt	lt
 8011624:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8011628:	4770      	bxlt	lr
 801162a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801162e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8011632:	f1c2 0218 	rsb	r2, r2, #24
 8011636:	f1c2 0c20 	rsb	ip, r2, #32
 801163a:	fa10 f30c 	lsls.w	r3, r0, ip
 801163e:	fa20 f002 	lsr.w	r0, r0, r2
 8011642:	bf18      	it	ne
 8011644:	f040 0001 	orrne.w	r0, r0, #1
 8011648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801164c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8011650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8011654:	ea40 000c 	orr.w	r0, r0, ip
 8011658:	fa23 f302 	lsr.w	r3, r3, r2
 801165c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011660:	e7cc      	b.n	80115fc <__aeabi_d2f+0x14>
 8011662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8011666:	d107      	bne.n	8011678 <__aeabi_d2f+0x90>
 8011668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801166c:	bf1e      	ittt	ne
 801166e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8011672:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8011676:	4770      	bxne	lr
 8011678:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 801167c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8011680:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <__aeabi_uldivmod>:
 8011688:	b953      	cbnz	r3, 80116a0 <__aeabi_uldivmod+0x18>
 801168a:	b94a      	cbnz	r2, 80116a0 <__aeabi_uldivmod+0x18>
 801168c:	2900      	cmp	r1, #0
 801168e:	bf08      	it	eq
 8011690:	2800      	cmpeq	r0, #0
 8011692:	bf1c      	itt	ne
 8011694:	f04f 31ff 	movne.w	r1, #4294967295
 8011698:	f04f 30ff 	movne.w	r0, #4294967295
 801169c:	f000 b9a0 	b.w	80119e0 <__aeabi_idiv0>
 80116a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80116a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80116a8:	f000 f83c 	bl	8011724 <__udivmoddi4>
 80116ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80116b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116b4:	b004      	add	sp, #16
 80116b6:	4770      	bx	lr

080116b8 <__aeabi_d2lz>:
 80116b8:	b538      	push	{r3, r4, r5, lr}
 80116ba:	2200      	movs	r2, #0
 80116bc:	2300      	movs	r3, #0
 80116be:	4604      	mov	r4, r0
 80116c0:	460d      	mov	r5, r1
 80116c2:	f7ff ff0b 	bl	80114dc <__aeabi_dcmplt>
 80116c6:	b928      	cbnz	r0, 80116d4 <__aeabi_d2lz+0x1c>
 80116c8:	4620      	mov	r0, r4
 80116ca:	4629      	mov	r1, r5
 80116cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116d0:	f000 b80a 	b.w	80116e8 <__aeabi_d2ulz>
 80116d4:	4620      	mov	r0, r4
 80116d6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80116da:	f000 f805 	bl	80116e8 <__aeabi_d2ulz>
 80116de:	4240      	negs	r0, r0
 80116e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80116e4:	bd38      	pop	{r3, r4, r5, pc}
 80116e6:	bf00      	nop

080116e8 <__aeabi_d2ulz>:
 80116e8:	b5d0      	push	{r4, r6, r7, lr}
 80116ea:	4b0c      	ldr	r3, [pc, #48]	@ (801171c <__aeabi_d2ulz+0x34>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	4606      	mov	r6, r0
 80116f0:	460f      	mov	r7, r1
 80116f2:	f7ff fc81 	bl	8010ff8 <__aeabi_dmul>
 80116f6:	f7ff ff57 	bl	80115a8 <__aeabi_d2uiz>
 80116fa:	4604      	mov	r4, r0
 80116fc:	f7ff fc02 	bl	8010f04 <__aeabi_ui2d>
 8011700:	4b07      	ldr	r3, [pc, #28]	@ (8011720 <__aeabi_d2ulz+0x38>)
 8011702:	2200      	movs	r2, #0
 8011704:	f7ff fc78 	bl	8010ff8 <__aeabi_dmul>
 8011708:	4602      	mov	r2, r0
 801170a:	460b      	mov	r3, r1
 801170c:	4630      	mov	r0, r6
 801170e:	4639      	mov	r1, r7
 8011710:	f7ff faba 	bl	8010c88 <__aeabi_dsub>
 8011714:	f7ff ff48 	bl	80115a8 <__aeabi_d2uiz>
 8011718:	4621      	mov	r1, r4
 801171a:	bdd0      	pop	{r4, r6, r7, pc}
 801171c:	3df00000 	.word	0x3df00000
 8011720:	41f00000 	.word	0x41f00000

08011724 <__udivmoddi4>:
 8011724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011728:	9d08      	ldr	r5, [sp, #32]
 801172a:	460c      	mov	r4, r1
 801172c:	2b00      	cmp	r3, #0
 801172e:	d14e      	bne.n	80117ce <__udivmoddi4+0xaa>
 8011730:	4694      	mov	ip, r2
 8011732:	458c      	cmp	ip, r1
 8011734:	4686      	mov	lr, r0
 8011736:	fab2 f282 	clz	r2, r2
 801173a:	d962      	bls.n	8011802 <__udivmoddi4+0xde>
 801173c:	b14a      	cbz	r2, 8011752 <__udivmoddi4+0x2e>
 801173e:	f1c2 0320 	rsb	r3, r2, #32
 8011742:	4091      	lsls	r1, r2
 8011744:	fa20 f303 	lsr.w	r3, r0, r3
 8011748:	fa0c fc02 	lsl.w	ip, ip, r2
 801174c:	4319      	orrs	r1, r3
 801174e:	fa00 fe02 	lsl.w	lr, r0, r2
 8011752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8011756:	fa1f f68c 	uxth.w	r6, ip
 801175a:	fbb1 f4f7 	udiv	r4, r1, r7
 801175e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8011762:	fb07 1114 	mls	r1, r7, r4, r1
 8011766:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801176a:	fb04 f106 	mul.w	r1, r4, r6
 801176e:	4299      	cmp	r1, r3
 8011770:	d90a      	bls.n	8011788 <__udivmoddi4+0x64>
 8011772:	eb1c 0303 	adds.w	r3, ip, r3
 8011776:	f104 30ff 	add.w	r0, r4, #4294967295
 801177a:	f080 8112 	bcs.w	80119a2 <__udivmoddi4+0x27e>
 801177e:	4299      	cmp	r1, r3
 8011780:	f240 810f 	bls.w	80119a2 <__udivmoddi4+0x27e>
 8011784:	3c02      	subs	r4, #2
 8011786:	4463      	add	r3, ip
 8011788:	1a59      	subs	r1, r3, r1
 801178a:	fa1f f38e 	uxth.w	r3, lr
 801178e:	fbb1 f0f7 	udiv	r0, r1, r7
 8011792:	fb07 1110 	mls	r1, r7, r0, r1
 8011796:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801179a:	fb00 f606 	mul.w	r6, r0, r6
 801179e:	429e      	cmp	r6, r3
 80117a0:	d90a      	bls.n	80117b8 <__udivmoddi4+0x94>
 80117a2:	eb1c 0303 	adds.w	r3, ip, r3
 80117a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80117aa:	f080 80fc 	bcs.w	80119a6 <__udivmoddi4+0x282>
 80117ae:	429e      	cmp	r6, r3
 80117b0:	f240 80f9 	bls.w	80119a6 <__udivmoddi4+0x282>
 80117b4:	4463      	add	r3, ip
 80117b6:	3802      	subs	r0, #2
 80117b8:	1b9b      	subs	r3, r3, r6
 80117ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80117be:	2100      	movs	r1, #0
 80117c0:	b11d      	cbz	r5, 80117ca <__udivmoddi4+0xa6>
 80117c2:	40d3      	lsrs	r3, r2
 80117c4:	2200      	movs	r2, #0
 80117c6:	e9c5 3200 	strd	r3, r2, [r5]
 80117ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ce:	428b      	cmp	r3, r1
 80117d0:	d905      	bls.n	80117de <__udivmoddi4+0xba>
 80117d2:	b10d      	cbz	r5, 80117d8 <__udivmoddi4+0xb4>
 80117d4:	e9c5 0100 	strd	r0, r1, [r5]
 80117d8:	2100      	movs	r1, #0
 80117da:	4608      	mov	r0, r1
 80117dc:	e7f5      	b.n	80117ca <__udivmoddi4+0xa6>
 80117de:	fab3 f183 	clz	r1, r3
 80117e2:	2900      	cmp	r1, #0
 80117e4:	d146      	bne.n	8011874 <__udivmoddi4+0x150>
 80117e6:	42a3      	cmp	r3, r4
 80117e8:	d302      	bcc.n	80117f0 <__udivmoddi4+0xcc>
 80117ea:	4290      	cmp	r0, r2
 80117ec:	f0c0 80f0 	bcc.w	80119d0 <__udivmoddi4+0x2ac>
 80117f0:	1a86      	subs	r6, r0, r2
 80117f2:	eb64 0303 	sbc.w	r3, r4, r3
 80117f6:	2001      	movs	r0, #1
 80117f8:	2d00      	cmp	r5, #0
 80117fa:	d0e6      	beq.n	80117ca <__udivmoddi4+0xa6>
 80117fc:	e9c5 6300 	strd	r6, r3, [r5]
 8011800:	e7e3      	b.n	80117ca <__udivmoddi4+0xa6>
 8011802:	2a00      	cmp	r2, #0
 8011804:	f040 8090 	bne.w	8011928 <__udivmoddi4+0x204>
 8011808:	eba1 040c 	sub.w	r4, r1, ip
 801180c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011810:	fa1f f78c 	uxth.w	r7, ip
 8011814:	2101      	movs	r1, #1
 8011816:	fbb4 f6f8 	udiv	r6, r4, r8
 801181a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801181e:	fb08 4416 	mls	r4, r8, r6, r4
 8011822:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011826:	fb07 f006 	mul.w	r0, r7, r6
 801182a:	4298      	cmp	r0, r3
 801182c:	d908      	bls.n	8011840 <__udivmoddi4+0x11c>
 801182e:	eb1c 0303 	adds.w	r3, ip, r3
 8011832:	f106 34ff 	add.w	r4, r6, #4294967295
 8011836:	d202      	bcs.n	801183e <__udivmoddi4+0x11a>
 8011838:	4298      	cmp	r0, r3
 801183a:	f200 80cd 	bhi.w	80119d8 <__udivmoddi4+0x2b4>
 801183e:	4626      	mov	r6, r4
 8011840:	1a1c      	subs	r4, r3, r0
 8011842:	fa1f f38e 	uxth.w	r3, lr
 8011846:	fbb4 f0f8 	udiv	r0, r4, r8
 801184a:	fb08 4410 	mls	r4, r8, r0, r4
 801184e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011852:	fb00 f707 	mul.w	r7, r0, r7
 8011856:	429f      	cmp	r7, r3
 8011858:	d908      	bls.n	801186c <__udivmoddi4+0x148>
 801185a:	eb1c 0303 	adds.w	r3, ip, r3
 801185e:	f100 34ff 	add.w	r4, r0, #4294967295
 8011862:	d202      	bcs.n	801186a <__udivmoddi4+0x146>
 8011864:	429f      	cmp	r7, r3
 8011866:	f200 80b0 	bhi.w	80119ca <__udivmoddi4+0x2a6>
 801186a:	4620      	mov	r0, r4
 801186c:	1bdb      	subs	r3, r3, r7
 801186e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8011872:	e7a5      	b.n	80117c0 <__udivmoddi4+0x9c>
 8011874:	f1c1 0620 	rsb	r6, r1, #32
 8011878:	408b      	lsls	r3, r1
 801187a:	fa22 f706 	lsr.w	r7, r2, r6
 801187e:	431f      	orrs	r7, r3
 8011880:	fa20 fc06 	lsr.w	ip, r0, r6
 8011884:	fa04 f301 	lsl.w	r3, r4, r1
 8011888:	ea43 030c 	orr.w	r3, r3, ip
 801188c:	40f4      	lsrs	r4, r6
 801188e:	fa00 f801 	lsl.w	r8, r0, r1
 8011892:	0c38      	lsrs	r0, r7, #16
 8011894:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8011898:	fbb4 fef0 	udiv	lr, r4, r0
 801189c:	fa1f fc87 	uxth.w	ip, r7
 80118a0:	fb00 441e 	mls	r4, r0, lr, r4
 80118a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80118a8:	fb0e f90c 	mul.w	r9, lr, ip
 80118ac:	45a1      	cmp	r9, r4
 80118ae:	fa02 f201 	lsl.w	r2, r2, r1
 80118b2:	d90a      	bls.n	80118ca <__udivmoddi4+0x1a6>
 80118b4:	193c      	adds	r4, r7, r4
 80118b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80118ba:	f080 8084 	bcs.w	80119c6 <__udivmoddi4+0x2a2>
 80118be:	45a1      	cmp	r9, r4
 80118c0:	f240 8081 	bls.w	80119c6 <__udivmoddi4+0x2a2>
 80118c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80118c8:	443c      	add	r4, r7
 80118ca:	eba4 0409 	sub.w	r4, r4, r9
 80118ce:	fa1f f983 	uxth.w	r9, r3
 80118d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80118d6:	fb00 4413 	mls	r4, r0, r3, r4
 80118da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80118de:	fb03 fc0c 	mul.w	ip, r3, ip
 80118e2:	45a4      	cmp	ip, r4
 80118e4:	d907      	bls.n	80118f6 <__udivmoddi4+0x1d2>
 80118e6:	193c      	adds	r4, r7, r4
 80118e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80118ec:	d267      	bcs.n	80119be <__udivmoddi4+0x29a>
 80118ee:	45a4      	cmp	ip, r4
 80118f0:	d965      	bls.n	80119be <__udivmoddi4+0x29a>
 80118f2:	3b02      	subs	r3, #2
 80118f4:	443c      	add	r4, r7
 80118f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80118fa:	fba0 9302 	umull	r9, r3, r0, r2
 80118fe:	eba4 040c 	sub.w	r4, r4, ip
 8011902:	429c      	cmp	r4, r3
 8011904:	46ce      	mov	lr, r9
 8011906:	469c      	mov	ip, r3
 8011908:	d351      	bcc.n	80119ae <__udivmoddi4+0x28a>
 801190a:	d04e      	beq.n	80119aa <__udivmoddi4+0x286>
 801190c:	b155      	cbz	r5, 8011924 <__udivmoddi4+0x200>
 801190e:	ebb8 030e 	subs.w	r3, r8, lr
 8011912:	eb64 040c 	sbc.w	r4, r4, ip
 8011916:	fa04 f606 	lsl.w	r6, r4, r6
 801191a:	40cb      	lsrs	r3, r1
 801191c:	431e      	orrs	r6, r3
 801191e:	40cc      	lsrs	r4, r1
 8011920:	e9c5 6400 	strd	r6, r4, [r5]
 8011924:	2100      	movs	r1, #0
 8011926:	e750      	b.n	80117ca <__udivmoddi4+0xa6>
 8011928:	f1c2 0320 	rsb	r3, r2, #32
 801192c:	fa20 f103 	lsr.w	r1, r0, r3
 8011930:	fa0c fc02 	lsl.w	ip, ip, r2
 8011934:	fa24 f303 	lsr.w	r3, r4, r3
 8011938:	4094      	lsls	r4, r2
 801193a:	430c      	orrs	r4, r1
 801193c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011940:	fa00 fe02 	lsl.w	lr, r0, r2
 8011944:	fa1f f78c 	uxth.w	r7, ip
 8011948:	fbb3 f0f8 	udiv	r0, r3, r8
 801194c:	fb08 3110 	mls	r1, r8, r0, r3
 8011950:	0c23      	lsrs	r3, r4, #16
 8011952:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011956:	fb00 f107 	mul.w	r1, r0, r7
 801195a:	4299      	cmp	r1, r3
 801195c:	d908      	bls.n	8011970 <__udivmoddi4+0x24c>
 801195e:	eb1c 0303 	adds.w	r3, ip, r3
 8011962:	f100 36ff 	add.w	r6, r0, #4294967295
 8011966:	d22c      	bcs.n	80119c2 <__udivmoddi4+0x29e>
 8011968:	4299      	cmp	r1, r3
 801196a:	d92a      	bls.n	80119c2 <__udivmoddi4+0x29e>
 801196c:	3802      	subs	r0, #2
 801196e:	4463      	add	r3, ip
 8011970:	1a5b      	subs	r3, r3, r1
 8011972:	b2a4      	uxth	r4, r4
 8011974:	fbb3 f1f8 	udiv	r1, r3, r8
 8011978:	fb08 3311 	mls	r3, r8, r1, r3
 801197c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011980:	fb01 f307 	mul.w	r3, r1, r7
 8011984:	42a3      	cmp	r3, r4
 8011986:	d908      	bls.n	801199a <__udivmoddi4+0x276>
 8011988:	eb1c 0404 	adds.w	r4, ip, r4
 801198c:	f101 36ff 	add.w	r6, r1, #4294967295
 8011990:	d213      	bcs.n	80119ba <__udivmoddi4+0x296>
 8011992:	42a3      	cmp	r3, r4
 8011994:	d911      	bls.n	80119ba <__udivmoddi4+0x296>
 8011996:	3902      	subs	r1, #2
 8011998:	4464      	add	r4, ip
 801199a:	1ae4      	subs	r4, r4, r3
 801199c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80119a0:	e739      	b.n	8011816 <__udivmoddi4+0xf2>
 80119a2:	4604      	mov	r4, r0
 80119a4:	e6f0      	b.n	8011788 <__udivmoddi4+0x64>
 80119a6:	4608      	mov	r0, r1
 80119a8:	e706      	b.n	80117b8 <__udivmoddi4+0x94>
 80119aa:	45c8      	cmp	r8, r9
 80119ac:	d2ae      	bcs.n	801190c <__udivmoddi4+0x1e8>
 80119ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80119b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80119b6:	3801      	subs	r0, #1
 80119b8:	e7a8      	b.n	801190c <__udivmoddi4+0x1e8>
 80119ba:	4631      	mov	r1, r6
 80119bc:	e7ed      	b.n	801199a <__udivmoddi4+0x276>
 80119be:	4603      	mov	r3, r0
 80119c0:	e799      	b.n	80118f6 <__udivmoddi4+0x1d2>
 80119c2:	4630      	mov	r0, r6
 80119c4:	e7d4      	b.n	8011970 <__udivmoddi4+0x24c>
 80119c6:	46d6      	mov	lr, sl
 80119c8:	e77f      	b.n	80118ca <__udivmoddi4+0x1a6>
 80119ca:	4463      	add	r3, ip
 80119cc:	3802      	subs	r0, #2
 80119ce:	e74d      	b.n	801186c <__udivmoddi4+0x148>
 80119d0:	4606      	mov	r6, r0
 80119d2:	4623      	mov	r3, r4
 80119d4:	4608      	mov	r0, r1
 80119d6:	e70f      	b.n	80117f8 <__udivmoddi4+0xd4>
 80119d8:	3e02      	subs	r6, #2
 80119da:	4463      	add	r3, ip
 80119dc:	e730      	b.n	8011840 <__udivmoddi4+0x11c>
 80119de:	bf00      	nop

080119e0 <__aeabi_idiv0>:
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop

080119e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80119e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8011a1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80119e8:	f7ef f9fc 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80119ec:	480c      	ldr	r0, [pc, #48]	@ (8011a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80119ee:	490d      	ldr	r1, [pc, #52]	@ (8011a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80119f0:	4a0d      	ldr	r2, [pc, #52]	@ (8011a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80119f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80119f4:	e002      	b.n	80119fc <LoopCopyDataInit>

080119f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80119f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80119f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80119fa:	3304      	adds	r3, #4

080119fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80119fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80119fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011a00:	d3f9      	bcc.n	80119f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011a02:	4a0a      	ldr	r2, [pc, #40]	@ (8011a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011a04:	4c0a      	ldr	r4, [pc, #40]	@ (8011a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8011a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011a08:	e001      	b.n	8011a0e <LoopFillZerobss>

08011a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011a0c:	3204      	adds	r2, #4

08011a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011a10:	d3fb      	bcc.n	8011a0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8011a12:	f000 fff9 	bl	8012a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011a16:	f7ee fbfb 	bl	8000210 <main>
  bx  lr    
 8011a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011a24:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8011a28:	080177b8 	.word	0x080177b8
  ldr r2, =_sbss
 8011a2c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8011a30:	20000404 	.word	0x20000404

08011a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011a34:	e7fe      	b.n	8011a34 <ADC_IRQHandler>

08011a36 <__cvt>:
 8011a36:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a3a:	ec57 6b10 	vmov	r6, r7, d0
 8011a3e:	2f00      	cmp	r7, #0
 8011a40:	460c      	mov	r4, r1
 8011a42:	4619      	mov	r1, r3
 8011a44:	463b      	mov	r3, r7
 8011a46:	bfbb      	ittet	lt
 8011a48:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011a4c:	461f      	movlt	r7, r3
 8011a4e:	2300      	movge	r3, #0
 8011a50:	232d      	movlt	r3, #45	@ 0x2d
 8011a52:	700b      	strb	r3, [r1, #0]
 8011a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011a56:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011a5a:	4691      	mov	r9, r2
 8011a5c:	f023 0820 	bic.w	r8, r3, #32
 8011a60:	bfbc      	itt	lt
 8011a62:	4632      	movlt	r2, r6
 8011a64:	4616      	movlt	r6, r2
 8011a66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011a6a:	d005      	beq.n	8011a78 <__cvt+0x42>
 8011a6c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011a70:	d100      	bne.n	8011a74 <__cvt+0x3e>
 8011a72:	3401      	adds	r4, #1
 8011a74:	2102      	movs	r1, #2
 8011a76:	e000      	b.n	8011a7a <__cvt+0x44>
 8011a78:	2103      	movs	r1, #3
 8011a7a:	ab03      	add	r3, sp, #12
 8011a7c:	9301      	str	r3, [sp, #4]
 8011a7e:	ab02      	add	r3, sp, #8
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	ec47 6b10 	vmov	d0, r6, r7
 8011a86:	4653      	mov	r3, sl
 8011a88:	4622      	mov	r2, r4
 8011a8a:	f001 f875 	bl	8012b78 <_dtoa_r>
 8011a8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011a92:	4605      	mov	r5, r0
 8011a94:	d119      	bne.n	8011aca <__cvt+0x94>
 8011a96:	f019 0f01 	tst.w	r9, #1
 8011a9a:	d00e      	beq.n	8011aba <__cvt+0x84>
 8011a9c:	eb00 0904 	add.w	r9, r0, r4
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	4639      	mov	r1, r7
 8011aa8:	f7ff fd0e 	bl	80114c8 <__aeabi_dcmpeq>
 8011aac:	b108      	cbz	r0, 8011ab2 <__cvt+0x7c>
 8011aae:	f8cd 900c 	str.w	r9, [sp, #12]
 8011ab2:	2230      	movs	r2, #48	@ 0x30
 8011ab4:	9b03      	ldr	r3, [sp, #12]
 8011ab6:	454b      	cmp	r3, r9
 8011ab8:	d31e      	bcc.n	8011af8 <__cvt+0xc2>
 8011aba:	9b03      	ldr	r3, [sp, #12]
 8011abc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011abe:	1b5b      	subs	r3, r3, r5
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	6013      	str	r3, [r2, #0]
 8011ac4:	b004      	add	sp, #16
 8011ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011ace:	eb00 0904 	add.w	r9, r0, r4
 8011ad2:	d1e5      	bne.n	8011aa0 <__cvt+0x6a>
 8011ad4:	7803      	ldrb	r3, [r0, #0]
 8011ad6:	2b30      	cmp	r3, #48	@ 0x30
 8011ad8:	d10a      	bne.n	8011af0 <__cvt+0xba>
 8011ada:	2200      	movs	r2, #0
 8011adc:	2300      	movs	r3, #0
 8011ade:	4630      	mov	r0, r6
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	f7ff fcf1 	bl	80114c8 <__aeabi_dcmpeq>
 8011ae6:	b918      	cbnz	r0, 8011af0 <__cvt+0xba>
 8011ae8:	f1c4 0401 	rsb	r4, r4, #1
 8011aec:	f8ca 4000 	str.w	r4, [sl]
 8011af0:	f8da 3000 	ldr.w	r3, [sl]
 8011af4:	4499      	add	r9, r3
 8011af6:	e7d3      	b.n	8011aa0 <__cvt+0x6a>
 8011af8:	1c59      	adds	r1, r3, #1
 8011afa:	9103      	str	r1, [sp, #12]
 8011afc:	701a      	strb	r2, [r3, #0]
 8011afe:	e7d9      	b.n	8011ab4 <__cvt+0x7e>

08011b00 <__exponent>:
 8011b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b02:	2900      	cmp	r1, #0
 8011b04:	bfba      	itte	lt
 8011b06:	4249      	neglt	r1, r1
 8011b08:	232d      	movlt	r3, #45	@ 0x2d
 8011b0a:	232b      	movge	r3, #43	@ 0x2b
 8011b0c:	2909      	cmp	r1, #9
 8011b0e:	7002      	strb	r2, [r0, #0]
 8011b10:	7043      	strb	r3, [r0, #1]
 8011b12:	dd29      	ble.n	8011b68 <__exponent+0x68>
 8011b14:	f10d 0307 	add.w	r3, sp, #7
 8011b18:	461d      	mov	r5, r3
 8011b1a:	270a      	movs	r7, #10
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011b22:	fb07 1416 	mls	r4, r7, r6, r1
 8011b26:	3430      	adds	r4, #48	@ 0x30
 8011b28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011b2c:	460c      	mov	r4, r1
 8011b2e:	2c63      	cmp	r4, #99	@ 0x63
 8011b30:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b34:	4631      	mov	r1, r6
 8011b36:	dcf1      	bgt.n	8011b1c <__exponent+0x1c>
 8011b38:	3130      	adds	r1, #48	@ 0x30
 8011b3a:	1e94      	subs	r4, r2, #2
 8011b3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011b40:	1c41      	adds	r1, r0, #1
 8011b42:	4623      	mov	r3, r4
 8011b44:	42ab      	cmp	r3, r5
 8011b46:	d30a      	bcc.n	8011b5e <__exponent+0x5e>
 8011b48:	f10d 0309 	add.w	r3, sp, #9
 8011b4c:	1a9b      	subs	r3, r3, r2
 8011b4e:	42ac      	cmp	r4, r5
 8011b50:	bf88      	it	hi
 8011b52:	2300      	movhi	r3, #0
 8011b54:	3302      	adds	r3, #2
 8011b56:	4403      	add	r3, r0
 8011b58:	1a18      	subs	r0, r3, r0
 8011b5a:	b003      	add	sp, #12
 8011b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011b62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011b66:	e7ed      	b.n	8011b44 <__exponent+0x44>
 8011b68:	2330      	movs	r3, #48	@ 0x30
 8011b6a:	3130      	adds	r1, #48	@ 0x30
 8011b6c:	7083      	strb	r3, [r0, #2]
 8011b6e:	70c1      	strb	r1, [r0, #3]
 8011b70:	1d03      	adds	r3, r0, #4
 8011b72:	e7f1      	b.n	8011b58 <__exponent+0x58>

08011b74 <_printf_float>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	b08d      	sub	sp, #52	@ 0x34
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011b80:	4616      	mov	r6, r2
 8011b82:	461f      	mov	r7, r3
 8011b84:	4605      	mov	r5, r0
 8011b86:	f000 feef 	bl	8012968 <_localeconv_r>
 8011b8a:	6803      	ldr	r3, [r0, #0]
 8011b8c:	9304      	str	r3, [sp, #16]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7ff f86e 	bl	8010c70 <strlen>
 8011b94:	2300      	movs	r3, #0
 8011b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b98:	f8d8 3000 	ldr.w	r3, [r8]
 8011b9c:	9005      	str	r0, [sp, #20]
 8011b9e:	3307      	adds	r3, #7
 8011ba0:	f023 0307 	bic.w	r3, r3, #7
 8011ba4:	f103 0208 	add.w	r2, r3, #8
 8011ba8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011bac:	f8d4 b000 	ldr.w	fp, [r4]
 8011bb0:	f8c8 2000 	str.w	r2, [r8]
 8011bb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011bbc:	9307      	str	r3, [sp, #28]
 8011bbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8011bc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011bc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bca:	4b9c      	ldr	r3, [pc, #624]	@ (8011e3c <_printf_float+0x2c8>)
 8011bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd0:	f7ff fcac 	bl	801152c <__aeabi_dcmpun>
 8011bd4:	bb70      	cbnz	r0, 8011c34 <_printf_float+0xc0>
 8011bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bda:	4b98      	ldr	r3, [pc, #608]	@ (8011e3c <_printf_float+0x2c8>)
 8011bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8011be0:	f7ff fc86 	bl	80114f0 <__aeabi_dcmple>
 8011be4:	bb30      	cbnz	r0, 8011c34 <_printf_float+0xc0>
 8011be6:	2200      	movs	r2, #0
 8011be8:	2300      	movs	r3, #0
 8011bea:	4640      	mov	r0, r8
 8011bec:	4649      	mov	r1, r9
 8011bee:	f7ff fc75 	bl	80114dc <__aeabi_dcmplt>
 8011bf2:	b110      	cbz	r0, 8011bfa <_printf_float+0x86>
 8011bf4:	232d      	movs	r3, #45	@ 0x2d
 8011bf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bfa:	4a91      	ldr	r2, [pc, #580]	@ (8011e40 <_printf_float+0x2cc>)
 8011bfc:	4b91      	ldr	r3, [pc, #580]	@ (8011e44 <_printf_float+0x2d0>)
 8011bfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011c02:	bf94      	ite	ls
 8011c04:	4690      	movls	r8, r2
 8011c06:	4698      	movhi	r8, r3
 8011c08:	2303      	movs	r3, #3
 8011c0a:	6123      	str	r3, [r4, #16]
 8011c0c:	f02b 0304 	bic.w	r3, fp, #4
 8011c10:	6023      	str	r3, [r4, #0]
 8011c12:	f04f 0900 	mov.w	r9, #0
 8011c16:	9700      	str	r7, [sp, #0]
 8011c18:	4633      	mov	r3, r6
 8011c1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011c1c:	4621      	mov	r1, r4
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f000 f9d2 	bl	8011fc8 <_printf_common>
 8011c24:	3001      	adds	r0, #1
 8011c26:	f040 808d 	bne.w	8011d44 <_printf_float+0x1d0>
 8011c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2e:	b00d      	add	sp, #52	@ 0x34
 8011c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c34:	4642      	mov	r2, r8
 8011c36:	464b      	mov	r3, r9
 8011c38:	4640      	mov	r0, r8
 8011c3a:	4649      	mov	r1, r9
 8011c3c:	f7ff fc76 	bl	801152c <__aeabi_dcmpun>
 8011c40:	b140      	cbz	r0, 8011c54 <_printf_float+0xe0>
 8011c42:	464b      	mov	r3, r9
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	bfbc      	itt	lt
 8011c48:	232d      	movlt	r3, #45	@ 0x2d
 8011c4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8011e48 <_printf_float+0x2d4>)
 8011c50:	4b7e      	ldr	r3, [pc, #504]	@ (8011e4c <_printf_float+0x2d8>)
 8011c52:	e7d4      	b.n	8011bfe <_printf_float+0x8a>
 8011c54:	6863      	ldr	r3, [r4, #4]
 8011c56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011c5a:	9206      	str	r2, [sp, #24]
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	d13b      	bne.n	8011cd8 <_printf_float+0x164>
 8011c60:	2306      	movs	r3, #6
 8011c62:	6063      	str	r3, [r4, #4]
 8011c64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011c68:	2300      	movs	r3, #0
 8011c6a:	6022      	str	r2, [r4, #0]
 8011c6c:	9303      	str	r3, [sp, #12]
 8011c6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011c74:	ab09      	add	r3, sp, #36	@ 0x24
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	6861      	ldr	r1, [r4, #4]
 8011c7a:	ec49 8b10 	vmov	d0, r8, r9
 8011c7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011c82:	4628      	mov	r0, r5
 8011c84:	f7ff fed7 	bl	8011a36 <__cvt>
 8011c88:	9b06      	ldr	r3, [sp, #24]
 8011c8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c8c:	2b47      	cmp	r3, #71	@ 0x47
 8011c8e:	4680      	mov	r8, r0
 8011c90:	d129      	bne.n	8011ce6 <_printf_float+0x172>
 8011c92:	1cc8      	adds	r0, r1, #3
 8011c94:	db02      	blt.n	8011c9c <_printf_float+0x128>
 8011c96:	6863      	ldr	r3, [r4, #4]
 8011c98:	4299      	cmp	r1, r3
 8011c9a:	dd41      	ble.n	8011d20 <_printf_float+0x1ac>
 8011c9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011ca0:	fa5f fa8a 	uxtb.w	sl, sl
 8011ca4:	3901      	subs	r1, #1
 8011ca6:	4652      	mov	r2, sl
 8011ca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011cac:	9109      	str	r1, [sp, #36]	@ 0x24
 8011cae:	f7ff ff27 	bl	8011b00 <__exponent>
 8011cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011cb4:	1813      	adds	r3, r2, r0
 8011cb6:	2a01      	cmp	r2, #1
 8011cb8:	4681      	mov	r9, r0
 8011cba:	6123      	str	r3, [r4, #16]
 8011cbc:	dc02      	bgt.n	8011cc4 <_printf_float+0x150>
 8011cbe:	6822      	ldr	r2, [r4, #0]
 8011cc0:	07d2      	lsls	r2, r2, #31
 8011cc2:	d501      	bpl.n	8011cc8 <_printf_float+0x154>
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	6123      	str	r3, [r4, #16]
 8011cc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d0a2      	beq.n	8011c16 <_printf_float+0xa2>
 8011cd0:	232d      	movs	r3, #45	@ 0x2d
 8011cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cd6:	e79e      	b.n	8011c16 <_printf_float+0xa2>
 8011cd8:	9a06      	ldr	r2, [sp, #24]
 8011cda:	2a47      	cmp	r2, #71	@ 0x47
 8011cdc:	d1c2      	bne.n	8011c64 <_printf_float+0xf0>
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d1c0      	bne.n	8011c64 <_printf_float+0xf0>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e7bd      	b.n	8011c62 <_printf_float+0xee>
 8011ce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011cea:	d9db      	bls.n	8011ca4 <_printf_float+0x130>
 8011cec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011cf0:	d118      	bne.n	8011d24 <_printf_float+0x1b0>
 8011cf2:	2900      	cmp	r1, #0
 8011cf4:	6863      	ldr	r3, [r4, #4]
 8011cf6:	dd0b      	ble.n	8011d10 <_printf_float+0x19c>
 8011cf8:	6121      	str	r1, [r4, #16]
 8011cfa:	b913      	cbnz	r3, 8011d02 <_printf_float+0x18e>
 8011cfc:	6822      	ldr	r2, [r4, #0]
 8011cfe:	07d0      	lsls	r0, r2, #31
 8011d00:	d502      	bpl.n	8011d08 <_printf_float+0x194>
 8011d02:	3301      	adds	r3, #1
 8011d04:	440b      	add	r3, r1
 8011d06:	6123      	str	r3, [r4, #16]
 8011d08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011d0a:	f04f 0900 	mov.w	r9, #0
 8011d0e:	e7db      	b.n	8011cc8 <_printf_float+0x154>
 8011d10:	b913      	cbnz	r3, 8011d18 <_printf_float+0x1a4>
 8011d12:	6822      	ldr	r2, [r4, #0]
 8011d14:	07d2      	lsls	r2, r2, #31
 8011d16:	d501      	bpl.n	8011d1c <_printf_float+0x1a8>
 8011d18:	3302      	adds	r3, #2
 8011d1a:	e7f4      	b.n	8011d06 <_printf_float+0x192>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e7f2      	b.n	8011d06 <_printf_float+0x192>
 8011d20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d26:	4299      	cmp	r1, r3
 8011d28:	db05      	blt.n	8011d36 <_printf_float+0x1c2>
 8011d2a:	6823      	ldr	r3, [r4, #0]
 8011d2c:	6121      	str	r1, [r4, #16]
 8011d2e:	07d8      	lsls	r0, r3, #31
 8011d30:	d5ea      	bpl.n	8011d08 <_printf_float+0x194>
 8011d32:	1c4b      	adds	r3, r1, #1
 8011d34:	e7e7      	b.n	8011d06 <_printf_float+0x192>
 8011d36:	2900      	cmp	r1, #0
 8011d38:	bfd4      	ite	le
 8011d3a:	f1c1 0202 	rsble	r2, r1, #2
 8011d3e:	2201      	movgt	r2, #1
 8011d40:	4413      	add	r3, r2
 8011d42:	e7e0      	b.n	8011d06 <_printf_float+0x192>
 8011d44:	6823      	ldr	r3, [r4, #0]
 8011d46:	055a      	lsls	r2, r3, #21
 8011d48:	d407      	bmi.n	8011d5a <_printf_float+0x1e6>
 8011d4a:	6923      	ldr	r3, [r4, #16]
 8011d4c:	4642      	mov	r2, r8
 8011d4e:	4631      	mov	r1, r6
 8011d50:	4628      	mov	r0, r5
 8011d52:	47b8      	blx	r7
 8011d54:	3001      	adds	r0, #1
 8011d56:	d12b      	bne.n	8011db0 <_printf_float+0x23c>
 8011d58:	e767      	b.n	8011c2a <_printf_float+0xb6>
 8011d5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011d5e:	f240 80dd 	bls.w	8011f1c <_printf_float+0x3a8>
 8011d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011d66:	2200      	movs	r2, #0
 8011d68:	2300      	movs	r3, #0
 8011d6a:	f7ff fbad 	bl	80114c8 <__aeabi_dcmpeq>
 8011d6e:	2800      	cmp	r0, #0
 8011d70:	d033      	beq.n	8011dda <_printf_float+0x266>
 8011d72:	4a37      	ldr	r2, [pc, #220]	@ (8011e50 <_printf_float+0x2dc>)
 8011d74:	2301      	movs	r3, #1
 8011d76:	4631      	mov	r1, r6
 8011d78:	4628      	mov	r0, r5
 8011d7a:	47b8      	blx	r7
 8011d7c:	3001      	adds	r0, #1
 8011d7e:	f43f af54 	beq.w	8011c2a <_printf_float+0xb6>
 8011d82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011d86:	4543      	cmp	r3, r8
 8011d88:	db02      	blt.n	8011d90 <_printf_float+0x21c>
 8011d8a:	6823      	ldr	r3, [r4, #0]
 8011d8c:	07d8      	lsls	r0, r3, #31
 8011d8e:	d50f      	bpl.n	8011db0 <_printf_float+0x23c>
 8011d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d94:	4631      	mov	r1, r6
 8011d96:	4628      	mov	r0, r5
 8011d98:	47b8      	blx	r7
 8011d9a:	3001      	adds	r0, #1
 8011d9c:	f43f af45 	beq.w	8011c2a <_printf_float+0xb6>
 8011da0:	f04f 0900 	mov.w	r9, #0
 8011da4:	f108 38ff 	add.w	r8, r8, #4294967295
 8011da8:	f104 0a1a 	add.w	sl, r4, #26
 8011dac:	45c8      	cmp	r8, r9
 8011dae:	dc09      	bgt.n	8011dc4 <_printf_float+0x250>
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	079b      	lsls	r3, r3, #30
 8011db4:	f100 8103 	bmi.w	8011fbe <_printf_float+0x44a>
 8011db8:	68e0      	ldr	r0, [r4, #12]
 8011dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011dbc:	4298      	cmp	r0, r3
 8011dbe:	bfb8      	it	lt
 8011dc0:	4618      	movlt	r0, r3
 8011dc2:	e734      	b.n	8011c2e <_printf_float+0xba>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	4652      	mov	r2, sl
 8011dc8:	4631      	mov	r1, r6
 8011dca:	4628      	mov	r0, r5
 8011dcc:	47b8      	blx	r7
 8011dce:	3001      	adds	r0, #1
 8011dd0:	f43f af2b 	beq.w	8011c2a <_printf_float+0xb6>
 8011dd4:	f109 0901 	add.w	r9, r9, #1
 8011dd8:	e7e8      	b.n	8011dac <_printf_float+0x238>
 8011dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	dc39      	bgt.n	8011e54 <_printf_float+0x2e0>
 8011de0:	4a1b      	ldr	r2, [pc, #108]	@ (8011e50 <_printf_float+0x2dc>)
 8011de2:	2301      	movs	r3, #1
 8011de4:	4631      	mov	r1, r6
 8011de6:	4628      	mov	r0, r5
 8011de8:	47b8      	blx	r7
 8011dea:	3001      	adds	r0, #1
 8011dec:	f43f af1d 	beq.w	8011c2a <_printf_float+0xb6>
 8011df0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011df4:	ea59 0303 	orrs.w	r3, r9, r3
 8011df8:	d102      	bne.n	8011e00 <_printf_float+0x28c>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	07d9      	lsls	r1, r3, #31
 8011dfe:	d5d7      	bpl.n	8011db0 <_printf_float+0x23c>
 8011e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e04:	4631      	mov	r1, r6
 8011e06:	4628      	mov	r0, r5
 8011e08:	47b8      	blx	r7
 8011e0a:	3001      	adds	r0, #1
 8011e0c:	f43f af0d 	beq.w	8011c2a <_printf_float+0xb6>
 8011e10:	f04f 0a00 	mov.w	sl, #0
 8011e14:	f104 0b1a 	add.w	fp, r4, #26
 8011e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e1a:	425b      	negs	r3, r3
 8011e1c:	4553      	cmp	r3, sl
 8011e1e:	dc01      	bgt.n	8011e24 <_printf_float+0x2b0>
 8011e20:	464b      	mov	r3, r9
 8011e22:	e793      	b.n	8011d4c <_printf_float+0x1d8>
 8011e24:	2301      	movs	r3, #1
 8011e26:	465a      	mov	r2, fp
 8011e28:	4631      	mov	r1, r6
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	47b8      	blx	r7
 8011e2e:	3001      	adds	r0, #1
 8011e30:	f43f aefb 	beq.w	8011c2a <_printf_float+0xb6>
 8011e34:	f10a 0a01 	add.w	sl, sl, #1
 8011e38:	e7ee      	b.n	8011e18 <_printf_float+0x2a4>
 8011e3a:	bf00      	nop
 8011e3c:	7fefffff 	.word	0x7fefffff
 8011e40:	080171a0 	.word	0x080171a0
 8011e44:	080171a4 	.word	0x080171a4
 8011e48:	080171a8 	.word	0x080171a8
 8011e4c:	080171ac 	.word	0x080171ac
 8011e50:	080171b0 	.word	0x080171b0
 8011e54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011e5a:	4553      	cmp	r3, sl
 8011e5c:	bfa8      	it	ge
 8011e5e:	4653      	movge	r3, sl
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	4699      	mov	r9, r3
 8011e64:	dc36      	bgt.n	8011ed4 <_printf_float+0x360>
 8011e66:	f04f 0b00 	mov.w	fp, #0
 8011e6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e6e:	f104 021a 	add.w	r2, r4, #26
 8011e72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011e74:	9306      	str	r3, [sp, #24]
 8011e76:	eba3 0309 	sub.w	r3, r3, r9
 8011e7a:	455b      	cmp	r3, fp
 8011e7c:	dc31      	bgt.n	8011ee2 <_printf_float+0x36e>
 8011e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e80:	459a      	cmp	sl, r3
 8011e82:	dc3a      	bgt.n	8011efa <_printf_float+0x386>
 8011e84:	6823      	ldr	r3, [r4, #0]
 8011e86:	07da      	lsls	r2, r3, #31
 8011e88:	d437      	bmi.n	8011efa <_printf_float+0x386>
 8011e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e8c:	ebaa 0903 	sub.w	r9, sl, r3
 8011e90:	9b06      	ldr	r3, [sp, #24]
 8011e92:	ebaa 0303 	sub.w	r3, sl, r3
 8011e96:	4599      	cmp	r9, r3
 8011e98:	bfa8      	it	ge
 8011e9a:	4699      	movge	r9, r3
 8011e9c:	f1b9 0f00 	cmp.w	r9, #0
 8011ea0:	dc33      	bgt.n	8011f0a <_printf_float+0x396>
 8011ea2:	f04f 0800 	mov.w	r8, #0
 8011ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011eaa:	f104 0b1a 	add.w	fp, r4, #26
 8011eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8011eb4:	eba3 0309 	sub.w	r3, r3, r9
 8011eb8:	4543      	cmp	r3, r8
 8011eba:	f77f af79 	ble.w	8011db0 <_printf_float+0x23c>
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	465a      	mov	r2, fp
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	47b8      	blx	r7
 8011ec8:	3001      	adds	r0, #1
 8011eca:	f43f aeae 	beq.w	8011c2a <_printf_float+0xb6>
 8011ece:	f108 0801 	add.w	r8, r8, #1
 8011ed2:	e7ec      	b.n	8011eae <_printf_float+0x33a>
 8011ed4:	4642      	mov	r2, r8
 8011ed6:	4631      	mov	r1, r6
 8011ed8:	4628      	mov	r0, r5
 8011eda:	47b8      	blx	r7
 8011edc:	3001      	adds	r0, #1
 8011ede:	d1c2      	bne.n	8011e66 <_printf_float+0x2f2>
 8011ee0:	e6a3      	b.n	8011c2a <_printf_float+0xb6>
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	4631      	mov	r1, r6
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	9206      	str	r2, [sp, #24]
 8011eea:	47b8      	blx	r7
 8011eec:	3001      	adds	r0, #1
 8011eee:	f43f ae9c 	beq.w	8011c2a <_printf_float+0xb6>
 8011ef2:	9a06      	ldr	r2, [sp, #24]
 8011ef4:	f10b 0b01 	add.w	fp, fp, #1
 8011ef8:	e7bb      	b.n	8011e72 <_printf_float+0x2fe>
 8011efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011efe:	4631      	mov	r1, r6
 8011f00:	4628      	mov	r0, r5
 8011f02:	47b8      	blx	r7
 8011f04:	3001      	adds	r0, #1
 8011f06:	d1c0      	bne.n	8011e8a <_printf_float+0x316>
 8011f08:	e68f      	b.n	8011c2a <_printf_float+0xb6>
 8011f0a:	9a06      	ldr	r2, [sp, #24]
 8011f0c:	464b      	mov	r3, r9
 8011f0e:	4442      	add	r2, r8
 8011f10:	4631      	mov	r1, r6
 8011f12:	4628      	mov	r0, r5
 8011f14:	47b8      	blx	r7
 8011f16:	3001      	adds	r0, #1
 8011f18:	d1c3      	bne.n	8011ea2 <_printf_float+0x32e>
 8011f1a:	e686      	b.n	8011c2a <_printf_float+0xb6>
 8011f1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011f20:	f1ba 0f01 	cmp.w	sl, #1
 8011f24:	dc01      	bgt.n	8011f2a <_printf_float+0x3b6>
 8011f26:	07db      	lsls	r3, r3, #31
 8011f28:	d536      	bpl.n	8011f98 <_printf_float+0x424>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	4642      	mov	r2, r8
 8011f2e:	4631      	mov	r1, r6
 8011f30:	4628      	mov	r0, r5
 8011f32:	47b8      	blx	r7
 8011f34:	3001      	adds	r0, #1
 8011f36:	f43f ae78 	beq.w	8011c2a <_printf_float+0xb6>
 8011f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f3e:	4631      	mov	r1, r6
 8011f40:	4628      	mov	r0, r5
 8011f42:	47b8      	blx	r7
 8011f44:	3001      	adds	r0, #1
 8011f46:	f43f ae70 	beq.w	8011c2a <_printf_float+0xb6>
 8011f4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011f4e:	2200      	movs	r2, #0
 8011f50:	2300      	movs	r3, #0
 8011f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f56:	f7ff fab7 	bl	80114c8 <__aeabi_dcmpeq>
 8011f5a:	b9c0      	cbnz	r0, 8011f8e <_printf_float+0x41a>
 8011f5c:	4653      	mov	r3, sl
 8011f5e:	f108 0201 	add.w	r2, r8, #1
 8011f62:	4631      	mov	r1, r6
 8011f64:	4628      	mov	r0, r5
 8011f66:	47b8      	blx	r7
 8011f68:	3001      	adds	r0, #1
 8011f6a:	d10c      	bne.n	8011f86 <_printf_float+0x412>
 8011f6c:	e65d      	b.n	8011c2a <_printf_float+0xb6>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	465a      	mov	r2, fp
 8011f72:	4631      	mov	r1, r6
 8011f74:	4628      	mov	r0, r5
 8011f76:	47b8      	blx	r7
 8011f78:	3001      	adds	r0, #1
 8011f7a:	f43f ae56 	beq.w	8011c2a <_printf_float+0xb6>
 8011f7e:	f108 0801 	add.w	r8, r8, #1
 8011f82:	45d0      	cmp	r8, sl
 8011f84:	dbf3      	blt.n	8011f6e <_printf_float+0x3fa>
 8011f86:	464b      	mov	r3, r9
 8011f88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011f8c:	e6df      	b.n	8011d4e <_printf_float+0x1da>
 8011f8e:	f04f 0800 	mov.w	r8, #0
 8011f92:	f104 0b1a 	add.w	fp, r4, #26
 8011f96:	e7f4      	b.n	8011f82 <_printf_float+0x40e>
 8011f98:	2301      	movs	r3, #1
 8011f9a:	4642      	mov	r2, r8
 8011f9c:	e7e1      	b.n	8011f62 <_printf_float+0x3ee>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	464a      	mov	r2, r9
 8011fa2:	4631      	mov	r1, r6
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	47b8      	blx	r7
 8011fa8:	3001      	adds	r0, #1
 8011faa:	f43f ae3e 	beq.w	8011c2a <_printf_float+0xb6>
 8011fae:	f108 0801 	add.w	r8, r8, #1
 8011fb2:	68e3      	ldr	r3, [r4, #12]
 8011fb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011fb6:	1a5b      	subs	r3, r3, r1
 8011fb8:	4543      	cmp	r3, r8
 8011fba:	dcf0      	bgt.n	8011f9e <_printf_float+0x42a>
 8011fbc:	e6fc      	b.n	8011db8 <_printf_float+0x244>
 8011fbe:	f04f 0800 	mov.w	r8, #0
 8011fc2:	f104 0919 	add.w	r9, r4, #25
 8011fc6:	e7f4      	b.n	8011fb2 <_printf_float+0x43e>

08011fc8 <_printf_common>:
 8011fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fcc:	4616      	mov	r6, r2
 8011fce:	4698      	mov	r8, r3
 8011fd0:	688a      	ldr	r2, [r1, #8]
 8011fd2:	690b      	ldr	r3, [r1, #16]
 8011fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	bfb8      	it	lt
 8011fdc:	4613      	movlt	r3, r2
 8011fde:	6033      	str	r3, [r6, #0]
 8011fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011fe4:	4607      	mov	r7, r0
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	b10a      	cbz	r2, 8011fee <_printf_common+0x26>
 8011fea:	3301      	adds	r3, #1
 8011fec:	6033      	str	r3, [r6, #0]
 8011fee:	6823      	ldr	r3, [r4, #0]
 8011ff0:	0699      	lsls	r1, r3, #26
 8011ff2:	bf42      	ittt	mi
 8011ff4:	6833      	ldrmi	r3, [r6, #0]
 8011ff6:	3302      	addmi	r3, #2
 8011ff8:	6033      	strmi	r3, [r6, #0]
 8011ffa:	6825      	ldr	r5, [r4, #0]
 8011ffc:	f015 0506 	ands.w	r5, r5, #6
 8012000:	d106      	bne.n	8012010 <_printf_common+0x48>
 8012002:	f104 0a19 	add.w	sl, r4, #25
 8012006:	68e3      	ldr	r3, [r4, #12]
 8012008:	6832      	ldr	r2, [r6, #0]
 801200a:	1a9b      	subs	r3, r3, r2
 801200c:	42ab      	cmp	r3, r5
 801200e:	dc26      	bgt.n	801205e <_printf_common+0x96>
 8012010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012014:	6822      	ldr	r2, [r4, #0]
 8012016:	3b00      	subs	r3, #0
 8012018:	bf18      	it	ne
 801201a:	2301      	movne	r3, #1
 801201c:	0692      	lsls	r2, r2, #26
 801201e:	d42b      	bmi.n	8012078 <_printf_common+0xb0>
 8012020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012024:	4641      	mov	r1, r8
 8012026:	4638      	mov	r0, r7
 8012028:	47c8      	blx	r9
 801202a:	3001      	adds	r0, #1
 801202c:	d01e      	beq.n	801206c <_printf_common+0xa4>
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	6922      	ldr	r2, [r4, #16]
 8012032:	f003 0306 	and.w	r3, r3, #6
 8012036:	2b04      	cmp	r3, #4
 8012038:	bf02      	ittt	eq
 801203a:	68e5      	ldreq	r5, [r4, #12]
 801203c:	6833      	ldreq	r3, [r6, #0]
 801203e:	1aed      	subeq	r5, r5, r3
 8012040:	68a3      	ldr	r3, [r4, #8]
 8012042:	bf0c      	ite	eq
 8012044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012048:	2500      	movne	r5, #0
 801204a:	4293      	cmp	r3, r2
 801204c:	bfc4      	itt	gt
 801204e:	1a9b      	subgt	r3, r3, r2
 8012050:	18ed      	addgt	r5, r5, r3
 8012052:	2600      	movs	r6, #0
 8012054:	341a      	adds	r4, #26
 8012056:	42b5      	cmp	r5, r6
 8012058:	d11a      	bne.n	8012090 <_printf_common+0xc8>
 801205a:	2000      	movs	r0, #0
 801205c:	e008      	b.n	8012070 <_printf_common+0xa8>
 801205e:	2301      	movs	r3, #1
 8012060:	4652      	mov	r2, sl
 8012062:	4641      	mov	r1, r8
 8012064:	4638      	mov	r0, r7
 8012066:	47c8      	blx	r9
 8012068:	3001      	adds	r0, #1
 801206a:	d103      	bne.n	8012074 <_printf_common+0xac>
 801206c:	f04f 30ff 	mov.w	r0, #4294967295
 8012070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012074:	3501      	adds	r5, #1
 8012076:	e7c6      	b.n	8012006 <_printf_common+0x3e>
 8012078:	18e1      	adds	r1, r4, r3
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	2030      	movs	r0, #48	@ 0x30
 801207e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012082:	4422      	add	r2, r4
 8012084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801208c:	3302      	adds	r3, #2
 801208e:	e7c7      	b.n	8012020 <_printf_common+0x58>
 8012090:	2301      	movs	r3, #1
 8012092:	4622      	mov	r2, r4
 8012094:	4641      	mov	r1, r8
 8012096:	4638      	mov	r0, r7
 8012098:	47c8      	blx	r9
 801209a:	3001      	adds	r0, #1
 801209c:	d0e6      	beq.n	801206c <_printf_common+0xa4>
 801209e:	3601      	adds	r6, #1
 80120a0:	e7d9      	b.n	8012056 <_printf_common+0x8e>
	...

080120a4 <_printf_i>:
 80120a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120a8:	7e0f      	ldrb	r7, [r1, #24]
 80120aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120ac:	2f78      	cmp	r7, #120	@ 0x78
 80120ae:	4691      	mov	r9, r2
 80120b0:	4680      	mov	r8, r0
 80120b2:	460c      	mov	r4, r1
 80120b4:	469a      	mov	sl, r3
 80120b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120ba:	d807      	bhi.n	80120cc <_printf_i+0x28>
 80120bc:	2f62      	cmp	r7, #98	@ 0x62
 80120be:	d80a      	bhi.n	80120d6 <_printf_i+0x32>
 80120c0:	2f00      	cmp	r7, #0
 80120c2:	f000 80d2 	beq.w	801226a <_printf_i+0x1c6>
 80120c6:	2f58      	cmp	r7, #88	@ 0x58
 80120c8:	f000 80b9 	beq.w	801223e <_printf_i+0x19a>
 80120cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80120d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80120d4:	e03a      	b.n	801214c <_printf_i+0xa8>
 80120d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80120da:	2b15      	cmp	r3, #21
 80120dc:	d8f6      	bhi.n	80120cc <_printf_i+0x28>
 80120de:	a101      	add	r1, pc, #4	@ (adr r1, 80120e4 <_printf_i+0x40>)
 80120e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120e4:	0801213d 	.word	0x0801213d
 80120e8:	08012151 	.word	0x08012151
 80120ec:	080120cd 	.word	0x080120cd
 80120f0:	080120cd 	.word	0x080120cd
 80120f4:	080120cd 	.word	0x080120cd
 80120f8:	080120cd 	.word	0x080120cd
 80120fc:	08012151 	.word	0x08012151
 8012100:	080120cd 	.word	0x080120cd
 8012104:	080120cd 	.word	0x080120cd
 8012108:	080120cd 	.word	0x080120cd
 801210c:	080120cd 	.word	0x080120cd
 8012110:	08012251 	.word	0x08012251
 8012114:	0801217b 	.word	0x0801217b
 8012118:	0801220b 	.word	0x0801220b
 801211c:	080120cd 	.word	0x080120cd
 8012120:	080120cd 	.word	0x080120cd
 8012124:	08012273 	.word	0x08012273
 8012128:	080120cd 	.word	0x080120cd
 801212c:	0801217b 	.word	0x0801217b
 8012130:	080120cd 	.word	0x080120cd
 8012134:	080120cd 	.word	0x080120cd
 8012138:	08012213 	.word	0x08012213
 801213c:	6833      	ldr	r3, [r6, #0]
 801213e:	1d1a      	adds	r2, r3, #4
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	6032      	str	r2, [r6, #0]
 8012144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801214c:	2301      	movs	r3, #1
 801214e:	e09d      	b.n	801228c <_printf_i+0x1e8>
 8012150:	6833      	ldr	r3, [r6, #0]
 8012152:	6820      	ldr	r0, [r4, #0]
 8012154:	1d19      	adds	r1, r3, #4
 8012156:	6031      	str	r1, [r6, #0]
 8012158:	0606      	lsls	r6, r0, #24
 801215a:	d501      	bpl.n	8012160 <_printf_i+0xbc>
 801215c:	681d      	ldr	r5, [r3, #0]
 801215e:	e003      	b.n	8012168 <_printf_i+0xc4>
 8012160:	0645      	lsls	r5, r0, #25
 8012162:	d5fb      	bpl.n	801215c <_printf_i+0xb8>
 8012164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012168:	2d00      	cmp	r5, #0
 801216a:	da03      	bge.n	8012174 <_printf_i+0xd0>
 801216c:	232d      	movs	r3, #45	@ 0x2d
 801216e:	426d      	negs	r5, r5
 8012170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012174:	4859      	ldr	r0, [pc, #356]	@ (80122dc <_printf_i+0x238>)
 8012176:	230a      	movs	r3, #10
 8012178:	e011      	b.n	801219e <_printf_i+0xfa>
 801217a:	6821      	ldr	r1, [r4, #0]
 801217c:	6833      	ldr	r3, [r6, #0]
 801217e:	0608      	lsls	r0, r1, #24
 8012180:	f853 5b04 	ldr.w	r5, [r3], #4
 8012184:	d402      	bmi.n	801218c <_printf_i+0xe8>
 8012186:	0649      	lsls	r1, r1, #25
 8012188:	bf48      	it	mi
 801218a:	b2ad      	uxthmi	r5, r5
 801218c:	2f6f      	cmp	r7, #111	@ 0x6f
 801218e:	4853      	ldr	r0, [pc, #332]	@ (80122dc <_printf_i+0x238>)
 8012190:	6033      	str	r3, [r6, #0]
 8012192:	bf14      	ite	ne
 8012194:	230a      	movne	r3, #10
 8012196:	2308      	moveq	r3, #8
 8012198:	2100      	movs	r1, #0
 801219a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801219e:	6866      	ldr	r6, [r4, #4]
 80121a0:	60a6      	str	r6, [r4, #8]
 80121a2:	2e00      	cmp	r6, #0
 80121a4:	bfa2      	ittt	ge
 80121a6:	6821      	ldrge	r1, [r4, #0]
 80121a8:	f021 0104 	bicge.w	r1, r1, #4
 80121ac:	6021      	strge	r1, [r4, #0]
 80121ae:	b90d      	cbnz	r5, 80121b4 <_printf_i+0x110>
 80121b0:	2e00      	cmp	r6, #0
 80121b2:	d04b      	beq.n	801224c <_printf_i+0x1a8>
 80121b4:	4616      	mov	r6, r2
 80121b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80121ba:	fb03 5711 	mls	r7, r3, r1, r5
 80121be:	5dc7      	ldrb	r7, [r0, r7]
 80121c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80121c4:	462f      	mov	r7, r5
 80121c6:	42bb      	cmp	r3, r7
 80121c8:	460d      	mov	r5, r1
 80121ca:	d9f4      	bls.n	80121b6 <_printf_i+0x112>
 80121cc:	2b08      	cmp	r3, #8
 80121ce:	d10b      	bne.n	80121e8 <_printf_i+0x144>
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	07df      	lsls	r7, r3, #31
 80121d4:	d508      	bpl.n	80121e8 <_printf_i+0x144>
 80121d6:	6923      	ldr	r3, [r4, #16]
 80121d8:	6861      	ldr	r1, [r4, #4]
 80121da:	4299      	cmp	r1, r3
 80121dc:	bfde      	ittt	le
 80121de:	2330      	movle	r3, #48	@ 0x30
 80121e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80121e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80121e8:	1b92      	subs	r2, r2, r6
 80121ea:	6122      	str	r2, [r4, #16]
 80121ec:	f8cd a000 	str.w	sl, [sp]
 80121f0:	464b      	mov	r3, r9
 80121f2:	aa03      	add	r2, sp, #12
 80121f4:	4621      	mov	r1, r4
 80121f6:	4640      	mov	r0, r8
 80121f8:	f7ff fee6 	bl	8011fc8 <_printf_common>
 80121fc:	3001      	adds	r0, #1
 80121fe:	d14a      	bne.n	8012296 <_printf_i+0x1f2>
 8012200:	f04f 30ff 	mov.w	r0, #4294967295
 8012204:	b004      	add	sp, #16
 8012206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	f043 0320 	orr.w	r3, r3, #32
 8012210:	6023      	str	r3, [r4, #0]
 8012212:	4833      	ldr	r0, [pc, #204]	@ (80122e0 <_printf_i+0x23c>)
 8012214:	2778      	movs	r7, #120	@ 0x78
 8012216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801221a:	6823      	ldr	r3, [r4, #0]
 801221c:	6831      	ldr	r1, [r6, #0]
 801221e:	061f      	lsls	r7, r3, #24
 8012220:	f851 5b04 	ldr.w	r5, [r1], #4
 8012224:	d402      	bmi.n	801222c <_printf_i+0x188>
 8012226:	065f      	lsls	r7, r3, #25
 8012228:	bf48      	it	mi
 801222a:	b2ad      	uxthmi	r5, r5
 801222c:	6031      	str	r1, [r6, #0]
 801222e:	07d9      	lsls	r1, r3, #31
 8012230:	bf44      	itt	mi
 8012232:	f043 0320 	orrmi.w	r3, r3, #32
 8012236:	6023      	strmi	r3, [r4, #0]
 8012238:	b11d      	cbz	r5, 8012242 <_printf_i+0x19e>
 801223a:	2310      	movs	r3, #16
 801223c:	e7ac      	b.n	8012198 <_printf_i+0xf4>
 801223e:	4827      	ldr	r0, [pc, #156]	@ (80122dc <_printf_i+0x238>)
 8012240:	e7e9      	b.n	8012216 <_printf_i+0x172>
 8012242:	6823      	ldr	r3, [r4, #0]
 8012244:	f023 0320 	bic.w	r3, r3, #32
 8012248:	6023      	str	r3, [r4, #0]
 801224a:	e7f6      	b.n	801223a <_printf_i+0x196>
 801224c:	4616      	mov	r6, r2
 801224e:	e7bd      	b.n	80121cc <_printf_i+0x128>
 8012250:	6833      	ldr	r3, [r6, #0]
 8012252:	6825      	ldr	r5, [r4, #0]
 8012254:	6961      	ldr	r1, [r4, #20]
 8012256:	1d18      	adds	r0, r3, #4
 8012258:	6030      	str	r0, [r6, #0]
 801225a:	062e      	lsls	r6, r5, #24
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	d501      	bpl.n	8012264 <_printf_i+0x1c0>
 8012260:	6019      	str	r1, [r3, #0]
 8012262:	e002      	b.n	801226a <_printf_i+0x1c6>
 8012264:	0668      	lsls	r0, r5, #25
 8012266:	d5fb      	bpl.n	8012260 <_printf_i+0x1bc>
 8012268:	8019      	strh	r1, [r3, #0]
 801226a:	2300      	movs	r3, #0
 801226c:	6123      	str	r3, [r4, #16]
 801226e:	4616      	mov	r6, r2
 8012270:	e7bc      	b.n	80121ec <_printf_i+0x148>
 8012272:	6833      	ldr	r3, [r6, #0]
 8012274:	1d1a      	adds	r2, r3, #4
 8012276:	6032      	str	r2, [r6, #0]
 8012278:	681e      	ldr	r6, [r3, #0]
 801227a:	6862      	ldr	r2, [r4, #4]
 801227c:	2100      	movs	r1, #0
 801227e:	4630      	mov	r0, r6
 8012280:	f7fe fca6 	bl	8010bd0 <memchr>
 8012284:	b108      	cbz	r0, 801228a <_printf_i+0x1e6>
 8012286:	1b80      	subs	r0, r0, r6
 8012288:	6060      	str	r0, [r4, #4]
 801228a:	6863      	ldr	r3, [r4, #4]
 801228c:	6123      	str	r3, [r4, #16]
 801228e:	2300      	movs	r3, #0
 8012290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012294:	e7aa      	b.n	80121ec <_printf_i+0x148>
 8012296:	6923      	ldr	r3, [r4, #16]
 8012298:	4632      	mov	r2, r6
 801229a:	4649      	mov	r1, r9
 801229c:	4640      	mov	r0, r8
 801229e:	47d0      	blx	sl
 80122a0:	3001      	adds	r0, #1
 80122a2:	d0ad      	beq.n	8012200 <_printf_i+0x15c>
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	079b      	lsls	r3, r3, #30
 80122a8:	d413      	bmi.n	80122d2 <_printf_i+0x22e>
 80122aa:	68e0      	ldr	r0, [r4, #12]
 80122ac:	9b03      	ldr	r3, [sp, #12]
 80122ae:	4298      	cmp	r0, r3
 80122b0:	bfb8      	it	lt
 80122b2:	4618      	movlt	r0, r3
 80122b4:	e7a6      	b.n	8012204 <_printf_i+0x160>
 80122b6:	2301      	movs	r3, #1
 80122b8:	4632      	mov	r2, r6
 80122ba:	4649      	mov	r1, r9
 80122bc:	4640      	mov	r0, r8
 80122be:	47d0      	blx	sl
 80122c0:	3001      	adds	r0, #1
 80122c2:	d09d      	beq.n	8012200 <_printf_i+0x15c>
 80122c4:	3501      	adds	r5, #1
 80122c6:	68e3      	ldr	r3, [r4, #12]
 80122c8:	9903      	ldr	r1, [sp, #12]
 80122ca:	1a5b      	subs	r3, r3, r1
 80122cc:	42ab      	cmp	r3, r5
 80122ce:	dcf2      	bgt.n	80122b6 <_printf_i+0x212>
 80122d0:	e7eb      	b.n	80122aa <_printf_i+0x206>
 80122d2:	2500      	movs	r5, #0
 80122d4:	f104 0619 	add.w	r6, r4, #25
 80122d8:	e7f5      	b.n	80122c6 <_printf_i+0x222>
 80122da:	bf00      	nop
 80122dc:	080171b2 	.word	0x080171b2
 80122e0:	080171c3 	.word	0x080171c3

080122e4 <_scanf_float>:
 80122e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e8:	b087      	sub	sp, #28
 80122ea:	4617      	mov	r7, r2
 80122ec:	9303      	str	r3, [sp, #12]
 80122ee:	688b      	ldr	r3, [r1, #8]
 80122f0:	1e5a      	subs	r2, r3, #1
 80122f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80122f6:	bf81      	itttt	hi
 80122f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80122fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8012300:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012304:	608b      	strhi	r3, [r1, #8]
 8012306:	680b      	ldr	r3, [r1, #0]
 8012308:	460a      	mov	r2, r1
 801230a:	f04f 0500 	mov.w	r5, #0
 801230e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8012312:	f842 3b1c 	str.w	r3, [r2], #28
 8012316:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801231a:	4680      	mov	r8, r0
 801231c:	460c      	mov	r4, r1
 801231e:	bf98      	it	ls
 8012320:	f04f 0b00 	movls.w	fp, #0
 8012324:	9201      	str	r2, [sp, #4]
 8012326:	4616      	mov	r6, r2
 8012328:	46aa      	mov	sl, r5
 801232a:	46a9      	mov	r9, r5
 801232c:	9502      	str	r5, [sp, #8]
 801232e:	68a2      	ldr	r2, [r4, #8]
 8012330:	b152      	cbz	r2, 8012348 <_scanf_float+0x64>
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	2b4e      	cmp	r3, #78	@ 0x4e
 8012338:	d864      	bhi.n	8012404 <_scanf_float+0x120>
 801233a:	2b40      	cmp	r3, #64	@ 0x40
 801233c:	d83c      	bhi.n	80123b8 <_scanf_float+0xd4>
 801233e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8012342:	b2c8      	uxtb	r0, r1
 8012344:	280e      	cmp	r0, #14
 8012346:	d93a      	bls.n	80123be <_scanf_float+0xda>
 8012348:	f1b9 0f00 	cmp.w	r9, #0
 801234c:	d003      	beq.n	8012356 <_scanf_float+0x72>
 801234e:	6823      	ldr	r3, [r4, #0]
 8012350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	f10a 3aff 	add.w	sl, sl, #4294967295
 801235a:	f1ba 0f01 	cmp.w	sl, #1
 801235e:	f200 8117 	bhi.w	8012590 <_scanf_float+0x2ac>
 8012362:	9b01      	ldr	r3, [sp, #4]
 8012364:	429e      	cmp	r6, r3
 8012366:	f200 8108 	bhi.w	801257a <_scanf_float+0x296>
 801236a:	2001      	movs	r0, #1
 801236c:	b007      	add	sp, #28
 801236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012372:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8012376:	2a0d      	cmp	r2, #13
 8012378:	d8e6      	bhi.n	8012348 <_scanf_float+0x64>
 801237a:	a101      	add	r1, pc, #4	@ (adr r1, 8012380 <_scanf_float+0x9c>)
 801237c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012380:	080124c7 	.word	0x080124c7
 8012384:	08012349 	.word	0x08012349
 8012388:	08012349 	.word	0x08012349
 801238c:	08012349 	.word	0x08012349
 8012390:	08012527 	.word	0x08012527
 8012394:	080124ff 	.word	0x080124ff
 8012398:	08012349 	.word	0x08012349
 801239c:	08012349 	.word	0x08012349
 80123a0:	080124d5 	.word	0x080124d5
 80123a4:	08012349 	.word	0x08012349
 80123a8:	08012349 	.word	0x08012349
 80123ac:	08012349 	.word	0x08012349
 80123b0:	08012349 	.word	0x08012349
 80123b4:	0801248d 	.word	0x0801248d
 80123b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80123bc:	e7db      	b.n	8012376 <_scanf_float+0x92>
 80123be:	290e      	cmp	r1, #14
 80123c0:	d8c2      	bhi.n	8012348 <_scanf_float+0x64>
 80123c2:	a001      	add	r0, pc, #4	@ (adr r0, 80123c8 <_scanf_float+0xe4>)
 80123c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80123c8:	0801247d 	.word	0x0801247d
 80123cc:	08012349 	.word	0x08012349
 80123d0:	0801247d 	.word	0x0801247d
 80123d4:	08012513 	.word	0x08012513
 80123d8:	08012349 	.word	0x08012349
 80123dc:	08012425 	.word	0x08012425
 80123e0:	08012463 	.word	0x08012463
 80123e4:	08012463 	.word	0x08012463
 80123e8:	08012463 	.word	0x08012463
 80123ec:	08012463 	.word	0x08012463
 80123f0:	08012463 	.word	0x08012463
 80123f4:	08012463 	.word	0x08012463
 80123f8:	08012463 	.word	0x08012463
 80123fc:	08012463 	.word	0x08012463
 8012400:	08012463 	.word	0x08012463
 8012404:	2b6e      	cmp	r3, #110	@ 0x6e
 8012406:	d809      	bhi.n	801241c <_scanf_float+0x138>
 8012408:	2b60      	cmp	r3, #96	@ 0x60
 801240a:	d8b2      	bhi.n	8012372 <_scanf_float+0x8e>
 801240c:	2b54      	cmp	r3, #84	@ 0x54
 801240e:	d07b      	beq.n	8012508 <_scanf_float+0x224>
 8012410:	2b59      	cmp	r3, #89	@ 0x59
 8012412:	d199      	bne.n	8012348 <_scanf_float+0x64>
 8012414:	2d07      	cmp	r5, #7
 8012416:	d197      	bne.n	8012348 <_scanf_float+0x64>
 8012418:	2508      	movs	r5, #8
 801241a:	e02c      	b.n	8012476 <_scanf_float+0x192>
 801241c:	2b74      	cmp	r3, #116	@ 0x74
 801241e:	d073      	beq.n	8012508 <_scanf_float+0x224>
 8012420:	2b79      	cmp	r3, #121	@ 0x79
 8012422:	e7f6      	b.n	8012412 <_scanf_float+0x12e>
 8012424:	6821      	ldr	r1, [r4, #0]
 8012426:	05c8      	lsls	r0, r1, #23
 8012428:	d51b      	bpl.n	8012462 <_scanf_float+0x17e>
 801242a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801242e:	6021      	str	r1, [r4, #0]
 8012430:	f109 0901 	add.w	r9, r9, #1
 8012434:	f1bb 0f00 	cmp.w	fp, #0
 8012438:	d003      	beq.n	8012442 <_scanf_float+0x15e>
 801243a:	3201      	adds	r2, #1
 801243c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012440:	60a2      	str	r2, [r4, #8]
 8012442:	68a3      	ldr	r3, [r4, #8]
 8012444:	3b01      	subs	r3, #1
 8012446:	60a3      	str	r3, [r4, #8]
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	3301      	adds	r3, #1
 801244c:	6123      	str	r3, [r4, #16]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	3b01      	subs	r3, #1
 8012452:	2b00      	cmp	r3, #0
 8012454:	607b      	str	r3, [r7, #4]
 8012456:	f340 8087 	ble.w	8012568 <_scanf_float+0x284>
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	3301      	adds	r3, #1
 801245e:	603b      	str	r3, [r7, #0]
 8012460:	e765      	b.n	801232e <_scanf_float+0x4a>
 8012462:	eb1a 0105 	adds.w	r1, sl, r5
 8012466:	f47f af6f 	bne.w	8012348 <_scanf_float+0x64>
 801246a:	6822      	ldr	r2, [r4, #0]
 801246c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8012470:	6022      	str	r2, [r4, #0]
 8012472:	460d      	mov	r5, r1
 8012474:	468a      	mov	sl, r1
 8012476:	f806 3b01 	strb.w	r3, [r6], #1
 801247a:	e7e2      	b.n	8012442 <_scanf_float+0x15e>
 801247c:	6822      	ldr	r2, [r4, #0]
 801247e:	0610      	lsls	r0, r2, #24
 8012480:	f57f af62 	bpl.w	8012348 <_scanf_float+0x64>
 8012484:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012488:	6022      	str	r2, [r4, #0]
 801248a:	e7f4      	b.n	8012476 <_scanf_float+0x192>
 801248c:	f1ba 0f00 	cmp.w	sl, #0
 8012490:	d10e      	bne.n	80124b0 <_scanf_float+0x1cc>
 8012492:	f1b9 0f00 	cmp.w	r9, #0
 8012496:	d10e      	bne.n	80124b6 <_scanf_float+0x1d2>
 8012498:	6822      	ldr	r2, [r4, #0]
 801249a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801249e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80124a2:	d108      	bne.n	80124b6 <_scanf_float+0x1d2>
 80124a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80124a8:	6022      	str	r2, [r4, #0]
 80124aa:	f04f 0a01 	mov.w	sl, #1
 80124ae:	e7e2      	b.n	8012476 <_scanf_float+0x192>
 80124b0:	f1ba 0f02 	cmp.w	sl, #2
 80124b4:	d055      	beq.n	8012562 <_scanf_float+0x27e>
 80124b6:	2d01      	cmp	r5, #1
 80124b8:	d002      	beq.n	80124c0 <_scanf_float+0x1dc>
 80124ba:	2d04      	cmp	r5, #4
 80124bc:	f47f af44 	bne.w	8012348 <_scanf_float+0x64>
 80124c0:	3501      	adds	r5, #1
 80124c2:	b2ed      	uxtb	r5, r5
 80124c4:	e7d7      	b.n	8012476 <_scanf_float+0x192>
 80124c6:	f1ba 0f01 	cmp.w	sl, #1
 80124ca:	f47f af3d 	bne.w	8012348 <_scanf_float+0x64>
 80124ce:	f04f 0a02 	mov.w	sl, #2
 80124d2:	e7d0      	b.n	8012476 <_scanf_float+0x192>
 80124d4:	b97d      	cbnz	r5, 80124f6 <_scanf_float+0x212>
 80124d6:	f1b9 0f00 	cmp.w	r9, #0
 80124da:	f47f af38 	bne.w	801234e <_scanf_float+0x6a>
 80124de:	6822      	ldr	r2, [r4, #0]
 80124e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80124e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80124e8:	f040 8108 	bne.w	80126fc <_scanf_float+0x418>
 80124ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80124f0:	6022      	str	r2, [r4, #0]
 80124f2:	2501      	movs	r5, #1
 80124f4:	e7bf      	b.n	8012476 <_scanf_float+0x192>
 80124f6:	2d03      	cmp	r5, #3
 80124f8:	d0e2      	beq.n	80124c0 <_scanf_float+0x1dc>
 80124fa:	2d05      	cmp	r5, #5
 80124fc:	e7de      	b.n	80124bc <_scanf_float+0x1d8>
 80124fe:	2d02      	cmp	r5, #2
 8012500:	f47f af22 	bne.w	8012348 <_scanf_float+0x64>
 8012504:	2503      	movs	r5, #3
 8012506:	e7b6      	b.n	8012476 <_scanf_float+0x192>
 8012508:	2d06      	cmp	r5, #6
 801250a:	f47f af1d 	bne.w	8012348 <_scanf_float+0x64>
 801250e:	2507      	movs	r5, #7
 8012510:	e7b1      	b.n	8012476 <_scanf_float+0x192>
 8012512:	6822      	ldr	r2, [r4, #0]
 8012514:	0591      	lsls	r1, r2, #22
 8012516:	f57f af17 	bpl.w	8012348 <_scanf_float+0x64>
 801251a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801251e:	6022      	str	r2, [r4, #0]
 8012520:	f8cd 9008 	str.w	r9, [sp, #8]
 8012524:	e7a7      	b.n	8012476 <_scanf_float+0x192>
 8012526:	6822      	ldr	r2, [r4, #0]
 8012528:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801252c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012530:	d006      	beq.n	8012540 <_scanf_float+0x25c>
 8012532:	0550      	lsls	r0, r2, #21
 8012534:	f57f af08 	bpl.w	8012348 <_scanf_float+0x64>
 8012538:	f1b9 0f00 	cmp.w	r9, #0
 801253c:	f000 80de 	beq.w	80126fc <_scanf_float+0x418>
 8012540:	0591      	lsls	r1, r2, #22
 8012542:	bf58      	it	pl
 8012544:	9902      	ldrpl	r1, [sp, #8]
 8012546:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801254a:	bf58      	it	pl
 801254c:	eba9 0101 	subpl.w	r1, r9, r1
 8012550:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8012554:	bf58      	it	pl
 8012556:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801255a:	6022      	str	r2, [r4, #0]
 801255c:	f04f 0900 	mov.w	r9, #0
 8012560:	e789      	b.n	8012476 <_scanf_float+0x192>
 8012562:	f04f 0a03 	mov.w	sl, #3
 8012566:	e786      	b.n	8012476 <_scanf_float+0x192>
 8012568:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801256c:	4639      	mov	r1, r7
 801256e:	4640      	mov	r0, r8
 8012570:	4798      	blx	r3
 8012572:	2800      	cmp	r0, #0
 8012574:	f43f aedb 	beq.w	801232e <_scanf_float+0x4a>
 8012578:	e6e6      	b.n	8012348 <_scanf_float+0x64>
 801257a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801257e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012582:	463a      	mov	r2, r7
 8012584:	4640      	mov	r0, r8
 8012586:	4798      	blx	r3
 8012588:	6923      	ldr	r3, [r4, #16]
 801258a:	3b01      	subs	r3, #1
 801258c:	6123      	str	r3, [r4, #16]
 801258e:	e6e8      	b.n	8012362 <_scanf_float+0x7e>
 8012590:	1e6b      	subs	r3, r5, #1
 8012592:	2b06      	cmp	r3, #6
 8012594:	d824      	bhi.n	80125e0 <_scanf_float+0x2fc>
 8012596:	2d02      	cmp	r5, #2
 8012598:	d836      	bhi.n	8012608 <_scanf_float+0x324>
 801259a:	9b01      	ldr	r3, [sp, #4]
 801259c:	429e      	cmp	r6, r3
 801259e:	f67f aee4 	bls.w	801236a <_scanf_float+0x86>
 80125a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125aa:	463a      	mov	r2, r7
 80125ac:	4640      	mov	r0, r8
 80125ae:	4798      	blx	r3
 80125b0:	6923      	ldr	r3, [r4, #16]
 80125b2:	3b01      	subs	r3, #1
 80125b4:	6123      	str	r3, [r4, #16]
 80125b6:	e7f0      	b.n	801259a <_scanf_float+0x2b6>
 80125b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80125c0:	463a      	mov	r2, r7
 80125c2:	4640      	mov	r0, r8
 80125c4:	4798      	blx	r3
 80125c6:	6923      	ldr	r3, [r4, #16]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	6123      	str	r3, [r4, #16]
 80125cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80125d0:	fa5f fa8a 	uxtb.w	sl, sl
 80125d4:	f1ba 0f02 	cmp.w	sl, #2
 80125d8:	d1ee      	bne.n	80125b8 <_scanf_float+0x2d4>
 80125da:	3d03      	subs	r5, #3
 80125dc:	b2ed      	uxtb	r5, r5
 80125de:	1b76      	subs	r6, r6, r5
 80125e0:	6823      	ldr	r3, [r4, #0]
 80125e2:	05da      	lsls	r2, r3, #23
 80125e4:	d530      	bpl.n	8012648 <_scanf_float+0x364>
 80125e6:	055b      	lsls	r3, r3, #21
 80125e8:	d511      	bpl.n	801260e <_scanf_float+0x32a>
 80125ea:	9b01      	ldr	r3, [sp, #4]
 80125ec:	429e      	cmp	r6, r3
 80125ee:	f67f aebc 	bls.w	801236a <_scanf_float+0x86>
 80125f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80125f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125fa:	463a      	mov	r2, r7
 80125fc:	4640      	mov	r0, r8
 80125fe:	4798      	blx	r3
 8012600:	6923      	ldr	r3, [r4, #16]
 8012602:	3b01      	subs	r3, #1
 8012604:	6123      	str	r3, [r4, #16]
 8012606:	e7f0      	b.n	80125ea <_scanf_float+0x306>
 8012608:	46aa      	mov	sl, r5
 801260a:	46b3      	mov	fp, r6
 801260c:	e7de      	b.n	80125cc <_scanf_float+0x2e8>
 801260e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012612:	6923      	ldr	r3, [r4, #16]
 8012614:	2965      	cmp	r1, #101	@ 0x65
 8012616:	f103 33ff 	add.w	r3, r3, #4294967295
 801261a:	f106 35ff 	add.w	r5, r6, #4294967295
 801261e:	6123      	str	r3, [r4, #16]
 8012620:	d00c      	beq.n	801263c <_scanf_float+0x358>
 8012622:	2945      	cmp	r1, #69	@ 0x45
 8012624:	d00a      	beq.n	801263c <_scanf_float+0x358>
 8012626:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801262a:	463a      	mov	r2, r7
 801262c:	4640      	mov	r0, r8
 801262e:	4798      	blx	r3
 8012630:	6923      	ldr	r3, [r4, #16]
 8012632:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012636:	3b01      	subs	r3, #1
 8012638:	1eb5      	subs	r5, r6, #2
 801263a:	6123      	str	r3, [r4, #16]
 801263c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012640:	463a      	mov	r2, r7
 8012642:	4640      	mov	r0, r8
 8012644:	4798      	blx	r3
 8012646:	462e      	mov	r6, r5
 8012648:	6822      	ldr	r2, [r4, #0]
 801264a:	f012 0210 	ands.w	r2, r2, #16
 801264e:	d001      	beq.n	8012654 <_scanf_float+0x370>
 8012650:	2000      	movs	r0, #0
 8012652:	e68b      	b.n	801236c <_scanf_float+0x88>
 8012654:	7032      	strb	r2, [r6, #0]
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801265c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012660:	d11c      	bne.n	801269c <_scanf_float+0x3b8>
 8012662:	9b02      	ldr	r3, [sp, #8]
 8012664:	454b      	cmp	r3, r9
 8012666:	eba3 0209 	sub.w	r2, r3, r9
 801266a:	d123      	bne.n	80126b4 <_scanf_float+0x3d0>
 801266c:	9901      	ldr	r1, [sp, #4]
 801266e:	2200      	movs	r2, #0
 8012670:	4640      	mov	r0, r8
 8012672:	f002 fbf9 	bl	8014e68 <_strtod_r>
 8012676:	9b03      	ldr	r3, [sp, #12]
 8012678:	6821      	ldr	r1, [r4, #0]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f011 0f02 	tst.w	r1, #2
 8012680:	ec57 6b10 	vmov	r6, r7, d0
 8012684:	f103 0204 	add.w	r2, r3, #4
 8012688:	d01f      	beq.n	80126ca <_scanf_float+0x3e6>
 801268a:	9903      	ldr	r1, [sp, #12]
 801268c:	600a      	str	r2, [r1, #0]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	e9c3 6700 	strd	r6, r7, [r3]
 8012694:	68e3      	ldr	r3, [r4, #12]
 8012696:	3301      	adds	r3, #1
 8012698:	60e3      	str	r3, [r4, #12]
 801269a:	e7d9      	b.n	8012650 <_scanf_float+0x36c>
 801269c:	9b04      	ldr	r3, [sp, #16]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d0e4      	beq.n	801266c <_scanf_float+0x388>
 80126a2:	9905      	ldr	r1, [sp, #20]
 80126a4:	230a      	movs	r3, #10
 80126a6:	3101      	adds	r1, #1
 80126a8:	4640      	mov	r0, r8
 80126aa:	f002 fc5d 	bl	8014f68 <_strtol_r>
 80126ae:	9b04      	ldr	r3, [sp, #16]
 80126b0:	9e05      	ldr	r6, [sp, #20]
 80126b2:	1ac2      	subs	r2, r0, r3
 80126b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80126b8:	429e      	cmp	r6, r3
 80126ba:	bf28      	it	cs
 80126bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80126c0:	4910      	ldr	r1, [pc, #64]	@ (8012704 <_scanf_float+0x420>)
 80126c2:	4630      	mov	r0, r6
 80126c4:	f000 f8e4 	bl	8012890 <siprintf>
 80126c8:	e7d0      	b.n	801266c <_scanf_float+0x388>
 80126ca:	f011 0f04 	tst.w	r1, #4
 80126ce:	9903      	ldr	r1, [sp, #12]
 80126d0:	600a      	str	r2, [r1, #0]
 80126d2:	d1dc      	bne.n	801268e <_scanf_float+0x3aa>
 80126d4:	681d      	ldr	r5, [r3, #0]
 80126d6:	4632      	mov	r2, r6
 80126d8:	463b      	mov	r3, r7
 80126da:	4630      	mov	r0, r6
 80126dc:	4639      	mov	r1, r7
 80126de:	f7fe ff25 	bl	801152c <__aeabi_dcmpun>
 80126e2:	b128      	cbz	r0, 80126f0 <_scanf_float+0x40c>
 80126e4:	4808      	ldr	r0, [pc, #32]	@ (8012708 <_scanf_float+0x424>)
 80126e6:	f000 f9b7 	bl	8012a58 <nanf>
 80126ea:	ed85 0a00 	vstr	s0, [r5]
 80126ee:	e7d1      	b.n	8012694 <_scanf_float+0x3b0>
 80126f0:	4630      	mov	r0, r6
 80126f2:	4639      	mov	r1, r7
 80126f4:	f7fe ff78 	bl	80115e8 <__aeabi_d2f>
 80126f8:	6028      	str	r0, [r5, #0]
 80126fa:	e7cb      	b.n	8012694 <_scanf_float+0x3b0>
 80126fc:	f04f 0900 	mov.w	r9, #0
 8012700:	e629      	b.n	8012356 <_scanf_float+0x72>
 8012702:	bf00      	nop
 8012704:	080171d4 	.word	0x080171d4
 8012708:	0801756d 	.word	0x0801756d

0801270c <std>:
 801270c:	2300      	movs	r3, #0
 801270e:	b510      	push	{r4, lr}
 8012710:	4604      	mov	r4, r0
 8012712:	e9c0 3300 	strd	r3, r3, [r0]
 8012716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801271a:	6083      	str	r3, [r0, #8]
 801271c:	8181      	strh	r1, [r0, #12]
 801271e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012720:	81c2      	strh	r2, [r0, #14]
 8012722:	6183      	str	r3, [r0, #24]
 8012724:	4619      	mov	r1, r3
 8012726:	2208      	movs	r2, #8
 8012728:	305c      	adds	r0, #92	@ 0x5c
 801272a:	f000 f914 	bl	8012956 <memset>
 801272e:	4b0d      	ldr	r3, [pc, #52]	@ (8012764 <std+0x58>)
 8012730:	6263      	str	r3, [r4, #36]	@ 0x24
 8012732:	4b0d      	ldr	r3, [pc, #52]	@ (8012768 <std+0x5c>)
 8012734:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012736:	4b0d      	ldr	r3, [pc, #52]	@ (801276c <std+0x60>)
 8012738:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801273a:	4b0d      	ldr	r3, [pc, #52]	@ (8012770 <std+0x64>)
 801273c:	6323      	str	r3, [r4, #48]	@ 0x30
 801273e:	4b0d      	ldr	r3, [pc, #52]	@ (8012774 <std+0x68>)
 8012740:	6224      	str	r4, [r4, #32]
 8012742:	429c      	cmp	r4, r3
 8012744:	d006      	beq.n	8012754 <std+0x48>
 8012746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801274a:	4294      	cmp	r4, r2
 801274c:	d002      	beq.n	8012754 <std+0x48>
 801274e:	33d0      	adds	r3, #208	@ 0xd0
 8012750:	429c      	cmp	r4, r3
 8012752:	d105      	bne.n	8012760 <std+0x54>
 8012754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801275c:	f000 b978 	b.w	8012a50 <__retarget_lock_init_recursive>
 8012760:	bd10      	pop	{r4, pc}
 8012762:	bf00      	nop
 8012764:	080128d1 	.word	0x080128d1
 8012768:	080128f3 	.word	0x080128f3
 801276c:	0801292b 	.word	0x0801292b
 8012770:	0801294f 	.word	0x0801294f
 8012774:	200002b8 	.word	0x200002b8

08012778 <stdio_exit_handler>:
 8012778:	4a02      	ldr	r2, [pc, #8]	@ (8012784 <stdio_exit_handler+0xc>)
 801277a:	4903      	ldr	r1, [pc, #12]	@ (8012788 <stdio_exit_handler+0x10>)
 801277c:	4803      	ldr	r0, [pc, #12]	@ (801278c <stdio_exit_handler+0x14>)
 801277e:	f000 b869 	b.w	8012854 <_fwalk_sglue>
 8012782:	bf00      	nop
 8012784:	20000014 	.word	0x20000014
 8012788:	08015325 	.word	0x08015325
 801278c:	20000024 	.word	0x20000024

08012790 <cleanup_stdio>:
 8012790:	6841      	ldr	r1, [r0, #4]
 8012792:	4b0c      	ldr	r3, [pc, #48]	@ (80127c4 <cleanup_stdio+0x34>)
 8012794:	4299      	cmp	r1, r3
 8012796:	b510      	push	{r4, lr}
 8012798:	4604      	mov	r4, r0
 801279a:	d001      	beq.n	80127a0 <cleanup_stdio+0x10>
 801279c:	f002 fdc2 	bl	8015324 <_fflush_r>
 80127a0:	68a1      	ldr	r1, [r4, #8]
 80127a2:	4b09      	ldr	r3, [pc, #36]	@ (80127c8 <cleanup_stdio+0x38>)
 80127a4:	4299      	cmp	r1, r3
 80127a6:	d002      	beq.n	80127ae <cleanup_stdio+0x1e>
 80127a8:	4620      	mov	r0, r4
 80127aa:	f002 fdbb 	bl	8015324 <_fflush_r>
 80127ae:	68e1      	ldr	r1, [r4, #12]
 80127b0:	4b06      	ldr	r3, [pc, #24]	@ (80127cc <cleanup_stdio+0x3c>)
 80127b2:	4299      	cmp	r1, r3
 80127b4:	d004      	beq.n	80127c0 <cleanup_stdio+0x30>
 80127b6:	4620      	mov	r0, r4
 80127b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127bc:	f002 bdb2 	b.w	8015324 <_fflush_r>
 80127c0:	bd10      	pop	{r4, pc}
 80127c2:	bf00      	nop
 80127c4:	200002b8 	.word	0x200002b8
 80127c8:	20000320 	.word	0x20000320
 80127cc:	20000388 	.word	0x20000388

080127d0 <global_stdio_init.part.0>:
 80127d0:	b510      	push	{r4, lr}
 80127d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012800 <global_stdio_init.part.0+0x30>)
 80127d4:	4c0b      	ldr	r4, [pc, #44]	@ (8012804 <global_stdio_init.part.0+0x34>)
 80127d6:	4a0c      	ldr	r2, [pc, #48]	@ (8012808 <global_stdio_init.part.0+0x38>)
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	4620      	mov	r0, r4
 80127dc:	2200      	movs	r2, #0
 80127de:	2104      	movs	r1, #4
 80127e0:	f7ff ff94 	bl	801270c <std>
 80127e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80127e8:	2201      	movs	r2, #1
 80127ea:	2109      	movs	r1, #9
 80127ec:	f7ff ff8e 	bl	801270c <std>
 80127f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80127f4:	2202      	movs	r2, #2
 80127f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127fa:	2112      	movs	r1, #18
 80127fc:	f7ff bf86 	b.w	801270c <std>
 8012800:	200003f0 	.word	0x200003f0
 8012804:	200002b8 	.word	0x200002b8
 8012808:	08012779 	.word	0x08012779

0801280c <__sfp_lock_acquire>:
 801280c:	4801      	ldr	r0, [pc, #4]	@ (8012814 <__sfp_lock_acquire+0x8>)
 801280e:	f000 b920 	b.w	8012a52 <__retarget_lock_acquire_recursive>
 8012812:	bf00      	nop
 8012814:	200003f9 	.word	0x200003f9

08012818 <__sfp_lock_release>:
 8012818:	4801      	ldr	r0, [pc, #4]	@ (8012820 <__sfp_lock_release+0x8>)
 801281a:	f000 b91b 	b.w	8012a54 <__retarget_lock_release_recursive>
 801281e:	bf00      	nop
 8012820:	200003f9 	.word	0x200003f9

08012824 <__sinit>:
 8012824:	b510      	push	{r4, lr}
 8012826:	4604      	mov	r4, r0
 8012828:	f7ff fff0 	bl	801280c <__sfp_lock_acquire>
 801282c:	6a23      	ldr	r3, [r4, #32]
 801282e:	b11b      	cbz	r3, 8012838 <__sinit+0x14>
 8012830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012834:	f7ff bff0 	b.w	8012818 <__sfp_lock_release>
 8012838:	4b04      	ldr	r3, [pc, #16]	@ (801284c <__sinit+0x28>)
 801283a:	6223      	str	r3, [r4, #32]
 801283c:	4b04      	ldr	r3, [pc, #16]	@ (8012850 <__sinit+0x2c>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d1f5      	bne.n	8012830 <__sinit+0xc>
 8012844:	f7ff ffc4 	bl	80127d0 <global_stdio_init.part.0>
 8012848:	e7f2      	b.n	8012830 <__sinit+0xc>
 801284a:	bf00      	nop
 801284c:	08012791 	.word	0x08012791
 8012850:	200003f0 	.word	0x200003f0

08012854 <_fwalk_sglue>:
 8012854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012858:	4607      	mov	r7, r0
 801285a:	4688      	mov	r8, r1
 801285c:	4614      	mov	r4, r2
 801285e:	2600      	movs	r6, #0
 8012860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012864:	f1b9 0901 	subs.w	r9, r9, #1
 8012868:	d505      	bpl.n	8012876 <_fwalk_sglue+0x22>
 801286a:	6824      	ldr	r4, [r4, #0]
 801286c:	2c00      	cmp	r4, #0
 801286e:	d1f7      	bne.n	8012860 <_fwalk_sglue+0xc>
 8012870:	4630      	mov	r0, r6
 8012872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012876:	89ab      	ldrh	r3, [r5, #12]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d907      	bls.n	801288c <_fwalk_sglue+0x38>
 801287c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012880:	3301      	adds	r3, #1
 8012882:	d003      	beq.n	801288c <_fwalk_sglue+0x38>
 8012884:	4629      	mov	r1, r5
 8012886:	4638      	mov	r0, r7
 8012888:	47c0      	blx	r8
 801288a:	4306      	orrs	r6, r0
 801288c:	3568      	adds	r5, #104	@ 0x68
 801288e:	e7e9      	b.n	8012864 <_fwalk_sglue+0x10>

08012890 <siprintf>:
 8012890:	b40e      	push	{r1, r2, r3}
 8012892:	b500      	push	{lr}
 8012894:	b09c      	sub	sp, #112	@ 0x70
 8012896:	ab1d      	add	r3, sp, #116	@ 0x74
 8012898:	9002      	str	r0, [sp, #8]
 801289a:	9006      	str	r0, [sp, #24]
 801289c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80128a0:	4809      	ldr	r0, [pc, #36]	@ (80128c8 <siprintf+0x38>)
 80128a2:	9107      	str	r1, [sp, #28]
 80128a4:	9104      	str	r1, [sp, #16]
 80128a6:	4909      	ldr	r1, [pc, #36]	@ (80128cc <siprintf+0x3c>)
 80128a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ac:	9105      	str	r1, [sp, #20]
 80128ae:	6800      	ldr	r0, [r0, #0]
 80128b0:	9301      	str	r3, [sp, #4]
 80128b2:	a902      	add	r1, sp, #8
 80128b4:	f002 fbb6 	bl	8015024 <_svfiprintf_r>
 80128b8:	9b02      	ldr	r3, [sp, #8]
 80128ba:	2200      	movs	r2, #0
 80128bc:	701a      	strb	r2, [r3, #0]
 80128be:	b01c      	add	sp, #112	@ 0x70
 80128c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80128c4:	b003      	add	sp, #12
 80128c6:	4770      	bx	lr
 80128c8:	20000020 	.word	0x20000020
 80128cc:	ffff0208 	.word	0xffff0208

080128d0 <__sread>:
 80128d0:	b510      	push	{r4, lr}
 80128d2:	460c      	mov	r4, r1
 80128d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128d8:	f000 f86c 	bl	80129b4 <_read_r>
 80128dc:	2800      	cmp	r0, #0
 80128de:	bfab      	itete	ge
 80128e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80128e2:	89a3      	ldrhlt	r3, [r4, #12]
 80128e4:	181b      	addge	r3, r3, r0
 80128e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80128ea:	bfac      	ite	ge
 80128ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80128ee:	81a3      	strhlt	r3, [r4, #12]
 80128f0:	bd10      	pop	{r4, pc}

080128f2 <__swrite>:
 80128f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f6:	461f      	mov	r7, r3
 80128f8:	898b      	ldrh	r3, [r1, #12]
 80128fa:	05db      	lsls	r3, r3, #23
 80128fc:	4605      	mov	r5, r0
 80128fe:	460c      	mov	r4, r1
 8012900:	4616      	mov	r6, r2
 8012902:	d505      	bpl.n	8012910 <__swrite+0x1e>
 8012904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012908:	2302      	movs	r3, #2
 801290a:	2200      	movs	r2, #0
 801290c:	f000 f840 	bl	8012990 <_lseek_r>
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012916:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801291a:	81a3      	strh	r3, [r4, #12]
 801291c:	4632      	mov	r2, r6
 801291e:	463b      	mov	r3, r7
 8012920:	4628      	mov	r0, r5
 8012922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012926:	f000 b857 	b.w	80129d8 <_write_r>

0801292a <__sseek>:
 801292a:	b510      	push	{r4, lr}
 801292c:	460c      	mov	r4, r1
 801292e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012932:	f000 f82d 	bl	8012990 <_lseek_r>
 8012936:	1c43      	adds	r3, r0, #1
 8012938:	89a3      	ldrh	r3, [r4, #12]
 801293a:	bf15      	itete	ne
 801293c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801293e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012946:	81a3      	strheq	r3, [r4, #12]
 8012948:	bf18      	it	ne
 801294a:	81a3      	strhne	r3, [r4, #12]
 801294c:	bd10      	pop	{r4, pc}

0801294e <__sclose>:
 801294e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012952:	f000 b80d 	b.w	8012970 <_close_r>

08012956 <memset>:
 8012956:	4402      	add	r2, r0
 8012958:	4603      	mov	r3, r0
 801295a:	4293      	cmp	r3, r2
 801295c:	d100      	bne.n	8012960 <memset+0xa>
 801295e:	4770      	bx	lr
 8012960:	f803 1b01 	strb.w	r1, [r3], #1
 8012964:	e7f9      	b.n	801295a <memset+0x4>
	...

08012968 <_localeconv_r>:
 8012968:	4800      	ldr	r0, [pc, #0]	@ (801296c <_localeconv_r+0x4>)
 801296a:	4770      	bx	lr
 801296c:	20000160 	.word	0x20000160

08012970 <_close_r>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	4d06      	ldr	r5, [pc, #24]	@ (801298c <_close_r+0x1c>)
 8012974:	2300      	movs	r3, #0
 8012976:	4604      	mov	r4, r0
 8012978:	4608      	mov	r0, r1
 801297a:	602b      	str	r3, [r5, #0]
 801297c:	f7ee f953 	bl	8000c26 <_close>
 8012980:	1c43      	adds	r3, r0, #1
 8012982:	d102      	bne.n	801298a <_close_r+0x1a>
 8012984:	682b      	ldr	r3, [r5, #0]
 8012986:	b103      	cbz	r3, 801298a <_close_r+0x1a>
 8012988:	6023      	str	r3, [r4, #0]
 801298a:	bd38      	pop	{r3, r4, r5, pc}
 801298c:	200003f4 	.word	0x200003f4

08012990 <_lseek_r>:
 8012990:	b538      	push	{r3, r4, r5, lr}
 8012992:	4d07      	ldr	r5, [pc, #28]	@ (80129b0 <_lseek_r+0x20>)
 8012994:	4604      	mov	r4, r0
 8012996:	4608      	mov	r0, r1
 8012998:	4611      	mov	r1, r2
 801299a:	2200      	movs	r2, #0
 801299c:	602a      	str	r2, [r5, #0]
 801299e:	461a      	mov	r2, r3
 80129a0:	f7ee f968 	bl	8000c74 <_lseek>
 80129a4:	1c43      	adds	r3, r0, #1
 80129a6:	d102      	bne.n	80129ae <_lseek_r+0x1e>
 80129a8:	682b      	ldr	r3, [r5, #0]
 80129aa:	b103      	cbz	r3, 80129ae <_lseek_r+0x1e>
 80129ac:	6023      	str	r3, [r4, #0]
 80129ae:	bd38      	pop	{r3, r4, r5, pc}
 80129b0:	200003f4 	.word	0x200003f4

080129b4 <_read_r>:
 80129b4:	b538      	push	{r3, r4, r5, lr}
 80129b6:	4d07      	ldr	r5, [pc, #28]	@ (80129d4 <_read_r+0x20>)
 80129b8:	4604      	mov	r4, r0
 80129ba:	4608      	mov	r0, r1
 80129bc:	4611      	mov	r1, r2
 80129be:	2200      	movs	r2, #0
 80129c0:	602a      	str	r2, [r5, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	f7ee f8f6 	bl	8000bb4 <_read>
 80129c8:	1c43      	adds	r3, r0, #1
 80129ca:	d102      	bne.n	80129d2 <_read_r+0x1e>
 80129cc:	682b      	ldr	r3, [r5, #0]
 80129ce:	b103      	cbz	r3, 80129d2 <_read_r+0x1e>
 80129d0:	6023      	str	r3, [r4, #0]
 80129d2:	bd38      	pop	{r3, r4, r5, pc}
 80129d4:	200003f4 	.word	0x200003f4

080129d8 <_write_r>:
 80129d8:	b538      	push	{r3, r4, r5, lr}
 80129da:	4d07      	ldr	r5, [pc, #28]	@ (80129f8 <_write_r+0x20>)
 80129dc:	4604      	mov	r4, r0
 80129de:	4608      	mov	r0, r1
 80129e0:	4611      	mov	r1, r2
 80129e2:	2200      	movs	r2, #0
 80129e4:	602a      	str	r2, [r5, #0]
 80129e6:	461a      	mov	r2, r3
 80129e8:	f7ee f901 	bl	8000bee <_write>
 80129ec:	1c43      	adds	r3, r0, #1
 80129ee:	d102      	bne.n	80129f6 <_write_r+0x1e>
 80129f0:	682b      	ldr	r3, [r5, #0]
 80129f2:	b103      	cbz	r3, 80129f6 <_write_r+0x1e>
 80129f4:	6023      	str	r3, [r4, #0]
 80129f6:	bd38      	pop	{r3, r4, r5, pc}
 80129f8:	200003f4 	.word	0x200003f4

080129fc <__errno>:
 80129fc:	4b01      	ldr	r3, [pc, #4]	@ (8012a04 <__errno+0x8>)
 80129fe:	6818      	ldr	r0, [r3, #0]
 8012a00:	4770      	bx	lr
 8012a02:	bf00      	nop
 8012a04:	20000020 	.word	0x20000020

08012a08 <__libc_init_array>:
 8012a08:	b570      	push	{r4, r5, r6, lr}
 8012a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8012a40 <__libc_init_array+0x38>)
 8012a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8012a44 <__libc_init_array+0x3c>)
 8012a0e:	1b64      	subs	r4, r4, r5
 8012a10:	10a4      	asrs	r4, r4, #2
 8012a12:	2600      	movs	r6, #0
 8012a14:	42a6      	cmp	r6, r4
 8012a16:	d109      	bne.n	8012a2c <__libc_init_array+0x24>
 8012a18:	4d0b      	ldr	r5, [pc, #44]	@ (8012a48 <__libc_init_array+0x40>)
 8012a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8012a4c <__libc_init_array+0x44>)
 8012a1c:	f004 fba4 	bl	8017168 <_init>
 8012a20:	1b64      	subs	r4, r4, r5
 8012a22:	10a4      	asrs	r4, r4, #2
 8012a24:	2600      	movs	r6, #0
 8012a26:	42a6      	cmp	r6, r4
 8012a28:	d105      	bne.n	8012a36 <__libc_init_array+0x2e>
 8012a2a:	bd70      	pop	{r4, r5, r6, pc}
 8012a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a30:	4798      	blx	r3
 8012a32:	3601      	adds	r6, #1
 8012a34:	e7ee      	b.n	8012a14 <__libc_init_array+0xc>
 8012a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a3a:	4798      	blx	r3
 8012a3c:	3601      	adds	r6, #1
 8012a3e:	e7f2      	b.n	8012a26 <__libc_init_array+0x1e>
 8012a40:	080177b0 	.word	0x080177b0
 8012a44:	080177b0 	.word	0x080177b0
 8012a48:	080177b0 	.word	0x080177b0
 8012a4c:	080177b4 	.word	0x080177b4

08012a50 <__retarget_lock_init_recursive>:
 8012a50:	4770      	bx	lr

08012a52 <__retarget_lock_acquire_recursive>:
 8012a52:	4770      	bx	lr

08012a54 <__retarget_lock_release_recursive>:
 8012a54:	4770      	bx	lr
	...

08012a58 <nanf>:
 8012a58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012a60 <nanf+0x8>
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	7fc00000 	.word	0x7fc00000

08012a64 <quorem>:
 8012a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a68:	6903      	ldr	r3, [r0, #16]
 8012a6a:	690c      	ldr	r4, [r1, #16]
 8012a6c:	42a3      	cmp	r3, r4
 8012a6e:	4607      	mov	r7, r0
 8012a70:	db7e      	blt.n	8012b70 <quorem+0x10c>
 8012a72:	3c01      	subs	r4, #1
 8012a74:	f101 0814 	add.w	r8, r1, #20
 8012a78:	00a3      	lsls	r3, r4, #2
 8012a7a:	f100 0514 	add.w	r5, r0, #20
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a84:	9301      	str	r3, [sp, #4]
 8012a86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a8e:	3301      	adds	r3, #1
 8012a90:	429a      	cmp	r2, r3
 8012a92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a96:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a9a:	d32e      	bcc.n	8012afa <quorem+0x96>
 8012a9c:	f04f 0a00 	mov.w	sl, #0
 8012aa0:	46c4      	mov	ip, r8
 8012aa2:	46ae      	mov	lr, r5
 8012aa4:	46d3      	mov	fp, sl
 8012aa6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012aaa:	b298      	uxth	r0, r3
 8012aac:	fb06 a000 	mla	r0, r6, r0, sl
 8012ab0:	0c02      	lsrs	r2, r0, #16
 8012ab2:	0c1b      	lsrs	r3, r3, #16
 8012ab4:	fb06 2303 	mla	r3, r6, r3, r2
 8012ab8:	f8de 2000 	ldr.w	r2, [lr]
 8012abc:	b280      	uxth	r0, r0
 8012abe:	b292      	uxth	r2, r2
 8012ac0:	1a12      	subs	r2, r2, r0
 8012ac2:	445a      	add	r2, fp
 8012ac4:	f8de 0000 	ldr.w	r0, [lr]
 8012ac8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012ad2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012ad6:	b292      	uxth	r2, r2
 8012ad8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012adc:	45e1      	cmp	r9, ip
 8012ade:	f84e 2b04 	str.w	r2, [lr], #4
 8012ae2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012ae6:	d2de      	bcs.n	8012aa6 <quorem+0x42>
 8012ae8:	9b00      	ldr	r3, [sp, #0]
 8012aea:	58eb      	ldr	r3, [r5, r3]
 8012aec:	b92b      	cbnz	r3, 8012afa <quorem+0x96>
 8012aee:	9b01      	ldr	r3, [sp, #4]
 8012af0:	3b04      	subs	r3, #4
 8012af2:	429d      	cmp	r5, r3
 8012af4:	461a      	mov	r2, r3
 8012af6:	d32f      	bcc.n	8012b58 <quorem+0xf4>
 8012af8:	613c      	str	r4, [r7, #16]
 8012afa:	4638      	mov	r0, r7
 8012afc:	f001 f9c4 	bl	8013e88 <__mcmp>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	db25      	blt.n	8012b50 <quorem+0xec>
 8012b04:	4629      	mov	r1, r5
 8012b06:	2000      	movs	r0, #0
 8012b08:	f858 2b04 	ldr.w	r2, [r8], #4
 8012b0c:	f8d1 c000 	ldr.w	ip, [r1]
 8012b10:	fa1f fe82 	uxth.w	lr, r2
 8012b14:	fa1f f38c 	uxth.w	r3, ip
 8012b18:	eba3 030e 	sub.w	r3, r3, lr
 8012b1c:	4403      	add	r3, r0
 8012b1e:	0c12      	lsrs	r2, r2, #16
 8012b20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012b24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012b2e:	45c1      	cmp	r9, r8
 8012b30:	f841 3b04 	str.w	r3, [r1], #4
 8012b34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012b38:	d2e6      	bcs.n	8012b08 <quorem+0xa4>
 8012b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b42:	b922      	cbnz	r2, 8012b4e <quorem+0xea>
 8012b44:	3b04      	subs	r3, #4
 8012b46:	429d      	cmp	r5, r3
 8012b48:	461a      	mov	r2, r3
 8012b4a:	d30b      	bcc.n	8012b64 <quorem+0x100>
 8012b4c:	613c      	str	r4, [r7, #16]
 8012b4e:	3601      	adds	r6, #1
 8012b50:	4630      	mov	r0, r6
 8012b52:	b003      	add	sp, #12
 8012b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b58:	6812      	ldr	r2, [r2, #0]
 8012b5a:	3b04      	subs	r3, #4
 8012b5c:	2a00      	cmp	r2, #0
 8012b5e:	d1cb      	bne.n	8012af8 <quorem+0x94>
 8012b60:	3c01      	subs	r4, #1
 8012b62:	e7c6      	b.n	8012af2 <quorem+0x8e>
 8012b64:	6812      	ldr	r2, [r2, #0]
 8012b66:	3b04      	subs	r3, #4
 8012b68:	2a00      	cmp	r2, #0
 8012b6a:	d1ef      	bne.n	8012b4c <quorem+0xe8>
 8012b6c:	3c01      	subs	r4, #1
 8012b6e:	e7ea      	b.n	8012b46 <quorem+0xe2>
 8012b70:	2000      	movs	r0, #0
 8012b72:	e7ee      	b.n	8012b52 <quorem+0xee>
 8012b74:	0000      	movs	r0, r0
	...

08012b78 <_dtoa_r>:
 8012b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7c:	69c7      	ldr	r7, [r0, #28]
 8012b7e:	b099      	sub	sp, #100	@ 0x64
 8012b80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012b84:	ec55 4b10 	vmov	r4, r5, d0
 8012b88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012b8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012b8c:	4683      	mov	fp, r0
 8012b8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012b92:	b97f      	cbnz	r7, 8012bb4 <_dtoa_r+0x3c>
 8012b94:	2010      	movs	r0, #16
 8012b96:	f000 fdfd 	bl	8013794 <malloc>
 8012b9a:	4602      	mov	r2, r0
 8012b9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012ba0:	b920      	cbnz	r0, 8012bac <_dtoa_r+0x34>
 8012ba2:	4ba7      	ldr	r3, [pc, #668]	@ (8012e40 <_dtoa_r+0x2c8>)
 8012ba4:	21ef      	movs	r1, #239	@ 0xef
 8012ba6:	48a7      	ldr	r0, [pc, #668]	@ (8012e44 <_dtoa_r+0x2cc>)
 8012ba8:	f002 fc36 	bl	8015418 <__assert_func>
 8012bac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012bb0:	6007      	str	r7, [r0, #0]
 8012bb2:	60c7      	str	r7, [r0, #12]
 8012bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012bb8:	6819      	ldr	r1, [r3, #0]
 8012bba:	b159      	cbz	r1, 8012bd4 <_dtoa_r+0x5c>
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	604a      	str	r2, [r1, #4]
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	4093      	lsls	r3, r2
 8012bc4:	608b      	str	r3, [r1, #8]
 8012bc6:	4658      	mov	r0, fp
 8012bc8:	f000 feda 	bl	8013980 <_Bfree>
 8012bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	1e2b      	subs	r3, r5, #0
 8012bd6:	bfb9      	ittee	lt
 8012bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012bdc:	9303      	strlt	r3, [sp, #12]
 8012bde:	2300      	movge	r3, #0
 8012be0:	6033      	strge	r3, [r6, #0]
 8012be2:	9f03      	ldr	r7, [sp, #12]
 8012be4:	4b98      	ldr	r3, [pc, #608]	@ (8012e48 <_dtoa_r+0x2d0>)
 8012be6:	bfbc      	itt	lt
 8012be8:	2201      	movlt	r2, #1
 8012bea:	6032      	strlt	r2, [r6, #0]
 8012bec:	43bb      	bics	r3, r7
 8012bee:	d112      	bne.n	8012c16 <_dtoa_r+0x9e>
 8012bf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012bf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012bf6:	6013      	str	r3, [r2, #0]
 8012bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012bfc:	4323      	orrs	r3, r4
 8012bfe:	f000 854d 	beq.w	801369c <_dtoa_r+0xb24>
 8012c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012e5c <_dtoa_r+0x2e4>
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f000 854f 	beq.w	80136ac <_dtoa_r+0xb34>
 8012c0e:	f10a 0303 	add.w	r3, sl, #3
 8012c12:	f000 bd49 	b.w	80136a8 <_dtoa_r+0xb30>
 8012c16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	ec51 0b17 	vmov	r0, r1, d7
 8012c20:	2300      	movs	r3, #0
 8012c22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012c26:	f7fe fc4f 	bl	80114c8 <__aeabi_dcmpeq>
 8012c2a:	4680      	mov	r8, r0
 8012c2c:	b158      	cbz	r0, 8012c46 <_dtoa_r+0xce>
 8012c2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012c30:	2301      	movs	r3, #1
 8012c32:	6013      	str	r3, [r2, #0]
 8012c34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c36:	b113      	cbz	r3, 8012c3e <_dtoa_r+0xc6>
 8012c38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012c3a:	4b84      	ldr	r3, [pc, #528]	@ (8012e4c <_dtoa_r+0x2d4>)
 8012c3c:	6013      	str	r3, [r2, #0]
 8012c3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012e60 <_dtoa_r+0x2e8>
 8012c42:	f000 bd33 	b.w	80136ac <_dtoa_r+0xb34>
 8012c46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012c4a:	aa16      	add	r2, sp, #88	@ 0x58
 8012c4c:	a917      	add	r1, sp, #92	@ 0x5c
 8012c4e:	4658      	mov	r0, fp
 8012c50:	f001 fa3a 	bl	80140c8 <__d2b>
 8012c54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012c58:	4681      	mov	r9, r0
 8012c5a:	2e00      	cmp	r6, #0
 8012c5c:	d077      	beq.n	8012d4e <_dtoa_r+0x1d6>
 8012c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012c6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012c70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012c74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012c78:	4619      	mov	r1, r3
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	4b74      	ldr	r3, [pc, #464]	@ (8012e50 <_dtoa_r+0x2d8>)
 8012c7e:	f7fe f803 	bl	8010c88 <__aeabi_dsub>
 8012c82:	a369      	add	r3, pc, #420	@ (adr r3, 8012e28 <_dtoa_r+0x2b0>)
 8012c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c88:	f7fe f9b6 	bl	8010ff8 <__aeabi_dmul>
 8012c8c:	a368      	add	r3, pc, #416	@ (adr r3, 8012e30 <_dtoa_r+0x2b8>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7fd fffb 	bl	8010c8c <__adddf3>
 8012c96:	4604      	mov	r4, r0
 8012c98:	4630      	mov	r0, r6
 8012c9a:	460d      	mov	r5, r1
 8012c9c:	f7fe f942 	bl	8010f24 <__aeabi_i2d>
 8012ca0:	a365      	add	r3, pc, #404	@ (adr r3, 8012e38 <_dtoa_r+0x2c0>)
 8012ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca6:	f7fe f9a7 	bl	8010ff8 <__aeabi_dmul>
 8012caa:	4602      	mov	r2, r0
 8012cac:	460b      	mov	r3, r1
 8012cae:	4620      	mov	r0, r4
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	f7fd ffeb 	bl	8010c8c <__adddf3>
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	460d      	mov	r5, r1
 8012cba:	f7fe fc4d 	bl	8011558 <__aeabi_d2iz>
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	4607      	mov	r7, r0
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	4629      	mov	r1, r5
 8012cc8:	f7fe fc08 	bl	80114dc <__aeabi_dcmplt>
 8012ccc:	b140      	cbz	r0, 8012ce0 <_dtoa_r+0x168>
 8012cce:	4638      	mov	r0, r7
 8012cd0:	f7fe f928 	bl	8010f24 <__aeabi_i2d>
 8012cd4:	4622      	mov	r2, r4
 8012cd6:	462b      	mov	r3, r5
 8012cd8:	f7fe fbf6 	bl	80114c8 <__aeabi_dcmpeq>
 8012cdc:	b900      	cbnz	r0, 8012ce0 <_dtoa_r+0x168>
 8012cde:	3f01      	subs	r7, #1
 8012ce0:	2f16      	cmp	r7, #22
 8012ce2:	d851      	bhi.n	8012d88 <_dtoa_r+0x210>
 8012ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8012e54 <_dtoa_r+0x2dc>)
 8012ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012cf2:	f7fe fbf3 	bl	80114dc <__aeabi_dcmplt>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d048      	beq.n	8012d8c <_dtoa_r+0x214>
 8012cfa:	3f01      	subs	r7, #1
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8012d00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012d02:	1b9b      	subs	r3, r3, r6
 8012d04:	1e5a      	subs	r2, r3, #1
 8012d06:	bf44      	itt	mi
 8012d08:	f1c3 0801 	rsbmi	r8, r3, #1
 8012d0c:	2300      	movmi	r3, #0
 8012d0e:	9208      	str	r2, [sp, #32]
 8012d10:	bf54      	ite	pl
 8012d12:	f04f 0800 	movpl.w	r8, #0
 8012d16:	9308      	strmi	r3, [sp, #32]
 8012d18:	2f00      	cmp	r7, #0
 8012d1a:	db39      	blt.n	8012d90 <_dtoa_r+0x218>
 8012d1c:	9b08      	ldr	r3, [sp, #32]
 8012d1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012d20:	443b      	add	r3, r7
 8012d22:	9308      	str	r3, [sp, #32]
 8012d24:	2300      	movs	r3, #0
 8012d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d2a:	2b09      	cmp	r3, #9
 8012d2c:	d864      	bhi.n	8012df8 <_dtoa_r+0x280>
 8012d2e:	2b05      	cmp	r3, #5
 8012d30:	bfc4      	itt	gt
 8012d32:	3b04      	subgt	r3, #4
 8012d34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d38:	f1a3 0302 	sub.w	r3, r3, #2
 8012d3c:	bfcc      	ite	gt
 8012d3e:	2400      	movgt	r4, #0
 8012d40:	2401      	movle	r4, #1
 8012d42:	2b03      	cmp	r3, #3
 8012d44:	d863      	bhi.n	8012e0e <_dtoa_r+0x296>
 8012d46:	e8df f003 	tbb	[pc, r3]
 8012d4a:	372a      	.short	0x372a
 8012d4c:	5535      	.short	0x5535
 8012d4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012d52:	441e      	add	r6, r3
 8012d54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012d58:	2b20      	cmp	r3, #32
 8012d5a:	bfc1      	itttt	gt
 8012d5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012d60:	409f      	lslgt	r7, r3
 8012d62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012d66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012d6a:	bfd6      	itet	le
 8012d6c:	f1c3 0320 	rsble	r3, r3, #32
 8012d70:	ea47 0003 	orrgt.w	r0, r7, r3
 8012d74:	fa04 f003 	lslle.w	r0, r4, r3
 8012d78:	f7fe f8c4 	bl	8010f04 <__aeabi_ui2d>
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012d82:	3e01      	subs	r6, #1
 8012d84:	9214      	str	r2, [sp, #80]	@ 0x50
 8012d86:	e777      	b.n	8012c78 <_dtoa_r+0x100>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e7b8      	b.n	8012cfe <_dtoa_r+0x186>
 8012d8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012d8e:	e7b7      	b.n	8012d00 <_dtoa_r+0x188>
 8012d90:	427b      	negs	r3, r7
 8012d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d94:	2300      	movs	r3, #0
 8012d96:	eba8 0807 	sub.w	r8, r8, r7
 8012d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d9c:	e7c4      	b.n	8012d28 <_dtoa_r+0x1b0>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012da2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	dc35      	bgt.n	8012e14 <_dtoa_r+0x29c>
 8012da8:	2301      	movs	r3, #1
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	9307      	str	r3, [sp, #28]
 8012dae:	461a      	mov	r2, r3
 8012db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8012db2:	e00b      	b.n	8012dcc <_dtoa_r+0x254>
 8012db4:	2301      	movs	r3, #1
 8012db6:	e7f3      	b.n	8012da0 <_dtoa_r+0x228>
 8012db8:	2300      	movs	r3, #0
 8012dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dbe:	18fb      	adds	r3, r7, r3
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	9307      	str	r3, [sp, #28]
 8012dc8:	bfb8      	it	lt
 8012dca:	2301      	movlt	r3, #1
 8012dcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	2204      	movs	r2, #4
 8012dd4:	f102 0514 	add.w	r5, r2, #20
 8012dd8:	429d      	cmp	r5, r3
 8012dda:	d91f      	bls.n	8012e1c <_dtoa_r+0x2a4>
 8012ddc:	6041      	str	r1, [r0, #4]
 8012dde:	4658      	mov	r0, fp
 8012de0:	f000 fd8e 	bl	8013900 <_Balloc>
 8012de4:	4682      	mov	sl, r0
 8012de6:	2800      	cmp	r0, #0
 8012de8:	d13c      	bne.n	8012e64 <_dtoa_r+0x2ec>
 8012dea:	4b1b      	ldr	r3, [pc, #108]	@ (8012e58 <_dtoa_r+0x2e0>)
 8012dec:	4602      	mov	r2, r0
 8012dee:	f240 11af 	movw	r1, #431	@ 0x1af
 8012df2:	e6d8      	b.n	8012ba6 <_dtoa_r+0x2e>
 8012df4:	2301      	movs	r3, #1
 8012df6:	e7e0      	b.n	8012dba <_dtoa_r+0x242>
 8012df8:	2401      	movs	r4, #1
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012e00:	f04f 33ff 	mov.w	r3, #4294967295
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	9307      	str	r3, [sp, #28]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	2312      	movs	r3, #18
 8012e0c:	e7d0      	b.n	8012db0 <_dtoa_r+0x238>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e12:	e7f5      	b.n	8012e00 <_dtoa_r+0x288>
 8012e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	9307      	str	r3, [sp, #28]
 8012e1a:	e7d7      	b.n	8012dcc <_dtoa_r+0x254>
 8012e1c:	3101      	adds	r1, #1
 8012e1e:	0052      	lsls	r2, r2, #1
 8012e20:	e7d8      	b.n	8012dd4 <_dtoa_r+0x25c>
 8012e22:	bf00      	nop
 8012e24:	f3af 8000 	nop.w
 8012e28:	636f4361 	.word	0x636f4361
 8012e2c:	3fd287a7 	.word	0x3fd287a7
 8012e30:	8b60c8b3 	.word	0x8b60c8b3
 8012e34:	3fc68a28 	.word	0x3fc68a28
 8012e38:	509f79fb 	.word	0x509f79fb
 8012e3c:	3fd34413 	.word	0x3fd34413
 8012e40:	080171e6 	.word	0x080171e6
 8012e44:	080171fd 	.word	0x080171fd
 8012e48:	7ff00000 	.word	0x7ff00000
 8012e4c:	080171b1 	.word	0x080171b1
 8012e50:	3ff80000 	.word	0x3ff80000
 8012e54:	080172f8 	.word	0x080172f8
 8012e58:	08017255 	.word	0x08017255
 8012e5c:	080171e2 	.word	0x080171e2
 8012e60:	080171b0 	.word	0x080171b0
 8012e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012e68:	6018      	str	r0, [r3, #0]
 8012e6a:	9b07      	ldr	r3, [sp, #28]
 8012e6c:	2b0e      	cmp	r3, #14
 8012e6e:	f200 80a4 	bhi.w	8012fba <_dtoa_r+0x442>
 8012e72:	2c00      	cmp	r4, #0
 8012e74:	f000 80a1 	beq.w	8012fba <_dtoa_r+0x442>
 8012e78:	2f00      	cmp	r7, #0
 8012e7a:	dd33      	ble.n	8012ee4 <_dtoa_r+0x36c>
 8012e7c:	4bad      	ldr	r3, [pc, #692]	@ (8013134 <_dtoa_r+0x5bc>)
 8012e7e:	f007 020f 	and.w	r2, r7, #15
 8012e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e86:	ed93 7b00 	vldr	d7, [r3]
 8012e8a:	05f8      	lsls	r0, r7, #23
 8012e8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012e90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012e94:	d516      	bpl.n	8012ec4 <_dtoa_r+0x34c>
 8012e96:	4ba8      	ldr	r3, [pc, #672]	@ (8013138 <_dtoa_r+0x5c0>)
 8012e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ea0:	f7fe f9d4 	bl	801124c <__aeabi_ddiv>
 8012ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ea8:	f004 040f 	and.w	r4, r4, #15
 8012eac:	2603      	movs	r6, #3
 8012eae:	4da2      	ldr	r5, [pc, #648]	@ (8013138 <_dtoa_r+0x5c0>)
 8012eb0:	b954      	cbnz	r4, 8012ec8 <_dtoa_r+0x350>
 8012eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eba:	f7fe f9c7 	bl	801124c <__aeabi_ddiv>
 8012ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ec2:	e028      	b.n	8012f16 <_dtoa_r+0x39e>
 8012ec4:	2602      	movs	r6, #2
 8012ec6:	e7f2      	b.n	8012eae <_dtoa_r+0x336>
 8012ec8:	07e1      	lsls	r1, r4, #31
 8012eca:	d508      	bpl.n	8012ede <_dtoa_r+0x366>
 8012ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ed0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012ed4:	f7fe f890 	bl	8010ff8 <__aeabi_dmul>
 8012ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012edc:	3601      	adds	r6, #1
 8012ede:	1064      	asrs	r4, r4, #1
 8012ee0:	3508      	adds	r5, #8
 8012ee2:	e7e5      	b.n	8012eb0 <_dtoa_r+0x338>
 8012ee4:	f000 80d2 	beq.w	801308c <_dtoa_r+0x514>
 8012ee8:	427c      	negs	r4, r7
 8012eea:	4b92      	ldr	r3, [pc, #584]	@ (8013134 <_dtoa_r+0x5bc>)
 8012eec:	4d92      	ldr	r5, [pc, #584]	@ (8013138 <_dtoa_r+0x5c0>)
 8012eee:	f004 020f 	and.w	r2, r4, #15
 8012ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012efe:	f7fe f87b 	bl	8010ff8 <__aeabi_dmul>
 8012f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f06:	1124      	asrs	r4, r4, #4
 8012f08:	2300      	movs	r3, #0
 8012f0a:	2602      	movs	r6, #2
 8012f0c:	2c00      	cmp	r4, #0
 8012f0e:	f040 80b2 	bne.w	8013076 <_dtoa_r+0x4fe>
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1d3      	bne.n	8012ebe <_dtoa_r+0x346>
 8012f16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012f18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 80b7 	beq.w	8013090 <_dtoa_r+0x518>
 8012f22:	4b86      	ldr	r3, [pc, #536]	@ (801313c <_dtoa_r+0x5c4>)
 8012f24:	2200      	movs	r2, #0
 8012f26:	4620      	mov	r0, r4
 8012f28:	4629      	mov	r1, r5
 8012f2a:	f7fe fad7 	bl	80114dc <__aeabi_dcmplt>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	f000 80ae 	beq.w	8013090 <_dtoa_r+0x518>
 8012f34:	9b07      	ldr	r3, [sp, #28]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	f000 80aa 	beq.w	8013090 <_dtoa_r+0x518>
 8012f3c:	9b00      	ldr	r3, [sp, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	dd37      	ble.n	8012fb2 <_dtoa_r+0x43a>
 8012f42:	1e7b      	subs	r3, r7, #1
 8012f44:	9304      	str	r3, [sp, #16]
 8012f46:	4620      	mov	r0, r4
 8012f48:	4b7d      	ldr	r3, [pc, #500]	@ (8013140 <_dtoa_r+0x5c8>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	f7fe f853 	bl	8010ff8 <__aeabi_dmul>
 8012f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f56:	9c00      	ldr	r4, [sp, #0]
 8012f58:	3601      	adds	r6, #1
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	f7fd ffe2 	bl	8010f24 <__aeabi_i2d>
 8012f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012f64:	f7fe f848 	bl	8010ff8 <__aeabi_dmul>
 8012f68:	4b76      	ldr	r3, [pc, #472]	@ (8013144 <_dtoa_r+0x5cc>)
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f7fd fe8e 	bl	8010c8c <__adddf3>
 8012f70:	4605      	mov	r5, r0
 8012f72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012f76:	2c00      	cmp	r4, #0
 8012f78:	f040 808d 	bne.w	8013096 <_dtoa_r+0x51e>
 8012f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f80:	4b71      	ldr	r3, [pc, #452]	@ (8013148 <_dtoa_r+0x5d0>)
 8012f82:	2200      	movs	r2, #0
 8012f84:	f7fd fe80 	bl	8010c88 <__aeabi_dsub>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012f90:	462a      	mov	r2, r5
 8012f92:	4633      	mov	r3, r6
 8012f94:	f7fe fac0 	bl	8011518 <__aeabi_dcmpgt>
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	f040 828b 	bne.w	80134b4 <_dtoa_r+0x93c>
 8012f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fa2:	462a      	mov	r2, r5
 8012fa4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012fa8:	f7fe fa98 	bl	80114dc <__aeabi_dcmplt>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	f040 8128 	bne.w	8013202 <_dtoa_r+0x68a>
 8012fb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012fb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	f2c0 815a 	blt.w	8013276 <_dtoa_r+0x6fe>
 8012fc2:	2f0e      	cmp	r7, #14
 8012fc4:	f300 8157 	bgt.w	8013276 <_dtoa_r+0x6fe>
 8012fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8013134 <_dtoa_r+0x5bc>)
 8012fca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012fce:	ed93 7b00 	vldr	d7, [r3]
 8012fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	ed8d 7b00 	vstr	d7, [sp]
 8012fda:	da03      	bge.n	8012fe4 <_dtoa_r+0x46c>
 8012fdc:	9b07      	ldr	r3, [sp, #28]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	f340 8101 	ble.w	80131e6 <_dtoa_r+0x66e>
 8012fe4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012fe8:	4656      	mov	r6, sl
 8012fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fee:	4620      	mov	r0, r4
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	f7fe f92b 	bl	801124c <__aeabi_ddiv>
 8012ff6:	f7fe faaf 	bl	8011558 <__aeabi_d2iz>
 8012ffa:	4680      	mov	r8, r0
 8012ffc:	f7fd ff92 	bl	8010f24 <__aeabi_i2d>
 8013000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013004:	f7fd fff8 	bl	8010ff8 <__aeabi_dmul>
 8013008:	4602      	mov	r2, r0
 801300a:	460b      	mov	r3, r1
 801300c:	4620      	mov	r0, r4
 801300e:	4629      	mov	r1, r5
 8013010:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013014:	f7fd fe38 	bl	8010c88 <__aeabi_dsub>
 8013018:	f806 4b01 	strb.w	r4, [r6], #1
 801301c:	9d07      	ldr	r5, [sp, #28]
 801301e:	eba6 040a 	sub.w	r4, r6, sl
 8013022:	42a5      	cmp	r5, r4
 8013024:	4602      	mov	r2, r0
 8013026:	460b      	mov	r3, r1
 8013028:	f040 8117 	bne.w	801325a <_dtoa_r+0x6e2>
 801302c:	f7fd fe2e 	bl	8010c8c <__adddf3>
 8013030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013034:	4604      	mov	r4, r0
 8013036:	460d      	mov	r5, r1
 8013038:	f7fe fa6e 	bl	8011518 <__aeabi_dcmpgt>
 801303c:	2800      	cmp	r0, #0
 801303e:	f040 80f9 	bne.w	8013234 <_dtoa_r+0x6bc>
 8013042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013046:	4620      	mov	r0, r4
 8013048:	4629      	mov	r1, r5
 801304a:	f7fe fa3d 	bl	80114c8 <__aeabi_dcmpeq>
 801304e:	b118      	cbz	r0, 8013058 <_dtoa_r+0x4e0>
 8013050:	f018 0f01 	tst.w	r8, #1
 8013054:	f040 80ee 	bne.w	8013234 <_dtoa_r+0x6bc>
 8013058:	4649      	mov	r1, r9
 801305a:	4658      	mov	r0, fp
 801305c:	f000 fc90 	bl	8013980 <_Bfree>
 8013060:	2300      	movs	r3, #0
 8013062:	7033      	strb	r3, [r6, #0]
 8013064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013066:	3701      	adds	r7, #1
 8013068:	601f      	str	r7, [r3, #0]
 801306a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801306c:	2b00      	cmp	r3, #0
 801306e:	f000 831d 	beq.w	80136ac <_dtoa_r+0xb34>
 8013072:	601e      	str	r6, [r3, #0]
 8013074:	e31a      	b.n	80136ac <_dtoa_r+0xb34>
 8013076:	07e2      	lsls	r2, r4, #31
 8013078:	d505      	bpl.n	8013086 <_dtoa_r+0x50e>
 801307a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801307e:	f7fd ffbb 	bl	8010ff8 <__aeabi_dmul>
 8013082:	3601      	adds	r6, #1
 8013084:	2301      	movs	r3, #1
 8013086:	1064      	asrs	r4, r4, #1
 8013088:	3508      	adds	r5, #8
 801308a:	e73f      	b.n	8012f0c <_dtoa_r+0x394>
 801308c:	2602      	movs	r6, #2
 801308e:	e742      	b.n	8012f16 <_dtoa_r+0x39e>
 8013090:	9c07      	ldr	r4, [sp, #28]
 8013092:	9704      	str	r7, [sp, #16]
 8013094:	e761      	b.n	8012f5a <_dtoa_r+0x3e2>
 8013096:	4b27      	ldr	r3, [pc, #156]	@ (8013134 <_dtoa_r+0x5bc>)
 8013098:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801309a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801309e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80130a2:	4454      	add	r4, sl
 80130a4:	2900      	cmp	r1, #0
 80130a6:	d053      	beq.n	8013150 <_dtoa_r+0x5d8>
 80130a8:	4928      	ldr	r1, [pc, #160]	@ (801314c <_dtoa_r+0x5d4>)
 80130aa:	2000      	movs	r0, #0
 80130ac:	f7fe f8ce 	bl	801124c <__aeabi_ddiv>
 80130b0:	4633      	mov	r3, r6
 80130b2:	462a      	mov	r2, r5
 80130b4:	f7fd fde8 	bl	8010c88 <__aeabi_dsub>
 80130b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80130bc:	4656      	mov	r6, sl
 80130be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130c2:	f7fe fa49 	bl	8011558 <__aeabi_d2iz>
 80130c6:	4605      	mov	r5, r0
 80130c8:	f7fd ff2c 	bl	8010f24 <__aeabi_i2d>
 80130cc:	4602      	mov	r2, r0
 80130ce:	460b      	mov	r3, r1
 80130d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130d4:	f7fd fdd8 	bl	8010c88 <__aeabi_dsub>
 80130d8:	3530      	adds	r5, #48	@ 0x30
 80130da:	4602      	mov	r2, r0
 80130dc:	460b      	mov	r3, r1
 80130de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80130e2:	f806 5b01 	strb.w	r5, [r6], #1
 80130e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80130ea:	f7fe f9f7 	bl	80114dc <__aeabi_dcmplt>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d171      	bne.n	80131d6 <_dtoa_r+0x65e>
 80130f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130f6:	4911      	ldr	r1, [pc, #68]	@ (801313c <_dtoa_r+0x5c4>)
 80130f8:	2000      	movs	r0, #0
 80130fa:	f7fd fdc5 	bl	8010c88 <__aeabi_dsub>
 80130fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013102:	f7fe f9eb 	bl	80114dc <__aeabi_dcmplt>
 8013106:	2800      	cmp	r0, #0
 8013108:	f040 8095 	bne.w	8013236 <_dtoa_r+0x6be>
 801310c:	42a6      	cmp	r6, r4
 801310e:	f43f af50 	beq.w	8012fb2 <_dtoa_r+0x43a>
 8013112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013116:	4b0a      	ldr	r3, [pc, #40]	@ (8013140 <_dtoa_r+0x5c8>)
 8013118:	2200      	movs	r2, #0
 801311a:	f7fd ff6d 	bl	8010ff8 <__aeabi_dmul>
 801311e:	4b08      	ldr	r3, [pc, #32]	@ (8013140 <_dtoa_r+0x5c8>)
 8013120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013124:	2200      	movs	r2, #0
 8013126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801312a:	f7fd ff65 	bl	8010ff8 <__aeabi_dmul>
 801312e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013132:	e7c4      	b.n	80130be <_dtoa_r+0x546>
 8013134:	080172f8 	.word	0x080172f8
 8013138:	080172d0 	.word	0x080172d0
 801313c:	3ff00000 	.word	0x3ff00000
 8013140:	40240000 	.word	0x40240000
 8013144:	401c0000 	.word	0x401c0000
 8013148:	40140000 	.word	0x40140000
 801314c:	3fe00000 	.word	0x3fe00000
 8013150:	4631      	mov	r1, r6
 8013152:	4628      	mov	r0, r5
 8013154:	f7fd ff50 	bl	8010ff8 <__aeabi_dmul>
 8013158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801315c:	9415      	str	r4, [sp, #84]	@ 0x54
 801315e:	4656      	mov	r6, sl
 8013160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013164:	f7fe f9f8 	bl	8011558 <__aeabi_d2iz>
 8013168:	4605      	mov	r5, r0
 801316a:	f7fd fedb 	bl	8010f24 <__aeabi_i2d>
 801316e:	4602      	mov	r2, r0
 8013170:	460b      	mov	r3, r1
 8013172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013176:	f7fd fd87 	bl	8010c88 <__aeabi_dsub>
 801317a:	3530      	adds	r5, #48	@ 0x30
 801317c:	f806 5b01 	strb.w	r5, [r6], #1
 8013180:	4602      	mov	r2, r0
 8013182:	460b      	mov	r3, r1
 8013184:	42a6      	cmp	r6, r4
 8013186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801318a:	f04f 0200 	mov.w	r2, #0
 801318e:	d124      	bne.n	80131da <_dtoa_r+0x662>
 8013190:	4bac      	ldr	r3, [pc, #688]	@ (8013444 <_dtoa_r+0x8cc>)
 8013192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013196:	f7fd fd79 	bl	8010c8c <__adddf3>
 801319a:	4602      	mov	r2, r0
 801319c:	460b      	mov	r3, r1
 801319e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131a2:	f7fe f9b9 	bl	8011518 <__aeabi_dcmpgt>
 80131a6:	2800      	cmp	r0, #0
 80131a8:	d145      	bne.n	8013236 <_dtoa_r+0x6be>
 80131aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80131ae:	49a5      	ldr	r1, [pc, #660]	@ (8013444 <_dtoa_r+0x8cc>)
 80131b0:	2000      	movs	r0, #0
 80131b2:	f7fd fd69 	bl	8010c88 <__aeabi_dsub>
 80131b6:	4602      	mov	r2, r0
 80131b8:	460b      	mov	r3, r1
 80131ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131be:	f7fe f98d 	bl	80114dc <__aeabi_dcmplt>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	f43f aef5 	beq.w	8012fb2 <_dtoa_r+0x43a>
 80131c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80131ca:	1e73      	subs	r3, r6, #1
 80131cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80131ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80131d2:	2b30      	cmp	r3, #48	@ 0x30
 80131d4:	d0f8      	beq.n	80131c8 <_dtoa_r+0x650>
 80131d6:	9f04      	ldr	r7, [sp, #16]
 80131d8:	e73e      	b.n	8013058 <_dtoa_r+0x4e0>
 80131da:	4b9b      	ldr	r3, [pc, #620]	@ (8013448 <_dtoa_r+0x8d0>)
 80131dc:	f7fd ff0c 	bl	8010ff8 <__aeabi_dmul>
 80131e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131e4:	e7bc      	b.n	8013160 <_dtoa_r+0x5e8>
 80131e6:	d10c      	bne.n	8013202 <_dtoa_r+0x68a>
 80131e8:	4b98      	ldr	r3, [pc, #608]	@ (801344c <_dtoa_r+0x8d4>)
 80131ea:	2200      	movs	r2, #0
 80131ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131f0:	f7fd ff02 	bl	8010ff8 <__aeabi_dmul>
 80131f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131f8:	f7fe f984 	bl	8011504 <__aeabi_dcmpge>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	f000 8157 	beq.w	80134b0 <_dtoa_r+0x938>
 8013202:	2400      	movs	r4, #0
 8013204:	4625      	mov	r5, r4
 8013206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013208:	43db      	mvns	r3, r3
 801320a:	9304      	str	r3, [sp, #16]
 801320c:	4656      	mov	r6, sl
 801320e:	2700      	movs	r7, #0
 8013210:	4621      	mov	r1, r4
 8013212:	4658      	mov	r0, fp
 8013214:	f000 fbb4 	bl	8013980 <_Bfree>
 8013218:	2d00      	cmp	r5, #0
 801321a:	d0dc      	beq.n	80131d6 <_dtoa_r+0x65e>
 801321c:	b12f      	cbz	r7, 801322a <_dtoa_r+0x6b2>
 801321e:	42af      	cmp	r7, r5
 8013220:	d003      	beq.n	801322a <_dtoa_r+0x6b2>
 8013222:	4639      	mov	r1, r7
 8013224:	4658      	mov	r0, fp
 8013226:	f000 fbab 	bl	8013980 <_Bfree>
 801322a:	4629      	mov	r1, r5
 801322c:	4658      	mov	r0, fp
 801322e:	f000 fba7 	bl	8013980 <_Bfree>
 8013232:	e7d0      	b.n	80131d6 <_dtoa_r+0x65e>
 8013234:	9704      	str	r7, [sp, #16]
 8013236:	4633      	mov	r3, r6
 8013238:	461e      	mov	r6, r3
 801323a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801323e:	2a39      	cmp	r2, #57	@ 0x39
 8013240:	d107      	bne.n	8013252 <_dtoa_r+0x6da>
 8013242:	459a      	cmp	sl, r3
 8013244:	d1f8      	bne.n	8013238 <_dtoa_r+0x6c0>
 8013246:	9a04      	ldr	r2, [sp, #16]
 8013248:	3201      	adds	r2, #1
 801324a:	9204      	str	r2, [sp, #16]
 801324c:	2230      	movs	r2, #48	@ 0x30
 801324e:	f88a 2000 	strb.w	r2, [sl]
 8013252:	781a      	ldrb	r2, [r3, #0]
 8013254:	3201      	adds	r2, #1
 8013256:	701a      	strb	r2, [r3, #0]
 8013258:	e7bd      	b.n	80131d6 <_dtoa_r+0x65e>
 801325a:	4b7b      	ldr	r3, [pc, #492]	@ (8013448 <_dtoa_r+0x8d0>)
 801325c:	2200      	movs	r2, #0
 801325e:	f7fd fecb 	bl	8010ff8 <__aeabi_dmul>
 8013262:	2200      	movs	r2, #0
 8013264:	2300      	movs	r3, #0
 8013266:	4604      	mov	r4, r0
 8013268:	460d      	mov	r5, r1
 801326a:	f7fe f92d 	bl	80114c8 <__aeabi_dcmpeq>
 801326e:	2800      	cmp	r0, #0
 8013270:	f43f aebb 	beq.w	8012fea <_dtoa_r+0x472>
 8013274:	e6f0      	b.n	8013058 <_dtoa_r+0x4e0>
 8013276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013278:	2a00      	cmp	r2, #0
 801327a:	f000 80db 	beq.w	8013434 <_dtoa_r+0x8bc>
 801327e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013280:	2a01      	cmp	r2, #1
 8013282:	f300 80bf 	bgt.w	8013404 <_dtoa_r+0x88c>
 8013286:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013288:	2a00      	cmp	r2, #0
 801328a:	f000 80b7 	beq.w	80133fc <_dtoa_r+0x884>
 801328e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013292:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013294:	4646      	mov	r6, r8
 8013296:	9a08      	ldr	r2, [sp, #32]
 8013298:	2101      	movs	r1, #1
 801329a:	441a      	add	r2, r3
 801329c:	4658      	mov	r0, fp
 801329e:	4498      	add	r8, r3
 80132a0:	9208      	str	r2, [sp, #32]
 80132a2:	f000 fc6b 	bl	8013b7c <__i2b>
 80132a6:	4605      	mov	r5, r0
 80132a8:	b15e      	cbz	r6, 80132c2 <_dtoa_r+0x74a>
 80132aa:	9b08      	ldr	r3, [sp, #32]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	dd08      	ble.n	80132c2 <_dtoa_r+0x74a>
 80132b0:	42b3      	cmp	r3, r6
 80132b2:	9a08      	ldr	r2, [sp, #32]
 80132b4:	bfa8      	it	ge
 80132b6:	4633      	movge	r3, r6
 80132b8:	eba8 0803 	sub.w	r8, r8, r3
 80132bc:	1af6      	subs	r6, r6, r3
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	9308      	str	r3, [sp, #32]
 80132c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132c4:	b1f3      	cbz	r3, 8013304 <_dtoa_r+0x78c>
 80132c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	f000 80b7 	beq.w	801343c <_dtoa_r+0x8c4>
 80132ce:	b18c      	cbz	r4, 80132f4 <_dtoa_r+0x77c>
 80132d0:	4629      	mov	r1, r5
 80132d2:	4622      	mov	r2, r4
 80132d4:	4658      	mov	r0, fp
 80132d6:	f000 fd11 	bl	8013cfc <__pow5mult>
 80132da:	464a      	mov	r2, r9
 80132dc:	4601      	mov	r1, r0
 80132de:	4605      	mov	r5, r0
 80132e0:	4658      	mov	r0, fp
 80132e2:	f000 fc61 	bl	8013ba8 <__multiply>
 80132e6:	4649      	mov	r1, r9
 80132e8:	9004      	str	r0, [sp, #16]
 80132ea:	4658      	mov	r0, fp
 80132ec:	f000 fb48 	bl	8013980 <_Bfree>
 80132f0:	9b04      	ldr	r3, [sp, #16]
 80132f2:	4699      	mov	r9, r3
 80132f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132f6:	1b1a      	subs	r2, r3, r4
 80132f8:	d004      	beq.n	8013304 <_dtoa_r+0x78c>
 80132fa:	4649      	mov	r1, r9
 80132fc:	4658      	mov	r0, fp
 80132fe:	f000 fcfd 	bl	8013cfc <__pow5mult>
 8013302:	4681      	mov	r9, r0
 8013304:	2101      	movs	r1, #1
 8013306:	4658      	mov	r0, fp
 8013308:	f000 fc38 	bl	8013b7c <__i2b>
 801330c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801330e:	4604      	mov	r4, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	f000 81cf 	beq.w	80136b4 <_dtoa_r+0xb3c>
 8013316:	461a      	mov	r2, r3
 8013318:	4601      	mov	r1, r0
 801331a:	4658      	mov	r0, fp
 801331c:	f000 fcee 	bl	8013cfc <__pow5mult>
 8013320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013322:	2b01      	cmp	r3, #1
 8013324:	4604      	mov	r4, r0
 8013326:	f300 8095 	bgt.w	8013454 <_dtoa_r+0x8dc>
 801332a:	9b02      	ldr	r3, [sp, #8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	f040 8087 	bne.w	8013440 <_dtoa_r+0x8c8>
 8013332:	9b03      	ldr	r3, [sp, #12]
 8013334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013338:	2b00      	cmp	r3, #0
 801333a:	f040 8089 	bne.w	8013450 <_dtoa_r+0x8d8>
 801333e:	9b03      	ldr	r3, [sp, #12]
 8013340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013344:	0d1b      	lsrs	r3, r3, #20
 8013346:	051b      	lsls	r3, r3, #20
 8013348:	b12b      	cbz	r3, 8013356 <_dtoa_r+0x7de>
 801334a:	9b08      	ldr	r3, [sp, #32]
 801334c:	3301      	adds	r3, #1
 801334e:	9308      	str	r3, [sp, #32]
 8013350:	f108 0801 	add.w	r8, r8, #1
 8013354:	2301      	movs	r3, #1
 8013356:	930a      	str	r3, [sp, #40]	@ 0x28
 8013358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801335a:	2b00      	cmp	r3, #0
 801335c:	f000 81b0 	beq.w	80136c0 <_dtoa_r+0xb48>
 8013360:	6923      	ldr	r3, [r4, #16]
 8013362:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013366:	6918      	ldr	r0, [r3, #16]
 8013368:	f000 fbbc 	bl	8013ae4 <__hi0bits>
 801336c:	f1c0 0020 	rsb	r0, r0, #32
 8013370:	9b08      	ldr	r3, [sp, #32]
 8013372:	4418      	add	r0, r3
 8013374:	f010 001f 	ands.w	r0, r0, #31
 8013378:	d077      	beq.n	801346a <_dtoa_r+0x8f2>
 801337a:	f1c0 0320 	rsb	r3, r0, #32
 801337e:	2b04      	cmp	r3, #4
 8013380:	dd6b      	ble.n	801345a <_dtoa_r+0x8e2>
 8013382:	9b08      	ldr	r3, [sp, #32]
 8013384:	f1c0 001c 	rsb	r0, r0, #28
 8013388:	4403      	add	r3, r0
 801338a:	4480      	add	r8, r0
 801338c:	4406      	add	r6, r0
 801338e:	9308      	str	r3, [sp, #32]
 8013390:	f1b8 0f00 	cmp.w	r8, #0
 8013394:	dd05      	ble.n	80133a2 <_dtoa_r+0x82a>
 8013396:	4649      	mov	r1, r9
 8013398:	4642      	mov	r2, r8
 801339a:	4658      	mov	r0, fp
 801339c:	f000 fd08 	bl	8013db0 <__lshift>
 80133a0:	4681      	mov	r9, r0
 80133a2:	9b08      	ldr	r3, [sp, #32]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	dd05      	ble.n	80133b4 <_dtoa_r+0x83c>
 80133a8:	4621      	mov	r1, r4
 80133aa:	461a      	mov	r2, r3
 80133ac:	4658      	mov	r0, fp
 80133ae:	f000 fcff 	bl	8013db0 <__lshift>
 80133b2:	4604      	mov	r4, r0
 80133b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d059      	beq.n	801346e <_dtoa_r+0x8f6>
 80133ba:	4621      	mov	r1, r4
 80133bc:	4648      	mov	r0, r9
 80133be:	f000 fd63 	bl	8013e88 <__mcmp>
 80133c2:	2800      	cmp	r0, #0
 80133c4:	da53      	bge.n	801346e <_dtoa_r+0x8f6>
 80133c6:	1e7b      	subs	r3, r7, #1
 80133c8:	9304      	str	r3, [sp, #16]
 80133ca:	4649      	mov	r1, r9
 80133cc:	2300      	movs	r3, #0
 80133ce:	220a      	movs	r2, #10
 80133d0:	4658      	mov	r0, fp
 80133d2:	f000 faf7 	bl	80139c4 <__multadd>
 80133d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133d8:	4681      	mov	r9, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	f000 8172 	beq.w	80136c4 <_dtoa_r+0xb4c>
 80133e0:	2300      	movs	r3, #0
 80133e2:	4629      	mov	r1, r5
 80133e4:	220a      	movs	r2, #10
 80133e6:	4658      	mov	r0, fp
 80133e8:	f000 faec 	bl	80139c4 <__multadd>
 80133ec:	9b00      	ldr	r3, [sp, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	4605      	mov	r5, r0
 80133f2:	dc67      	bgt.n	80134c4 <_dtoa_r+0x94c>
 80133f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133f6:	2b02      	cmp	r3, #2
 80133f8:	dc41      	bgt.n	801347e <_dtoa_r+0x906>
 80133fa:	e063      	b.n	80134c4 <_dtoa_r+0x94c>
 80133fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80133fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013402:	e746      	b.n	8013292 <_dtoa_r+0x71a>
 8013404:	9b07      	ldr	r3, [sp, #28]
 8013406:	1e5c      	subs	r4, r3, #1
 8013408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801340a:	42a3      	cmp	r3, r4
 801340c:	bfbf      	itttt	lt
 801340e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013410:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013412:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013414:	1ae3      	sublt	r3, r4, r3
 8013416:	bfb4      	ite	lt
 8013418:	18d2      	addlt	r2, r2, r3
 801341a:	1b1c      	subge	r4, r3, r4
 801341c:	9b07      	ldr	r3, [sp, #28]
 801341e:	bfbc      	itt	lt
 8013420:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013422:	2400      	movlt	r4, #0
 8013424:	2b00      	cmp	r3, #0
 8013426:	bfb5      	itete	lt
 8013428:	eba8 0603 	sublt.w	r6, r8, r3
 801342c:	9b07      	ldrge	r3, [sp, #28]
 801342e:	2300      	movlt	r3, #0
 8013430:	4646      	movge	r6, r8
 8013432:	e730      	b.n	8013296 <_dtoa_r+0x71e>
 8013434:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013436:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013438:	4646      	mov	r6, r8
 801343a:	e735      	b.n	80132a8 <_dtoa_r+0x730>
 801343c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801343e:	e75c      	b.n	80132fa <_dtoa_r+0x782>
 8013440:	2300      	movs	r3, #0
 8013442:	e788      	b.n	8013356 <_dtoa_r+0x7de>
 8013444:	3fe00000 	.word	0x3fe00000
 8013448:	40240000 	.word	0x40240000
 801344c:	40140000 	.word	0x40140000
 8013450:	9b02      	ldr	r3, [sp, #8]
 8013452:	e780      	b.n	8013356 <_dtoa_r+0x7de>
 8013454:	2300      	movs	r3, #0
 8013456:	930a      	str	r3, [sp, #40]	@ 0x28
 8013458:	e782      	b.n	8013360 <_dtoa_r+0x7e8>
 801345a:	d099      	beq.n	8013390 <_dtoa_r+0x818>
 801345c:	9a08      	ldr	r2, [sp, #32]
 801345e:	331c      	adds	r3, #28
 8013460:	441a      	add	r2, r3
 8013462:	4498      	add	r8, r3
 8013464:	441e      	add	r6, r3
 8013466:	9208      	str	r2, [sp, #32]
 8013468:	e792      	b.n	8013390 <_dtoa_r+0x818>
 801346a:	4603      	mov	r3, r0
 801346c:	e7f6      	b.n	801345c <_dtoa_r+0x8e4>
 801346e:	9b07      	ldr	r3, [sp, #28]
 8013470:	9704      	str	r7, [sp, #16]
 8013472:	2b00      	cmp	r3, #0
 8013474:	dc20      	bgt.n	80134b8 <_dtoa_r+0x940>
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801347a:	2b02      	cmp	r3, #2
 801347c:	dd1e      	ble.n	80134bc <_dtoa_r+0x944>
 801347e:	9b00      	ldr	r3, [sp, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	f47f aec0 	bne.w	8013206 <_dtoa_r+0x68e>
 8013486:	4621      	mov	r1, r4
 8013488:	2205      	movs	r2, #5
 801348a:	4658      	mov	r0, fp
 801348c:	f000 fa9a 	bl	80139c4 <__multadd>
 8013490:	4601      	mov	r1, r0
 8013492:	4604      	mov	r4, r0
 8013494:	4648      	mov	r0, r9
 8013496:	f000 fcf7 	bl	8013e88 <__mcmp>
 801349a:	2800      	cmp	r0, #0
 801349c:	f77f aeb3 	ble.w	8013206 <_dtoa_r+0x68e>
 80134a0:	4656      	mov	r6, sl
 80134a2:	2331      	movs	r3, #49	@ 0x31
 80134a4:	f806 3b01 	strb.w	r3, [r6], #1
 80134a8:	9b04      	ldr	r3, [sp, #16]
 80134aa:	3301      	adds	r3, #1
 80134ac:	9304      	str	r3, [sp, #16]
 80134ae:	e6ae      	b.n	801320e <_dtoa_r+0x696>
 80134b0:	9c07      	ldr	r4, [sp, #28]
 80134b2:	9704      	str	r7, [sp, #16]
 80134b4:	4625      	mov	r5, r4
 80134b6:	e7f3      	b.n	80134a0 <_dtoa_r+0x928>
 80134b8:	9b07      	ldr	r3, [sp, #28]
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134be:	2b00      	cmp	r3, #0
 80134c0:	f000 8104 	beq.w	80136cc <_dtoa_r+0xb54>
 80134c4:	2e00      	cmp	r6, #0
 80134c6:	dd05      	ble.n	80134d4 <_dtoa_r+0x95c>
 80134c8:	4629      	mov	r1, r5
 80134ca:	4632      	mov	r2, r6
 80134cc:	4658      	mov	r0, fp
 80134ce:	f000 fc6f 	bl	8013db0 <__lshift>
 80134d2:	4605      	mov	r5, r0
 80134d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d05a      	beq.n	8013590 <_dtoa_r+0xa18>
 80134da:	6869      	ldr	r1, [r5, #4]
 80134dc:	4658      	mov	r0, fp
 80134de:	f000 fa0f 	bl	8013900 <_Balloc>
 80134e2:	4606      	mov	r6, r0
 80134e4:	b928      	cbnz	r0, 80134f2 <_dtoa_r+0x97a>
 80134e6:	4b84      	ldr	r3, [pc, #528]	@ (80136f8 <_dtoa_r+0xb80>)
 80134e8:	4602      	mov	r2, r0
 80134ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80134ee:	f7ff bb5a 	b.w	8012ba6 <_dtoa_r+0x2e>
 80134f2:	692a      	ldr	r2, [r5, #16]
 80134f4:	3202      	adds	r2, #2
 80134f6:	0092      	lsls	r2, r2, #2
 80134f8:	f105 010c 	add.w	r1, r5, #12
 80134fc:	300c      	adds	r0, #12
 80134fe:	f001 ff75 	bl	80153ec <memcpy>
 8013502:	2201      	movs	r2, #1
 8013504:	4631      	mov	r1, r6
 8013506:	4658      	mov	r0, fp
 8013508:	f000 fc52 	bl	8013db0 <__lshift>
 801350c:	f10a 0301 	add.w	r3, sl, #1
 8013510:	9307      	str	r3, [sp, #28]
 8013512:	9b00      	ldr	r3, [sp, #0]
 8013514:	4453      	add	r3, sl
 8013516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013518:	9b02      	ldr	r3, [sp, #8]
 801351a:	f003 0301 	and.w	r3, r3, #1
 801351e:	462f      	mov	r7, r5
 8013520:	930a      	str	r3, [sp, #40]	@ 0x28
 8013522:	4605      	mov	r5, r0
 8013524:	9b07      	ldr	r3, [sp, #28]
 8013526:	4621      	mov	r1, r4
 8013528:	3b01      	subs	r3, #1
 801352a:	4648      	mov	r0, r9
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	f7ff fa99 	bl	8012a64 <quorem>
 8013532:	4639      	mov	r1, r7
 8013534:	9002      	str	r0, [sp, #8]
 8013536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801353a:	4648      	mov	r0, r9
 801353c:	f000 fca4 	bl	8013e88 <__mcmp>
 8013540:	462a      	mov	r2, r5
 8013542:	9008      	str	r0, [sp, #32]
 8013544:	4621      	mov	r1, r4
 8013546:	4658      	mov	r0, fp
 8013548:	f000 fcba 	bl	8013ec0 <__mdiff>
 801354c:	68c2      	ldr	r2, [r0, #12]
 801354e:	4606      	mov	r6, r0
 8013550:	bb02      	cbnz	r2, 8013594 <_dtoa_r+0xa1c>
 8013552:	4601      	mov	r1, r0
 8013554:	4648      	mov	r0, r9
 8013556:	f000 fc97 	bl	8013e88 <__mcmp>
 801355a:	4602      	mov	r2, r0
 801355c:	4631      	mov	r1, r6
 801355e:	4658      	mov	r0, fp
 8013560:	920e      	str	r2, [sp, #56]	@ 0x38
 8013562:	f000 fa0d 	bl	8013980 <_Bfree>
 8013566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013568:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801356a:	9e07      	ldr	r6, [sp, #28]
 801356c:	ea43 0102 	orr.w	r1, r3, r2
 8013570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013572:	4319      	orrs	r1, r3
 8013574:	d110      	bne.n	8013598 <_dtoa_r+0xa20>
 8013576:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801357a:	d029      	beq.n	80135d0 <_dtoa_r+0xa58>
 801357c:	9b08      	ldr	r3, [sp, #32]
 801357e:	2b00      	cmp	r3, #0
 8013580:	dd02      	ble.n	8013588 <_dtoa_r+0xa10>
 8013582:	9b02      	ldr	r3, [sp, #8]
 8013584:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013588:	9b00      	ldr	r3, [sp, #0]
 801358a:	f883 8000 	strb.w	r8, [r3]
 801358e:	e63f      	b.n	8013210 <_dtoa_r+0x698>
 8013590:	4628      	mov	r0, r5
 8013592:	e7bb      	b.n	801350c <_dtoa_r+0x994>
 8013594:	2201      	movs	r2, #1
 8013596:	e7e1      	b.n	801355c <_dtoa_r+0x9e4>
 8013598:	9b08      	ldr	r3, [sp, #32]
 801359a:	2b00      	cmp	r3, #0
 801359c:	db04      	blt.n	80135a8 <_dtoa_r+0xa30>
 801359e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80135a0:	430b      	orrs	r3, r1
 80135a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80135a4:	430b      	orrs	r3, r1
 80135a6:	d120      	bne.n	80135ea <_dtoa_r+0xa72>
 80135a8:	2a00      	cmp	r2, #0
 80135aa:	dded      	ble.n	8013588 <_dtoa_r+0xa10>
 80135ac:	4649      	mov	r1, r9
 80135ae:	2201      	movs	r2, #1
 80135b0:	4658      	mov	r0, fp
 80135b2:	f000 fbfd 	bl	8013db0 <__lshift>
 80135b6:	4621      	mov	r1, r4
 80135b8:	4681      	mov	r9, r0
 80135ba:	f000 fc65 	bl	8013e88 <__mcmp>
 80135be:	2800      	cmp	r0, #0
 80135c0:	dc03      	bgt.n	80135ca <_dtoa_r+0xa52>
 80135c2:	d1e1      	bne.n	8013588 <_dtoa_r+0xa10>
 80135c4:	f018 0f01 	tst.w	r8, #1
 80135c8:	d0de      	beq.n	8013588 <_dtoa_r+0xa10>
 80135ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80135ce:	d1d8      	bne.n	8013582 <_dtoa_r+0xa0a>
 80135d0:	9a00      	ldr	r2, [sp, #0]
 80135d2:	2339      	movs	r3, #57	@ 0x39
 80135d4:	7013      	strb	r3, [r2, #0]
 80135d6:	4633      	mov	r3, r6
 80135d8:	461e      	mov	r6, r3
 80135da:	3b01      	subs	r3, #1
 80135dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80135e0:	2a39      	cmp	r2, #57	@ 0x39
 80135e2:	d052      	beq.n	801368a <_dtoa_r+0xb12>
 80135e4:	3201      	adds	r2, #1
 80135e6:	701a      	strb	r2, [r3, #0]
 80135e8:	e612      	b.n	8013210 <_dtoa_r+0x698>
 80135ea:	2a00      	cmp	r2, #0
 80135ec:	dd07      	ble.n	80135fe <_dtoa_r+0xa86>
 80135ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80135f2:	d0ed      	beq.n	80135d0 <_dtoa_r+0xa58>
 80135f4:	9a00      	ldr	r2, [sp, #0]
 80135f6:	f108 0301 	add.w	r3, r8, #1
 80135fa:	7013      	strb	r3, [r2, #0]
 80135fc:	e608      	b.n	8013210 <_dtoa_r+0x698>
 80135fe:	9b07      	ldr	r3, [sp, #28]
 8013600:	9a07      	ldr	r2, [sp, #28]
 8013602:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013608:	4293      	cmp	r3, r2
 801360a:	d028      	beq.n	801365e <_dtoa_r+0xae6>
 801360c:	4649      	mov	r1, r9
 801360e:	2300      	movs	r3, #0
 8013610:	220a      	movs	r2, #10
 8013612:	4658      	mov	r0, fp
 8013614:	f000 f9d6 	bl	80139c4 <__multadd>
 8013618:	42af      	cmp	r7, r5
 801361a:	4681      	mov	r9, r0
 801361c:	f04f 0300 	mov.w	r3, #0
 8013620:	f04f 020a 	mov.w	r2, #10
 8013624:	4639      	mov	r1, r7
 8013626:	4658      	mov	r0, fp
 8013628:	d107      	bne.n	801363a <_dtoa_r+0xac2>
 801362a:	f000 f9cb 	bl	80139c4 <__multadd>
 801362e:	4607      	mov	r7, r0
 8013630:	4605      	mov	r5, r0
 8013632:	9b07      	ldr	r3, [sp, #28]
 8013634:	3301      	adds	r3, #1
 8013636:	9307      	str	r3, [sp, #28]
 8013638:	e774      	b.n	8013524 <_dtoa_r+0x9ac>
 801363a:	f000 f9c3 	bl	80139c4 <__multadd>
 801363e:	4629      	mov	r1, r5
 8013640:	4607      	mov	r7, r0
 8013642:	2300      	movs	r3, #0
 8013644:	220a      	movs	r2, #10
 8013646:	4658      	mov	r0, fp
 8013648:	f000 f9bc 	bl	80139c4 <__multadd>
 801364c:	4605      	mov	r5, r0
 801364e:	e7f0      	b.n	8013632 <_dtoa_r+0xaba>
 8013650:	9b00      	ldr	r3, [sp, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	bfcc      	ite	gt
 8013656:	461e      	movgt	r6, r3
 8013658:	2601      	movle	r6, #1
 801365a:	4456      	add	r6, sl
 801365c:	2700      	movs	r7, #0
 801365e:	4649      	mov	r1, r9
 8013660:	2201      	movs	r2, #1
 8013662:	4658      	mov	r0, fp
 8013664:	f000 fba4 	bl	8013db0 <__lshift>
 8013668:	4621      	mov	r1, r4
 801366a:	4681      	mov	r9, r0
 801366c:	f000 fc0c 	bl	8013e88 <__mcmp>
 8013670:	2800      	cmp	r0, #0
 8013672:	dcb0      	bgt.n	80135d6 <_dtoa_r+0xa5e>
 8013674:	d102      	bne.n	801367c <_dtoa_r+0xb04>
 8013676:	f018 0f01 	tst.w	r8, #1
 801367a:	d1ac      	bne.n	80135d6 <_dtoa_r+0xa5e>
 801367c:	4633      	mov	r3, r6
 801367e:	461e      	mov	r6, r3
 8013680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013684:	2a30      	cmp	r2, #48	@ 0x30
 8013686:	d0fa      	beq.n	801367e <_dtoa_r+0xb06>
 8013688:	e5c2      	b.n	8013210 <_dtoa_r+0x698>
 801368a:	459a      	cmp	sl, r3
 801368c:	d1a4      	bne.n	80135d8 <_dtoa_r+0xa60>
 801368e:	9b04      	ldr	r3, [sp, #16]
 8013690:	3301      	adds	r3, #1
 8013692:	9304      	str	r3, [sp, #16]
 8013694:	2331      	movs	r3, #49	@ 0x31
 8013696:	f88a 3000 	strb.w	r3, [sl]
 801369a:	e5b9      	b.n	8013210 <_dtoa_r+0x698>
 801369c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801369e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80136fc <_dtoa_r+0xb84>
 80136a2:	b11b      	cbz	r3, 80136ac <_dtoa_r+0xb34>
 80136a4:	f10a 0308 	add.w	r3, sl, #8
 80136a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	4650      	mov	r0, sl
 80136ae:	b019      	add	sp, #100	@ 0x64
 80136b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	f77f ae37 	ble.w	801332a <_dtoa_r+0x7b2>
 80136bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136be:	930a      	str	r3, [sp, #40]	@ 0x28
 80136c0:	2001      	movs	r0, #1
 80136c2:	e655      	b.n	8013370 <_dtoa_r+0x7f8>
 80136c4:	9b00      	ldr	r3, [sp, #0]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f77f aed6 	ble.w	8013478 <_dtoa_r+0x900>
 80136cc:	4656      	mov	r6, sl
 80136ce:	4621      	mov	r1, r4
 80136d0:	4648      	mov	r0, r9
 80136d2:	f7ff f9c7 	bl	8012a64 <quorem>
 80136d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80136da:	f806 8b01 	strb.w	r8, [r6], #1
 80136de:	9b00      	ldr	r3, [sp, #0]
 80136e0:	eba6 020a 	sub.w	r2, r6, sl
 80136e4:	4293      	cmp	r3, r2
 80136e6:	ddb3      	ble.n	8013650 <_dtoa_r+0xad8>
 80136e8:	4649      	mov	r1, r9
 80136ea:	2300      	movs	r3, #0
 80136ec:	220a      	movs	r2, #10
 80136ee:	4658      	mov	r0, fp
 80136f0:	f000 f968 	bl	80139c4 <__multadd>
 80136f4:	4681      	mov	r9, r0
 80136f6:	e7ea      	b.n	80136ce <_dtoa_r+0xb56>
 80136f8:	08017255 	.word	0x08017255
 80136fc:	080171d9 	.word	0x080171d9

08013700 <_free_r>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	4605      	mov	r5, r0
 8013704:	2900      	cmp	r1, #0
 8013706:	d041      	beq.n	801378c <_free_r+0x8c>
 8013708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801370c:	1f0c      	subs	r4, r1, #4
 801370e:	2b00      	cmp	r3, #0
 8013710:	bfb8      	it	lt
 8013712:	18e4      	addlt	r4, r4, r3
 8013714:	f000 f8e8 	bl	80138e8 <__malloc_lock>
 8013718:	4a1d      	ldr	r2, [pc, #116]	@ (8013790 <_free_r+0x90>)
 801371a:	6813      	ldr	r3, [r2, #0]
 801371c:	b933      	cbnz	r3, 801372c <_free_r+0x2c>
 801371e:	6063      	str	r3, [r4, #4]
 8013720:	6014      	str	r4, [r2, #0]
 8013722:	4628      	mov	r0, r5
 8013724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013728:	f000 b8e4 	b.w	80138f4 <__malloc_unlock>
 801372c:	42a3      	cmp	r3, r4
 801372e:	d908      	bls.n	8013742 <_free_r+0x42>
 8013730:	6820      	ldr	r0, [r4, #0]
 8013732:	1821      	adds	r1, r4, r0
 8013734:	428b      	cmp	r3, r1
 8013736:	bf01      	itttt	eq
 8013738:	6819      	ldreq	r1, [r3, #0]
 801373a:	685b      	ldreq	r3, [r3, #4]
 801373c:	1809      	addeq	r1, r1, r0
 801373e:	6021      	streq	r1, [r4, #0]
 8013740:	e7ed      	b.n	801371e <_free_r+0x1e>
 8013742:	461a      	mov	r2, r3
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	b10b      	cbz	r3, 801374c <_free_r+0x4c>
 8013748:	42a3      	cmp	r3, r4
 801374a:	d9fa      	bls.n	8013742 <_free_r+0x42>
 801374c:	6811      	ldr	r1, [r2, #0]
 801374e:	1850      	adds	r0, r2, r1
 8013750:	42a0      	cmp	r0, r4
 8013752:	d10b      	bne.n	801376c <_free_r+0x6c>
 8013754:	6820      	ldr	r0, [r4, #0]
 8013756:	4401      	add	r1, r0
 8013758:	1850      	adds	r0, r2, r1
 801375a:	4283      	cmp	r3, r0
 801375c:	6011      	str	r1, [r2, #0]
 801375e:	d1e0      	bne.n	8013722 <_free_r+0x22>
 8013760:	6818      	ldr	r0, [r3, #0]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	6053      	str	r3, [r2, #4]
 8013766:	4408      	add	r0, r1
 8013768:	6010      	str	r0, [r2, #0]
 801376a:	e7da      	b.n	8013722 <_free_r+0x22>
 801376c:	d902      	bls.n	8013774 <_free_r+0x74>
 801376e:	230c      	movs	r3, #12
 8013770:	602b      	str	r3, [r5, #0]
 8013772:	e7d6      	b.n	8013722 <_free_r+0x22>
 8013774:	6820      	ldr	r0, [r4, #0]
 8013776:	1821      	adds	r1, r4, r0
 8013778:	428b      	cmp	r3, r1
 801377a:	bf04      	itt	eq
 801377c:	6819      	ldreq	r1, [r3, #0]
 801377e:	685b      	ldreq	r3, [r3, #4]
 8013780:	6063      	str	r3, [r4, #4]
 8013782:	bf04      	itt	eq
 8013784:	1809      	addeq	r1, r1, r0
 8013786:	6021      	streq	r1, [r4, #0]
 8013788:	6054      	str	r4, [r2, #4]
 801378a:	e7ca      	b.n	8013722 <_free_r+0x22>
 801378c:	bd38      	pop	{r3, r4, r5, pc}
 801378e:	bf00      	nop
 8013790:	20000400 	.word	0x20000400

08013794 <malloc>:
 8013794:	4b02      	ldr	r3, [pc, #8]	@ (80137a0 <malloc+0xc>)
 8013796:	4601      	mov	r1, r0
 8013798:	6818      	ldr	r0, [r3, #0]
 801379a:	f000 b825 	b.w	80137e8 <_malloc_r>
 801379e:	bf00      	nop
 80137a0:	20000020 	.word	0x20000020

080137a4 <sbrk_aligned>:
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	4e0f      	ldr	r6, [pc, #60]	@ (80137e4 <sbrk_aligned+0x40>)
 80137a8:	460c      	mov	r4, r1
 80137aa:	6831      	ldr	r1, [r6, #0]
 80137ac:	4605      	mov	r5, r0
 80137ae:	b911      	cbnz	r1, 80137b6 <sbrk_aligned+0x12>
 80137b0:	f001 fe0c 	bl	80153cc <_sbrk_r>
 80137b4:	6030      	str	r0, [r6, #0]
 80137b6:	4621      	mov	r1, r4
 80137b8:	4628      	mov	r0, r5
 80137ba:	f001 fe07 	bl	80153cc <_sbrk_r>
 80137be:	1c43      	adds	r3, r0, #1
 80137c0:	d103      	bne.n	80137ca <sbrk_aligned+0x26>
 80137c2:	f04f 34ff 	mov.w	r4, #4294967295
 80137c6:	4620      	mov	r0, r4
 80137c8:	bd70      	pop	{r4, r5, r6, pc}
 80137ca:	1cc4      	adds	r4, r0, #3
 80137cc:	f024 0403 	bic.w	r4, r4, #3
 80137d0:	42a0      	cmp	r0, r4
 80137d2:	d0f8      	beq.n	80137c6 <sbrk_aligned+0x22>
 80137d4:	1a21      	subs	r1, r4, r0
 80137d6:	4628      	mov	r0, r5
 80137d8:	f001 fdf8 	bl	80153cc <_sbrk_r>
 80137dc:	3001      	adds	r0, #1
 80137de:	d1f2      	bne.n	80137c6 <sbrk_aligned+0x22>
 80137e0:	e7ef      	b.n	80137c2 <sbrk_aligned+0x1e>
 80137e2:	bf00      	nop
 80137e4:	200003fc 	.word	0x200003fc

080137e8 <_malloc_r>:
 80137e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137ec:	1ccd      	adds	r5, r1, #3
 80137ee:	f025 0503 	bic.w	r5, r5, #3
 80137f2:	3508      	adds	r5, #8
 80137f4:	2d0c      	cmp	r5, #12
 80137f6:	bf38      	it	cc
 80137f8:	250c      	movcc	r5, #12
 80137fa:	2d00      	cmp	r5, #0
 80137fc:	4606      	mov	r6, r0
 80137fe:	db01      	blt.n	8013804 <_malloc_r+0x1c>
 8013800:	42a9      	cmp	r1, r5
 8013802:	d904      	bls.n	801380e <_malloc_r+0x26>
 8013804:	230c      	movs	r3, #12
 8013806:	6033      	str	r3, [r6, #0]
 8013808:	2000      	movs	r0, #0
 801380a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801380e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80138e4 <_malloc_r+0xfc>
 8013812:	f000 f869 	bl	80138e8 <__malloc_lock>
 8013816:	f8d8 3000 	ldr.w	r3, [r8]
 801381a:	461c      	mov	r4, r3
 801381c:	bb44      	cbnz	r4, 8013870 <_malloc_r+0x88>
 801381e:	4629      	mov	r1, r5
 8013820:	4630      	mov	r0, r6
 8013822:	f7ff ffbf 	bl	80137a4 <sbrk_aligned>
 8013826:	1c43      	adds	r3, r0, #1
 8013828:	4604      	mov	r4, r0
 801382a:	d158      	bne.n	80138de <_malloc_r+0xf6>
 801382c:	f8d8 4000 	ldr.w	r4, [r8]
 8013830:	4627      	mov	r7, r4
 8013832:	2f00      	cmp	r7, #0
 8013834:	d143      	bne.n	80138be <_malloc_r+0xd6>
 8013836:	2c00      	cmp	r4, #0
 8013838:	d04b      	beq.n	80138d2 <_malloc_r+0xea>
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	4639      	mov	r1, r7
 801383e:	4630      	mov	r0, r6
 8013840:	eb04 0903 	add.w	r9, r4, r3
 8013844:	f001 fdc2 	bl	80153cc <_sbrk_r>
 8013848:	4581      	cmp	r9, r0
 801384a:	d142      	bne.n	80138d2 <_malloc_r+0xea>
 801384c:	6821      	ldr	r1, [r4, #0]
 801384e:	1a6d      	subs	r5, r5, r1
 8013850:	4629      	mov	r1, r5
 8013852:	4630      	mov	r0, r6
 8013854:	f7ff ffa6 	bl	80137a4 <sbrk_aligned>
 8013858:	3001      	adds	r0, #1
 801385a:	d03a      	beq.n	80138d2 <_malloc_r+0xea>
 801385c:	6823      	ldr	r3, [r4, #0]
 801385e:	442b      	add	r3, r5
 8013860:	6023      	str	r3, [r4, #0]
 8013862:	f8d8 3000 	ldr.w	r3, [r8]
 8013866:	685a      	ldr	r2, [r3, #4]
 8013868:	bb62      	cbnz	r2, 80138c4 <_malloc_r+0xdc>
 801386a:	f8c8 7000 	str.w	r7, [r8]
 801386e:	e00f      	b.n	8013890 <_malloc_r+0xa8>
 8013870:	6822      	ldr	r2, [r4, #0]
 8013872:	1b52      	subs	r2, r2, r5
 8013874:	d420      	bmi.n	80138b8 <_malloc_r+0xd0>
 8013876:	2a0b      	cmp	r2, #11
 8013878:	d917      	bls.n	80138aa <_malloc_r+0xc2>
 801387a:	1961      	adds	r1, r4, r5
 801387c:	42a3      	cmp	r3, r4
 801387e:	6025      	str	r5, [r4, #0]
 8013880:	bf18      	it	ne
 8013882:	6059      	strne	r1, [r3, #4]
 8013884:	6863      	ldr	r3, [r4, #4]
 8013886:	bf08      	it	eq
 8013888:	f8c8 1000 	streq.w	r1, [r8]
 801388c:	5162      	str	r2, [r4, r5]
 801388e:	604b      	str	r3, [r1, #4]
 8013890:	4630      	mov	r0, r6
 8013892:	f000 f82f 	bl	80138f4 <__malloc_unlock>
 8013896:	f104 000b 	add.w	r0, r4, #11
 801389a:	1d23      	adds	r3, r4, #4
 801389c:	f020 0007 	bic.w	r0, r0, #7
 80138a0:	1ac2      	subs	r2, r0, r3
 80138a2:	bf1c      	itt	ne
 80138a4:	1a1b      	subne	r3, r3, r0
 80138a6:	50a3      	strne	r3, [r4, r2]
 80138a8:	e7af      	b.n	801380a <_malloc_r+0x22>
 80138aa:	6862      	ldr	r2, [r4, #4]
 80138ac:	42a3      	cmp	r3, r4
 80138ae:	bf0c      	ite	eq
 80138b0:	f8c8 2000 	streq.w	r2, [r8]
 80138b4:	605a      	strne	r2, [r3, #4]
 80138b6:	e7eb      	b.n	8013890 <_malloc_r+0xa8>
 80138b8:	4623      	mov	r3, r4
 80138ba:	6864      	ldr	r4, [r4, #4]
 80138bc:	e7ae      	b.n	801381c <_malloc_r+0x34>
 80138be:	463c      	mov	r4, r7
 80138c0:	687f      	ldr	r7, [r7, #4]
 80138c2:	e7b6      	b.n	8013832 <_malloc_r+0x4a>
 80138c4:	461a      	mov	r2, r3
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	42a3      	cmp	r3, r4
 80138ca:	d1fb      	bne.n	80138c4 <_malloc_r+0xdc>
 80138cc:	2300      	movs	r3, #0
 80138ce:	6053      	str	r3, [r2, #4]
 80138d0:	e7de      	b.n	8013890 <_malloc_r+0xa8>
 80138d2:	230c      	movs	r3, #12
 80138d4:	6033      	str	r3, [r6, #0]
 80138d6:	4630      	mov	r0, r6
 80138d8:	f000 f80c 	bl	80138f4 <__malloc_unlock>
 80138dc:	e794      	b.n	8013808 <_malloc_r+0x20>
 80138de:	6005      	str	r5, [r0, #0]
 80138e0:	e7d6      	b.n	8013890 <_malloc_r+0xa8>
 80138e2:	bf00      	nop
 80138e4:	20000400 	.word	0x20000400

080138e8 <__malloc_lock>:
 80138e8:	4801      	ldr	r0, [pc, #4]	@ (80138f0 <__malloc_lock+0x8>)
 80138ea:	f7ff b8b2 	b.w	8012a52 <__retarget_lock_acquire_recursive>
 80138ee:	bf00      	nop
 80138f0:	200003f8 	.word	0x200003f8

080138f4 <__malloc_unlock>:
 80138f4:	4801      	ldr	r0, [pc, #4]	@ (80138fc <__malloc_unlock+0x8>)
 80138f6:	f7ff b8ad 	b.w	8012a54 <__retarget_lock_release_recursive>
 80138fa:	bf00      	nop
 80138fc:	200003f8 	.word	0x200003f8

08013900 <_Balloc>:
 8013900:	b570      	push	{r4, r5, r6, lr}
 8013902:	69c6      	ldr	r6, [r0, #28]
 8013904:	4604      	mov	r4, r0
 8013906:	460d      	mov	r5, r1
 8013908:	b976      	cbnz	r6, 8013928 <_Balloc+0x28>
 801390a:	2010      	movs	r0, #16
 801390c:	f7ff ff42 	bl	8013794 <malloc>
 8013910:	4602      	mov	r2, r0
 8013912:	61e0      	str	r0, [r4, #28]
 8013914:	b920      	cbnz	r0, 8013920 <_Balloc+0x20>
 8013916:	4b18      	ldr	r3, [pc, #96]	@ (8013978 <_Balloc+0x78>)
 8013918:	4818      	ldr	r0, [pc, #96]	@ (801397c <_Balloc+0x7c>)
 801391a:	216b      	movs	r1, #107	@ 0x6b
 801391c:	f001 fd7c 	bl	8015418 <__assert_func>
 8013920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013924:	6006      	str	r6, [r0, #0]
 8013926:	60c6      	str	r6, [r0, #12]
 8013928:	69e6      	ldr	r6, [r4, #28]
 801392a:	68f3      	ldr	r3, [r6, #12]
 801392c:	b183      	cbz	r3, 8013950 <_Balloc+0x50>
 801392e:	69e3      	ldr	r3, [r4, #28]
 8013930:	68db      	ldr	r3, [r3, #12]
 8013932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013936:	b9b8      	cbnz	r0, 8013968 <_Balloc+0x68>
 8013938:	2101      	movs	r1, #1
 801393a:	fa01 f605 	lsl.w	r6, r1, r5
 801393e:	1d72      	adds	r2, r6, #5
 8013940:	0092      	lsls	r2, r2, #2
 8013942:	4620      	mov	r0, r4
 8013944:	f001 fd86 	bl	8015454 <_calloc_r>
 8013948:	b160      	cbz	r0, 8013964 <_Balloc+0x64>
 801394a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801394e:	e00e      	b.n	801396e <_Balloc+0x6e>
 8013950:	2221      	movs	r2, #33	@ 0x21
 8013952:	2104      	movs	r1, #4
 8013954:	4620      	mov	r0, r4
 8013956:	f001 fd7d 	bl	8015454 <_calloc_r>
 801395a:	69e3      	ldr	r3, [r4, #28]
 801395c:	60f0      	str	r0, [r6, #12]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1e4      	bne.n	801392e <_Balloc+0x2e>
 8013964:	2000      	movs	r0, #0
 8013966:	bd70      	pop	{r4, r5, r6, pc}
 8013968:	6802      	ldr	r2, [r0, #0]
 801396a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801396e:	2300      	movs	r3, #0
 8013970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013974:	e7f7      	b.n	8013966 <_Balloc+0x66>
 8013976:	bf00      	nop
 8013978:	080171e6 	.word	0x080171e6
 801397c:	08017266 	.word	0x08017266

08013980 <_Bfree>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	69c6      	ldr	r6, [r0, #28]
 8013984:	4605      	mov	r5, r0
 8013986:	460c      	mov	r4, r1
 8013988:	b976      	cbnz	r6, 80139a8 <_Bfree+0x28>
 801398a:	2010      	movs	r0, #16
 801398c:	f7ff ff02 	bl	8013794 <malloc>
 8013990:	4602      	mov	r2, r0
 8013992:	61e8      	str	r0, [r5, #28]
 8013994:	b920      	cbnz	r0, 80139a0 <_Bfree+0x20>
 8013996:	4b09      	ldr	r3, [pc, #36]	@ (80139bc <_Bfree+0x3c>)
 8013998:	4809      	ldr	r0, [pc, #36]	@ (80139c0 <_Bfree+0x40>)
 801399a:	218f      	movs	r1, #143	@ 0x8f
 801399c:	f001 fd3c 	bl	8015418 <__assert_func>
 80139a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139a4:	6006      	str	r6, [r0, #0]
 80139a6:	60c6      	str	r6, [r0, #12]
 80139a8:	b13c      	cbz	r4, 80139ba <_Bfree+0x3a>
 80139aa:	69eb      	ldr	r3, [r5, #28]
 80139ac:	6862      	ldr	r2, [r4, #4]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139b4:	6021      	str	r1, [r4, #0]
 80139b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80139ba:	bd70      	pop	{r4, r5, r6, pc}
 80139bc:	080171e6 	.word	0x080171e6
 80139c0:	08017266 	.word	0x08017266

080139c4 <__multadd>:
 80139c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c8:	690d      	ldr	r5, [r1, #16]
 80139ca:	4607      	mov	r7, r0
 80139cc:	460c      	mov	r4, r1
 80139ce:	461e      	mov	r6, r3
 80139d0:	f101 0c14 	add.w	ip, r1, #20
 80139d4:	2000      	movs	r0, #0
 80139d6:	f8dc 3000 	ldr.w	r3, [ip]
 80139da:	b299      	uxth	r1, r3
 80139dc:	fb02 6101 	mla	r1, r2, r1, r6
 80139e0:	0c1e      	lsrs	r6, r3, #16
 80139e2:	0c0b      	lsrs	r3, r1, #16
 80139e4:	fb02 3306 	mla	r3, r2, r6, r3
 80139e8:	b289      	uxth	r1, r1
 80139ea:	3001      	adds	r0, #1
 80139ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139f0:	4285      	cmp	r5, r0
 80139f2:	f84c 1b04 	str.w	r1, [ip], #4
 80139f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139fa:	dcec      	bgt.n	80139d6 <__multadd+0x12>
 80139fc:	b30e      	cbz	r6, 8013a42 <__multadd+0x7e>
 80139fe:	68a3      	ldr	r3, [r4, #8]
 8013a00:	42ab      	cmp	r3, r5
 8013a02:	dc19      	bgt.n	8013a38 <__multadd+0x74>
 8013a04:	6861      	ldr	r1, [r4, #4]
 8013a06:	4638      	mov	r0, r7
 8013a08:	3101      	adds	r1, #1
 8013a0a:	f7ff ff79 	bl	8013900 <_Balloc>
 8013a0e:	4680      	mov	r8, r0
 8013a10:	b928      	cbnz	r0, 8013a1e <__multadd+0x5a>
 8013a12:	4602      	mov	r2, r0
 8013a14:	4b0c      	ldr	r3, [pc, #48]	@ (8013a48 <__multadd+0x84>)
 8013a16:	480d      	ldr	r0, [pc, #52]	@ (8013a4c <__multadd+0x88>)
 8013a18:	21ba      	movs	r1, #186	@ 0xba
 8013a1a:	f001 fcfd 	bl	8015418 <__assert_func>
 8013a1e:	6922      	ldr	r2, [r4, #16]
 8013a20:	3202      	adds	r2, #2
 8013a22:	f104 010c 	add.w	r1, r4, #12
 8013a26:	0092      	lsls	r2, r2, #2
 8013a28:	300c      	adds	r0, #12
 8013a2a:	f001 fcdf 	bl	80153ec <memcpy>
 8013a2e:	4621      	mov	r1, r4
 8013a30:	4638      	mov	r0, r7
 8013a32:	f7ff ffa5 	bl	8013980 <_Bfree>
 8013a36:	4644      	mov	r4, r8
 8013a38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a3c:	3501      	adds	r5, #1
 8013a3e:	615e      	str	r6, [r3, #20]
 8013a40:	6125      	str	r5, [r4, #16]
 8013a42:	4620      	mov	r0, r4
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a48:	08017255 	.word	0x08017255
 8013a4c:	08017266 	.word	0x08017266

08013a50 <__s2b>:
 8013a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a54:	460c      	mov	r4, r1
 8013a56:	4615      	mov	r5, r2
 8013a58:	461f      	mov	r7, r3
 8013a5a:	2209      	movs	r2, #9
 8013a5c:	3308      	adds	r3, #8
 8013a5e:	4606      	mov	r6, r0
 8013a60:	fb93 f3f2 	sdiv	r3, r3, r2
 8013a64:	2100      	movs	r1, #0
 8013a66:	2201      	movs	r2, #1
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	db09      	blt.n	8013a80 <__s2b+0x30>
 8013a6c:	4630      	mov	r0, r6
 8013a6e:	f7ff ff47 	bl	8013900 <_Balloc>
 8013a72:	b940      	cbnz	r0, 8013a86 <__s2b+0x36>
 8013a74:	4602      	mov	r2, r0
 8013a76:	4b19      	ldr	r3, [pc, #100]	@ (8013adc <__s2b+0x8c>)
 8013a78:	4819      	ldr	r0, [pc, #100]	@ (8013ae0 <__s2b+0x90>)
 8013a7a:	21d3      	movs	r1, #211	@ 0xd3
 8013a7c:	f001 fccc 	bl	8015418 <__assert_func>
 8013a80:	0052      	lsls	r2, r2, #1
 8013a82:	3101      	adds	r1, #1
 8013a84:	e7f0      	b.n	8013a68 <__s2b+0x18>
 8013a86:	9b08      	ldr	r3, [sp, #32]
 8013a88:	6143      	str	r3, [r0, #20]
 8013a8a:	2d09      	cmp	r5, #9
 8013a8c:	f04f 0301 	mov.w	r3, #1
 8013a90:	6103      	str	r3, [r0, #16]
 8013a92:	dd16      	ble.n	8013ac2 <__s2b+0x72>
 8013a94:	f104 0909 	add.w	r9, r4, #9
 8013a98:	46c8      	mov	r8, r9
 8013a9a:	442c      	add	r4, r5
 8013a9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013aa0:	4601      	mov	r1, r0
 8013aa2:	3b30      	subs	r3, #48	@ 0x30
 8013aa4:	220a      	movs	r2, #10
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	f7ff ff8c 	bl	80139c4 <__multadd>
 8013aac:	45a0      	cmp	r8, r4
 8013aae:	d1f5      	bne.n	8013a9c <__s2b+0x4c>
 8013ab0:	f1a5 0408 	sub.w	r4, r5, #8
 8013ab4:	444c      	add	r4, r9
 8013ab6:	1b2d      	subs	r5, r5, r4
 8013ab8:	1963      	adds	r3, r4, r5
 8013aba:	42bb      	cmp	r3, r7
 8013abc:	db04      	blt.n	8013ac8 <__s2b+0x78>
 8013abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ac2:	340a      	adds	r4, #10
 8013ac4:	2509      	movs	r5, #9
 8013ac6:	e7f6      	b.n	8013ab6 <__s2b+0x66>
 8013ac8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013acc:	4601      	mov	r1, r0
 8013ace:	3b30      	subs	r3, #48	@ 0x30
 8013ad0:	220a      	movs	r2, #10
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f7ff ff76 	bl	80139c4 <__multadd>
 8013ad8:	e7ee      	b.n	8013ab8 <__s2b+0x68>
 8013ada:	bf00      	nop
 8013adc:	08017255 	.word	0x08017255
 8013ae0:	08017266 	.word	0x08017266

08013ae4 <__hi0bits>:
 8013ae4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013ae8:	4603      	mov	r3, r0
 8013aea:	bf36      	itet	cc
 8013aec:	0403      	lslcc	r3, r0, #16
 8013aee:	2000      	movcs	r0, #0
 8013af0:	2010      	movcc	r0, #16
 8013af2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013af6:	bf3c      	itt	cc
 8013af8:	021b      	lslcc	r3, r3, #8
 8013afa:	3008      	addcc	r0, #8
 8013afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b00:	bf3c      	itt	cc
 8013b02:	011b      	lslcc	r3, r3, #4
 8013b04:	3004      	addcc	r0, #4
 8013b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b0a:	bf3c      	itt	cc
 8013b0c:	009b      	lslcc	r3, r3, #2
 8013b0e:	3002      	addcc	r0, #2
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	db05      	blt.n	8013b20 <__hi0bits+0x3c>
 8013b14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013b18:	f100 0001 	add.w	r0, r0, #1
 8013b1c:	bf08      	it	eq
 8013b1e:	2020      	moveq	r0, #32
 8013b20:	4770      	bx	lr

08013b22 <__lo0bits>:
 8013b22:	6803      	ldr	r3, [r0, #0]
 8013b24:	4602      	mov	r2, r0
 8013b26:	f013 0007 	ands.w	r0, r3, #7
 8013b2a:	d00b      	beq.n	8013b44 <__lo0bits+0x22>
 8013b2c:	07d9      	lsls	r1, r3, #31
 8013b2e:	d421      	bmi.n	8013b74 <__lo0bits+0x52>
 8013b30:	0798      	lsls	r0, r3, #30
 8013b32:	bf49      	itett	mi
 8013b34:	085b      	lsrmi	r3, r3, #1
 8013b36:	089b      	lsrpl	r3, r3, #2
 8013b38:	2001      	movmi	r0, #1
 8013b3a:	6013      	strmi	r3, [r2, #0]
 8013b3c:	bf5c      	itt	pl
 8013b3e:	6013      	strpl	r3, [r2, #0]
 8013b40:	2002      	movpl	r0, #2
 8013b42:	4770      	bx	lr
 8013b44:	b299      	uxth	r1, r3
 8013b46:	b909      	cbnz	r1, 8013b4c <__lo0bits+0x2a>
 8013b48:	0c1b      	lsrs	r3, r3, #16
 8013b4a:	2010      	movs	r0, #16
 8013b4c:	b2d9      	uxtb	r1, r3
 8013b4e:	b909      	cbnz	r1, 8013b54 <__lo0bits+0x32>
 8013b50:	3008      	adds	r0, #8
 8013b52:	0a1b      	lsrs	r3, r3, #8
 8013b54:	0719      	lsls	r1, r3, #28
 8013b56:	bf04      	itt	eq
 8013b58:	091b      	lsreq	r3, r3, #4
 8013b5a:	3004      	addeq	r0, #4
 8013b5c:	0799      	lsls	r1, r3, #30
 8013b5e:	bf04      	itt	eq
 8013b60:	089b      	lsreq	r3, r3, #2
 8013b62:	3002      	addeq	r0, #2
 8013b64:	07d9      	lsls	r1, r3, #31
 8013b66:	d403      	bmi.n	8013b70 <__lo0bits+0x4e>
 8013b68:	085b      	lsrs	r3, r3, #1
 8013b6a:	f100 0001 	add.w	r0, r0, #1
 8013b6e:	d003      	beq.n	8013b78 <__lo0bits+0x56>
 8013b70:	6013      	str	r3, [r2, #0]
 8013b72:	4770      	bx	lr
 8013b74:	2000      	movs	r0, #0
 8013b76:	4770      	bx	lr
 8013b78:	2020      	movs	r0, #32
 8013b7a:	4770      	bx	lr

08013b7c <__i2b>:
 8013b7c:	b510      	push	{r4, lr}
 8013b7e:	460c      	mov	r4, r1
 8013b80:	2101      	movs	r1, #1
 8013b82:	f7ff febd 	bl	8013900 <_Balloc>
 8013b86:	4602      	mov	r2, r0
 8013b88:	b928      	cbnz	r0, 8013b96 <__i2b+0x1a>
 8013b8a:	4b05      	ldr	r3, [pc, #20]	@ (8013ba0 <__i2b+0x24>)
 8013b8c:	4805      	ldr	r0, [pc, #20]	@ (8013ba4 <__i2b+0x28>)
 8013b8e:	f240 1145 	movw	r1, #325	@ 0x145
 8013b92:	f001 fc41 	bl	8015418 <__assert_func>
 8013b96:	2301      	movs	r3, #1
 8013b98:	6144      	str	r4, [r0, #20]
 8013b9a:	6103      	str	r3, [r0, #16]
 8013b9c:	bd10      	pop	{r4, pc}
 8013b9e:	bf00      	nop
 8013ba0:	08017255 	.word	0x08017255
 8013ba4:	08017266 	.word	0x08017266

08013ba8 <__multiply>:
 8013ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bac:	4614      	mov	r4, r2
 8013bae:	690a      	ldr	r2, [r1, #16]
 8013bb0:	6923      	ldr	r3, [r4, #16]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	bfa8      	it	ge
 8013bb6:	4623      	movge	r3, r4
 8013bb8:	460f      	mov	r7, r1
 8013bba:	bfa4      	itt	ge
 8013bbc:	460c      	movge	r4, r1
 8013bbe:	461f      	movge	r7, r3
 8013bc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013bc4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013bc8:	68a3      	ldr	r3, [r4, #8]
 8013bca:	6861      	ldr	r1, [r4, #4]
 8013bcc:	eb0a 0609 	add.w	r6, sl, r9
 8013bd0:	42b3      	cmp	r3, r6
 8013bd2:	b085      	sub	sp, #20
 8013bd4:	bfb8      	it	lt
 8013bd6:	3101      	addlt	r1, #1
 8013bd8:	f7ff fe92 	bl	8013900 <_Balloc>
 8013bdc:	b930      	cbnz	r0, 8013bec <__multiply+0x44>
 8013bde:	4602      	mov	r2, r0
 8013be0:	4b44      	ldr	r3, [pc, #272]	@ (8013cf4 <__multiply+0x14c>)
 8013be2:	4845      	ldr	r0, [pc, #276]	@ (8013cf8 <__multiply+0x150>)
 8013be4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013be8:	f001 fc16 	bl	8015418 <__assert_func>
 8013bec:	f100 0514 	add.w	r5, r0, #20
 8013bf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013bf4:	462b      	mov	r3, r5
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	4543      	cmp	r3, r8
 8013bfa:	d321      	bcc.n	8013c40 <__multiply+0x98>
 8013bfc:	f107 0114 	add.w	r1, r7, #20
 8013c00:	f104 0214 	add.w	r2, r4, #20
 8013c04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013c08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013c0c:	9302      	str	r3, [sp, #8]
 8013c0e:	1b13      	subs	r3, r2, r4
 8013c10:	3b15      	subs	r3, #21
 8013c12:	f023 0303 	bic.w	r3, r3, #3
 8013c16:	3304      	adds	r3, #4
 8013c18:	f104 0715 	add.w	r7, r4, #21
 8013c1c:	42ba      	cmp	r2, r7
 8013c1e:	bf38      	it	cc
 8013c20:	2304      	movcc	r3, #4
 8013c22:	9301      	str	r3, [sp, #4]
 8013c24:	9b02      	ldr	r3, [sp, #8]
 8013c26:	9103      	str	r1, [sp, #12]
 8013c28:	428b      	cmp	r3, r1
 8013c2a:	d80c      	bhi.n	8013c46 <__multiply+0x9e>
 8013c2c:	2e00      	cmp	r6, #0
 8013c2e:	dd03      	ble.n	8013c38 <__multiply+0x90>
 8013c30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d05b      	beq.n	8013cf0 <__multiply+0x148>
 8013c38:	6106      	str	r6, [r0, #16]
 8013c3a:	b005      	add	sp, #20
 8013c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c40:	f843 2b04 	str.w	r2, [r3], #4
 8013c44:	e7d8      	b.n	8013bf8 <__multiply+0x50>
 8013c46:	f8b1 a000 	ldrh.w	sl, [r1]
 8013c4a:	f1ba 0f00 	cmp.w	sl, #0
 8013c4e:	d024      	beq.n	8013c9a <__multiply+0xf2>
 8013c50:	f104 0e14 	add.w	lr, r4, #20
 8013c54:	46a9      	mov	r9, r5
 8013c56:	f04f 0c00 	mov.w	ip, #0
 8013c5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8013c62:	fa1f fb87 	uxth.w	fp, r7
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	fb0a 330b 	mla	r3, sl, fp, r3
 8013c6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013c70:	f8d9 7000 	ldr.w	r7, [r9]
 8013c74:	4463      	add	r3, ip
 8013c76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013c7a:	fb0a c70b 	mla	r7, sl, fp, ip
 8013c7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013c88:	4572      	cmp	r2, lr
 8013c8a:	f849 3b04 	str.w	r3, [r9], #4
 8013c8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013c92:	d8e2      	bhi.n	8013c5a <__multiply+0xb2>
 8013c94:	9b01      	ldr	r3, [sp, #4]
 8013c96:	f845 c003 	str.w	ip, [r5, r3]
 8013c9a:	9b03      	ldr	r3, [sp, #12]
 8013c9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013ca0:	3104      	adds	r1, #4
 8013ca2:	f1b9 0f00 	cmp.w	r9, #0
 8013ca6:	d021      	beq.n	8013cec <__multiply+0x144>
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	f104 0c14 	add.w	ip, r4, #20
 8013cae:	46ae      	mov	lr, r5
 8013cb0:	f04f 0a00 	mov.w	sl, #0
 8013cb4:	f8bc b000 	ldrh.w	fp, [ip]
 8013cb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013cbc:	fb09 770b 	mla	r7, r9, fp, r7
 8013cc0:	4457      	add	r7, sl
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013cc8:	f84e 3b04 	str.w	r3, [lr], #4
 8013ccc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013cd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013cd4:	f8be 3000 	ldrh.w	r3, [lr]
 8013cd8:	fb09 330a 	mla	r3, r9, sl, r3
 8013cdc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013ce0:	4562      	cmp	r2, ip
 8013ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ce6:	d8e5      	bhi.n	8013cb4 <__multiply+0x10c>
 8013ce8:	9f01      	ldr	r7, [sp, #4]
 8013cea:	51eb      	str	r3, [r5, r7]
 8013cec:	3504      	adds	r5, #4
 8013cee:	e799      	b.n	8013c24 <__multiply+0x7c>
 8013cf0:	3e01      	subs	r6, #1
 8013cf2:	e79b      	b.n	8013c2c <__multiply+0x84>
 8013cf4:	08017255 	.word	0x08017255
 8013cf8:	08017266 	.word	0x08017266

08013cfc <__pow5mult>:
 8013cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d00:	4615      	mov	r5, r2
 8013d02:	f012 0203 	ands.w	r2, r2, #3
 8013d06:	4607      	mov	r7, r0
 8013d08:	460e      	mov	r6, r1
 8013d0a:	d007      	beq.n	8013d1c <__pow5mult+0x20>
 8013d0c:	4c25      	ldr	r4, [pc, #148]	@ (8013da4 <__pow5mult+0xa8>)
 8013d0e:	3a01      	subs	r2, #1
 8013d10:	2300      	movs	r3, #0
 8013d12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d16:	f7ff fe55 	bl	80139c4 <__multadd>
 8013d1a:	4606      	mov	r6, r0
 8013d1c:	10ad      	asrs	r5, r5, #2
 8013d1e:	d03d      	beq.n	8013d9c <__pow5mult+0xa0>
 8013d20:	69fc      	ldr	r4, [r7, #28]
 8013d22:	b97c      	cbnz	r4, 8013d44 <__pow5mult+0x48>
 8013d24:	2010      	movs	r0, #16
 8013d26:	f7ff fd35 	bl	8013794 <malloc>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	61f8      	str	r0, [r7, #28]
 8013d2e:	b928      	cbnz	r0, 8013d3c <__pow5mult+0x40>
 8013d30:	4b1d      	ldr	r3, [pc, #116]	@ (8013da8 <__pow5mult+0xac>)
 8013d32:	481e      	ldr	r0, [pc, #120]	@ (8013dac <__pow5mult+0xb0>)
 8013d34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013d38:	f001 fb6e 	bl	8015418 <__assert_func>
 8013d3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d40:	6004      	str	r4, [r0, #0]
 8013d42:	60c4      	str	r4, [r0, #12]
 8013d44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013d48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d4c:	b94c      	cbnz	r4, 8013d62 <__pow5mult+0x66>
 8013d4e:	f240 2171 	movw	r1, #625	@ 0x271
 8013d52:	4638      	mov	r0, r7
 8013d54:	f7ff ff12 	bl	8013b7c <__i2b>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d5e:	4604      	mov	r4, r0
 8013d60:	6003      	str	r3, [r0, #0]
 8013d62:	f04f 0900 	mov.w	r9, #0
 8013d66:	07eb      	lsls	r3, r5, #31
 8013d68:	d50a      	bpl.n	8013d80 <__pow5mult+0x84>
 8013d6a:	4631      	mov	r1, r6
 8013d6c:	4622      	mov	r2, r4
 8013d6e:	4638      	mov	r0, r7
 8013d70:	f7ff ff1a 	bl	8013ba8 <__multiply>
 8013d74:	4631      	mov	r1, r6
 8013d76:	4680      	mov	r8, r0
 8013d78:	4638      	mov	r0, r7
 8013d7a:	f7ff fe01 	bl	8013980 <_Bfree>
 8013d7e:	4646      	mov	r6, r8
 8013d80:	106d      	asrs	r5, r5, #1
 8013d82:	d00b      	beq.n	8013d9c <__pow5mult+0xa0>
 8013d84:	6820      	ldr	r0, [r4, #0]
 8013d86:	b938      	cbnz	r0, 8013d98 <__pow5mult+0x9c>
 8013d88:	4622      	mov	r2, r4
 8013d8a:	4621      	mov	r1, r4
 8013d8c:	4638      	mov	r0, r7
 8013d8e:	f7ff ff0b 	bl	8013ba8 <__multiply>
 8013d92:	6020      	str	r0, [r4, #0]
 8013d94:	f8c0 9000 	str.w	r9, [r0]
 8013d98:	4604      	mov	r4, r0
 8013d9a:	e7e4      	b.n	8013d66 <__pow5mult+0x6a>
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013da2:	bf00      	nop
 8013da4:	080172c0 	.word	0x080172c0
 8013da8:	080171e6 	.word	0x080171e6
 8013dac:	08017266 	.word	0x08017266

08013db0 <__lshift>:
 8013db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013db4:	460c      	mov	r4, r1
 8013db6:	6849      	ldr	r1, [r1, #4]
 8013db8:	6923      	ldr	r3, [r4, #16]
 8013dba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013dbe:	68a3      	ldr	r3, [r4, #8]
 8013dc0:	4607      	mov	r7, r0
 8013dc2:	4691      	mov	r9, r2
 8013dc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013dc8:	f108 0601 	add.w	r6, r8, #1
 8013dcc:	42b3      	cmp	r3, r6
 8013dce:	db0b      	blt.n	8013de8 <__lshift+0x38>
 8013dd0:	4638      	mov	r0, r7
 8013dd2:	f7ff fd95 	bl	8013900 <_Balloc>
 8013dd6:	4605      	mov	r5, r0
 8013dd8:	b948      	cbnz	r0, 8013dee <__lshift+0x3e>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	4b28      	ldr	r3, [pc, #160]	@ (8013e80 <__lshift+0xd0>)
 8013dde:	4829      	ldr	r0, [pc, #164]	@ (8013e84 <__lshift+0xd4>)
 8013de0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013de4:	f001 fb18 	bl	8015418 <__assert_func>
 8013de8:	3101      	adds	r1, #1
 8013dea:	005b      	lsls	r3, r3, #1
 8013dec:	e7ee      	b.n	8013dcc <__lshift+0x1c>
 8013dee:	2300      	movs	r3, #0
 8013df0:	f100 0114 	add.w	r1, r0, #20
 8013df4:	f100 0210 	add.w	r2, r0, #16
 8013df8:	4618      	mov	r0, r3
 8013dfa:	4553      	cmp	r3, sl
 8013dfc:	db33      	blt.n	8013e66 <__lshift+0xb6>
 8013dfe:	6920      	ldr	r0, [r4, #16]
 8013e00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e04:	f104 0314 	add.w	r3, r4, #20
 8013e08:	f019 091f 	ands.w	r9, r9, #31
 8013e0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013e14:	d02b      	beq.n	8013e6e <__lshift+0xbe>
 8013e16:	f1c9 0e20 	rsb	lr, r9, #32
 8013e1a:	468a      	mov	sl, r1
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	6818      	ldr	r0, [r3, #0]
 8013e20:	fa00 f009 	lsl.w	r0, r0, r9
 8013e24:	4310      	orrs	r0, r2
 8013e26:	f84a 0b04 	str.w	r0, [sl], #4
 8013e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e2e:	459c      	cmp	ip, r3
 8013e30:	fa22 f20e 	lsr.w	r2, r2, lr
 8013e34:	d8f3      	bhi.n	8013e1e <__lshift+0x6e>
 8013e36:	ebac 0304 	sub.w	r3, ip, r4
 8013e3a:	3b15      	subs	r3, #21
 8013e3c:	f023 0303 	bic.w	r3, r3, #3
 8013e40:	3304      	adds	r3, #4
 8013e42:	f104 0015 	add.w	r0, r4, #21
 8013e46:	4584      	cmp	ip, r0
 8013e48:	bf38      	it	cc
 8013e4a:	2304      	movcc	r3, #4
 8013e4c:	50ca      	str	r2, [r1, r3]
 8013e4e:	b10a      	cbz	r2, 8013e54 <__lshift+0xa4>
 8013e50:	f108 0602 	add.w	r6, r8, #2
 8013e54:	3e01      	subs	r6, #1
 8013e56:	4638      	mov	r0, r7
 8013e58:	612e      	str	r6, [r5, #16]
 8013e5a:	4621      	mov	r1, r4
 8013e5c:	f7ff fd90 	bl	8013980 <_Bfree>
 8013e60:	4628      	mov	r0, r5
 8013e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e66:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	e7c5      	b.n	8013dfa <__lshift+0x4a>
 8013e6e:	3904      	subs	r1, #4
 8013e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e74:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e78:	459c      	cmp	ip, r3
 8013e7a:	d8f9      	bhi.n	8013e70 <__lshift+0xc0>
 8013e7c:	e7ea      	b.n	8013e54 <__lshift+0xa4>
 8013e7e:	bf00      	nop
 8013e80:	08017255 	.word	0x08017255
 8013e84:	08017266 	.word	0x08017266

08013e88 <__mcmp>:
 8013e88:	690a      	ldr	r2, [r1, #16]
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	6900      	ldr	r0, [r0, #16]
 8013e8e:	1a80      	subs	r0, r0, r2
 8013e90:	b530      	push	{r4, r5, lr}
 8013e92:	d10e      	bne.n	8013eb2 <__mcmp+0x2a>
 8013e94:	3314      	adds	r3, #20
 8013e96:	3114      	adds	r1, #20
 8013e98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013e9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013ea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013ea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013ea8:	4295      	cmp	r5, r2
 8013eaa:	d003      	beq.n	8013eb4 <__mcmp+0x2c>
 8013eac:	d205      	bcs.n	8013eba <__mcmp+0x32>
 8013eae:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb2:	bd30      	pop	{r4, r5, pc}
 8013eb4:	42a3      	cmp	r3, r4
 8013eb6:	d3f3      	bcc.n	8013ea0 <__mcmp+0x18>
 8013eb8:	e7fb      	b.n	8013eb2 <__mcmp+0x2a>
 8013eba:	2001      	movs	r0, #1
 8013ebc:	e7f9      	b.n	8013eb2 <__mcmp+0x2a>
	...

08013ec0 <__mdiff>:
 8013ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec4:	4689      	mov	r9, r1
 8013ec6:	4606      	mov	r6, r0
 8013ec8:	4611      	mov	r1, r2
 8013eca:	4648      	mov	r0, r9
 8013ecc:	4614      	mov	r4, r2
 8013ece:	f7ff ffdb 	bl	8013e88 <__mcmp>
 8013ed2:	1e05      	subs	r5, r0, #0
 8013ed4:	d112      	bne.n	8013efc <__mdiff+0x3c>
 8013ed6:	4629      	mov	r1, r5
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f7ff fd11 	bl	8013900 <_Balloc>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	b928      	cbnz	r0, 8013eee <__mdiff+0x2e>
 8013ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8013fe0 <__mdiff+0x120>)
 8013ee4:	f240 2137 	movw	r1, #567	@ 0x237
 8013ee8:	483e      	ldr	r0, [pc, #248]	@ (8013fe4 <__mdiff+0x124>)
 8013eea:	f001 fa95 	bl	8015418 <__assert_func>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ef4:	4610      	mov	r0, r2
 8013ef6:	b003      	add	sp, #12
 8013ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013efc:	bfbc      	itt	lt
 8013efe:	464b      	movlt	r3, r9
 8013f00:	46a1      	movlt	r9, r4
 8013f02:	4630      	mov	r0, r6
 8013f04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013f08:	bfba      	itte	lt
 8013f0a:	461c      	movlt	r4, r3
 8013f0c:	2501      	movlt	r5, #1
 8013f0e:	2500      	movge	r5, #0
 8013f10:	f7ff fcf6 	bl	8013900 <_Balloc>
 8013f14:	4602      	mov	r2, r0
 8013f16:	b918      	cbnz	r0, 8013f20 <__mdiff+0x60>
 8013f18:	4b31      	ldr	r3, [pc, #196]	@ (8013fe0 <__mdiff+0x120>)
 8013f1a:	f240 2145 	movw	r1, #581	@ 0x245
 8013f1e:	e7e3      	b.n	8013ee8 <__mdiff+0x28>
 8013f20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013f24:	6926      	ldr	r6, [r4, #16]
 8013f26:	60c5      	str	r5, [r0, #12]
 8013f28:	f109 0310 	add.w	r3, r9, #16
 8013f2c:	f109 0514 	add.w	r5, r9, #20
 8013f30:	f104 0e14 	add.w	lr, r4, #20
 8013f34:	f100 0b14 	add.w	fp, r0, #20
 8013f38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013f3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013f40:	9301      	str	r3, [sp, #4]
 8013f42:	46d9      	mov	r9, fp
 8013f44:	f04f 0c00 	mov.w	ip, #0
 8013f48:	9b01      	ldr	r3, [sp, #4]
 8013f4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013f4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013f52:	9301      	str	r3, [sp, #4]
 8013f54:	fa1f f38a 	uxth.w	r3, sl
 8013f58:	4619      	mov	r1, r3
 8013f5a:	b283      	uxth	r3, r0
 8013f5c:	1acb      	subs	r3, r1, r3
 8013f5e:	0c00      	lsrs	r0, r0, #16
 8013f60:	4463      	add	r3, ip
 8013f62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013f66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013f70:	4576      	cmp	r6, lr
 8013f72:	f849 3b04 	str.w	r3, [r9], #4
 8013f76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013f7a:	d8e5      	bhi.n	8013f48 <__mdiff+0x88>
 8013f7c:	1b33      	subs	r3, r6, r4
 8013f7e:	3b15      	subs	r3, #21
 8013f80:	f023 0303 	bic.w	r3, r3, #3
 8013f84:	3415      	adds	r4, #21
 8013f86:	3304      	adds	r3, #4
 8013f88:	42a6      	cmp	r6, r4
 8013f8a:	bf38      	it	cc
 8013f8c:	2304      	movcc	r3, #4
 8013f8e:	441d      	add	r5, r3
 8013f90:	445b      	add	r3, fp
 8013f92:	461e      	mov	r6, r3
 8013f94:	462c      	mov	r4, r5
 8013f96:	4544      	cmp	r4, r8
 8013f98:	d30e      	bcc.n	8013fb8 <__mdiff+0xf8>
 8013f9a:	f108 0103 	add.w	r1, r8, #3
 8013f9e:	1b49      	subs	r1, r1, r5
 8013fa0:	f021 0103 	bic.w	r1, r1, #3
 8013fa4:	3d03      	subs	r5, #3
 8013fa6:	45a8      	cmp	r8, r5
 8013fa8:	bf38      	it	cc
 8013faa:	2100      	movcc	r1, #0
 8013fac:	440b      	add	r3, r1
 8013fae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013fb2:	b191      	cbz	r1, 8013fda <__mdiff+0x11a>
 8013fb4:	6117      	str	r7, [r2, #16]
 8013fb6:	e79d      	b.n	8013ef4 <__mdiff+0x34>
 8013fb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8013fbc:	46e6      	mov	lr, ip
 8013fbe:	0c08      	lsrs	r0, r1, #16
 8013fc0:	fa1c fc81 	uxtah	ip, ip, r1
 8013fc4:	4471      	add	r1, lr
 8013fc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013fca:	b289      	uxth	r1, r1
 8013fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013fd0:	f846 1b04 	str.w	r1, [r6], #4
 8013fd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013fd8:	e7dd      	b.n	8013f96 <__mdiff+0xd6>
 8013fda:	3f01      	subs	r7, #1
 8013fdc:	e7e7      	b.n	8013fae <__mdiff+0xee>
 8013fde:	bf00      	nop
 8013fe0:	08017255 	.word	0x08017255
 8013fe4:	08017266 	.word	0x08017266

08013fe8 <__ulp>:
 8013fe8:	b082      	sub	sp, #8
 8013fea:	ed8d 0b00 	vstr	d0, [sp]
 8013fee:	9a01      	ldr	r2, [sp, #4]
 8013ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8014030 <__ulp+0x48>)
 8013ff2:	4013      	ands	r3, r2
 8013ff4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	dc08      	bgt.n	801400e <__ulp+0x26>
 8013ffc:	425b      	negs	r3, r3
 8013ffe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014002:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014006:	da04      	bge.n	8014012 <__ulp+0x2a>
 8014008:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801400c:	4113      	asrs	r3, r2
 801400e:	2200      	movs	r2, #0
 8014010:	e008      	b.n	8014024 <__ulp+0x3c>
 8014012:	f1a2 0314 	sub.w	r3, r2, #20
 8014016:	2b1e      	cmp	r3, #30
 8014018:	bfda      	itte	le
 801401a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801401e:	40da      	lsrle	r2, r3
 8014020:	2201      	movgt	r2, #1
 8014022:	2300      	movs	r3, #0
 8014024:	4619      	mov	r1, r3
 8014026:	4610      	mov	r0, r2
 8014028:	ec41 0b10 	vmov	d0, r0, r1
 801402c:	b002      	add	sp, #8
 801402e:	4770      	bx	lr
 8014030:	7ff00000 	.word	0x7ff00000

08014034 <__b2d>:
 8014034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014038:	6906      	ldr	r6, [r0, #16]
 801403a:	f100 0814 	add.w	r8, r0, #20
 801403e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014042:	1f37      	subs	r7, r6, #4
 8014044:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014048:	4610      	mov	r0, r2
 801404a:	f7ff fd4b 	bl	8013ae4 <__hi0bits>
 801404e:	f1c0 0320 	rsb	r3, r0, #32
 8014052:	280a      	cmp	r0, #10
 8014054:	600b      	str	r3, [r1, #0]
 8014056:	491b      	ldr	r1, [pc, #108]	@ (80140c4 <__b2d+0x90>)
 8014058:	dc15      	bgt.n	8014086 <__b2d+0x52>
 801405a:	f1c0 0c0b 	rsb	ip, r0, #11
 801405e:	fa22 f30c 	lsr.w	r3, r2, ip
 8014062:	45b8      	cmp	r8, r7
 8014064:	ea43 0501 	orr.w	r5, r3, r1
 8014068:	bf34      	ite	cc
 801406a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801406e:	2300      	movcs	r3, #0
 8014070:	3015      	adds	r0, #21
 8014072:	fa02 f000 	lsl.w	r0, r2, r0
 8014076:	fa23 f30c 	lsr.w	r3, r3, ip
 801407a:	4303      	orrs	r3, r0
 801407c:	461c      	mov	r4, r3
 801407e:	ec45 4b10 	vmov	d0, r4, r5
 8014082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014086:	45b8      	cmp	r8, r7
 8014088:	bf3a      	itte	cc
 801408a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801408e:	f1a6 0708 	subcc.w	r7, r6, #8
 8014092:	2300      	movcs	r3, #0
 8014094:	380b      	subs	r0, #11
 8014096:	d012      	beq.n	80140be <__b2d+0x8a>
 8014098:	f1c0 0120 	rsb	r1, r0, #32
 801409c:	fa23 f401 	lsr.w	r4, r3, r1
 80140a0:	4082      	lsls	r2, r0
 80140a2:	4322      	orrs	r2, r4
 80140a4:	4547      	cmp	r7, r8
 80140a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80140aa:	bf8c      	ite	hi
 80140ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80140b0:	2200      	movls	r2, #0
 80140b2:	4083      	lsls	r3, r0
 80140b4:	40ca      	lsrs	r2, r1
 80140b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80140ba:	4313      	orrs	r3, r2
 80140bc:	e7de      	b.n	801407c <__b2d+0x48>
 80140be:	ea42 0501 	orr.w	r5, r2, r1
 80140c2:	e7db      	b.n	801407c <__b2d+0x48>
 80140c4:	3ff00000 	.word	0x3ff00000

080140c8 <__d2b>:
 80140c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80140cc:	460f      	mov	r7, r1
 80140ce:	2101      	movs	r1, #1
 80140d0:	ec59 8b10 	vmov	r8, r9, d0
 80140d4:	4616      	mov	r6, r2
 80140d6:	f7ff fc13 	bl	8013900 <_Balloc>
 80140da:	4604      	mov	r4, r0
 80140dc:	b930      	cbnz	r0, 80140ec <__d2b+0x24>
 80140de:	4602      	mov	r2, r0
 80140e0:	4b23      	ldr	r3, [pc, #140]	@ (8014170 <__d2b+0xa8>)
 80140e2:	4824      	ldr	r0, [pc, #144]	@ (8014174 <__d2b+0xac>)
 80140e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80140e8:	f001 f996 	bl	8015418 <__assert_func>
 80140ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80140f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140f4:	b10d      	cbz	r5, 80140fa <__d2b+0x32>
 80140f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80140fa:	9301      	str	r3, [sp, #4]
 80140fc:	f1b8 0300 	subs.w	r3, r8, #0
 8014100:	d023      	beq.n	801414a <__d2b+0x82>
 8014102:	4668      	mov	r0, sp
 8014104:	9300      	str	r3, [sp, #0]
 8014106:	f7ff fd0c 	bl	8013b22 <__lo0bits>
 801410a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801410e:	b1d0      	cbz	r0, 8014146 <__d2b+0x7e>
 8014110:	f1c0 0320 	rsb	r3, r0, #32
 8014114:	fa02 f303 	lsl.w	r3, r2, r3
 8014118:	430b      	orrs	r3, r1
 801411a:	40c2      	lsrs	r2, r0
 801411c:	6163      	str	r3, [r4, #20]
 801411e:	9201      	str	r2, [sp, #4]
 8014120:	9b01      	ldr	r3, [sp, #4]
 8014122:	61a3      	str	r3, [r4, #24]
 8014124:	2b00      	cmp	r3, #0
 8014126:	bf0c      	ite	eq
 8014128:	2201      	moveq	r2, #1
 801412a:	2202      	movne	r2, #2
 801412c:	6122      	str	r2, [r4, #16]
 801412e:	b1a5      	cbz	r5, 801415a <__d2b+0x92>
 8014130:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014134:	4405      	add	r5, r0
 8014136:	603d      	str	r5, [r7, #0]
 8014138:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801413c:	6030      	str	r0, [r6, #0]
 801413e:	4620      	mov	r0, r4
 8014140:	b003      	add	sp, #12
 8014142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014146:	6161      	str	r1, [r4, #20]
 8014148:	e7ea      	b.n	8014120 <__d2b+0x58>
 801414a:	a801      	add	r0, sp, #4
 801414c:	f7ff fce9 	bl	8013b22 <__lo0bits>
 8014150:	9b01      	ldr	r3, [sp, #4]
 8014152:	6163      	str	r3, [r4, #20]
 8014154:	3020      	adds	r0, #32
 8014156:	2201      	movs	r2, #1
 8014158:	e7e8      	b.n	801412c <__d2b+0x64>
 801415a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801415e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014162:	6038      	str	r0, [r7, #0]
 8014164:	6918      	ldr	r0, [r3, #16]
 8014166:	f7ff fcbd 	bl	8013ae4 <__hi0bits>
 801416a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801416e:	e7e5      	b.n	801413c <__d2b+0x74>
 8014170:	08017255 	.word	0x08017255
 8014174:	08017266 	.word	0x08017266

08014178 <__ratio>:
 8014178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801417c:	b085      	sub	sp, #20
 801417e:	e9cd 1000 	strd	r1, r0, [sp]
 8014182:	a902      	add	r1, sp, #8
 8014184:	f7ff ff56 	bl	8014034 <__b2d>
 8014188:	9800      	ldr	r0, [sp, #0]
 801418a:	a903      	add	r1, sp, #12
 801418c:	ec55 4b10 	vmov	r4, r5, d0
 8014190:	f7ff ff50 	bl	8014034 <__b2d>
 8014194:	9b01      	ldr	r3, [sp, #4]
 8014196:	6919      	ldr	r1, [r3, #16]
 8014198:	9b00      	ldr	r3, [sp, #0]
 801419a:	691b      	ldr	r3, [r3, #16]
 801419c:	1ac9      	subs	r1, r1, r3
 801419e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80141a2:	1a9b      	subs	r3, r3, r2
 80141a4:	ec5b ab10 	vmov	sl, fp, d0
 80141a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	bfce      	itee	gt
 80141b0:	462a      	movgt	r2, r5
 80141b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80141b6:	465a      	movle	r2, fp
 80141b8:	462f      	mov	r7, r5
 80141ba:	46d9      	mov	r9, fp
 80141bc:	bfcc      	ite	gt
 80141be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80141c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80141c6:	464b      	mov	r3, r9
 80141c8:	4652      	mov	r2, sl
 80141ca:	4620      	mov	r0, r4
 80141cc:	4639      	mov	r1, r7
 80141ce:	f7fd f83d 	bl	801124c <__aeabi_ddiv>
 80141d2:	ec41 0b10 	vmov	d0, r0, r1
 80141d6:	b005      	add	sp, #20
 80141d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141dc <__copybits>:
 80141dc:	3901      	subs	r1, #1
 80141de:	b570      	push	{r4, r5, r6, lr}
 80141e0:	1149      	asrs	r1, r1, #5
 80141e2:	6914      	ldr	r4, [r2, #16]
 80141e4:	3101      	adds	r1, #1
 80141e6:	f102 0314 	add.w	r3, r2, #20
 80141ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80141ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80141f2:	1f05      	subs	r5, r0, #4
 80141f4:	42a3      	cmp	r3, r4
 80141f6:	d30c      	bcc.n	8014212 <__copybits+0x36>
 80141f8:	1aa3      	subs	r3, r4, r2
 80141fa:	3b11      	subs	r3, #17
 80141fc:	f023 0303 	bic.w	r3, r3, #3
 8014200:	3211      	adds	r2, #17
 8014202:	42a2      	cmp	r2, r4
 8014204:	bf88      	it	hi
 8014206:	2300      	movhi	r3, #0
 8014208:	4418      	add	r0, r3
 801420a:	2300      	movs	r3, #0
 801420c:	4288      	cmp	r0, r1
 801420e:	d305      	bcc.n	801421c <__copybits+0x40>
 8014210:	bd70      	pop	{r4, r5, r6, pc}
 8014212:	f853 6b04 	ldr.w	r6, [r3], #4
 8014216:	f845 6f04 	str.w	r6, [r5, #4]!
 801421a:	e7eb      	b.n	80141f4 <__copybits+0x18>
 801421c:	f840 3b04 	str.w	r3, [r0], #4
 8014220:	e7f4      	b.n	801420c <__copybits+0x30>

08014222 <__any_on>:
 8014222:	f100 0214 	add.w	r2, r0, #20
 8014226:	6900      	ldr	r0, [r0, #16]
 8014228:	114b      	asrs	r3, r1, #5
 801422a:	4298      	cmp	r0, r3
 801422c:	b510      	push	{r4, lr}
 801422e:	db11      	blt.n	8014254 <__any_on+0x32>
 8014230:	dd0a      	ble.n	8014248 <__any_on+0x26>
 8014232:	f011 011f 	ands.w	r1, r1, #31
 8014236:	d007      	beq.n	8014248 <__any_on+0x26>
 8014238:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801423c:	fa24 f001 	lsr.w	r0, r4, r1
 8014240:	fa00 f101 	lsl.w	r1, r0, r1
 8014244:	428c      	cmp	r4, r1
 8014246:	d10b      	bne.n	8014260 <__any_on+0x3e>
 8014248:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801424c:	4293      	cmp	r3, r2
 801424e:	d803      	bhi.n	8014258 <__any_on+0x36>
 8014250:	2000      	movs	r0, #0
 8014252:	bd10      	pop	{r4, pc}
 8014254:	4603      	mov	r3, r0
 8014256:	e7f7      	b.n	8014248 <__any_on+0x26>
 8014258:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801425c:	2900      	cmp	r1, #0
 801425e:	d0f5      	beq.n	801424c <__any_on+0x2a>
 8014260:	2001      	movs	r0, #1
 8014262:	e7f6      	b.n	8014252 <__any_on+0x30>

08014264 <sulp>:
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	4604      	mov	r4, r0
 8014268:	460d      	mov	r5, r1
 801426a:	ec45 4b10 	vmov	d0, r4, r5
 801426e:	4616      	mov	r6, r2
 8014270:	f7ff feba 	bl	8013fe8 <__ulp>
 8014274:	ec51 0b10 	vmov	r0, r1, d0
 8014278:	b17e      	cbz	r6, 801429a <sulp+0x36>
 801427a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801427e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014282:	2b00      	cmp	r3, #0
 8014284:	dd09      	ble.n	801429a <sulp+0x36>
 8014286:	051b      	lsls	r3, r3, #20
 8014288:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801428c:	2400      	movs	r4, #0
 801428e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8014292:	4622      	mov	r2, r4
 8014294:	462b      	mov	r3, r5
 8014296:	f7fc feaf 	bl	8010ff8 <__aeabi_dmul>
 801429a:	ec41 0b10 	vmov	d0, r0, r1
 801429e:	bd70      	pop	{r4, r5, r6, pc}

080142a0 <_strtod_l>:
 80142a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a4:	b09f      	sub	sp, #124	@ 0x7c
 80142a6:	460c      	mov	r4, r1
 80142a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80142aa:	2200      	movs	r2, #0
 80142ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80142ae:	9005      	str	r0, [sp, #20]
 80142b0:	f04f 0a00 	mov.w	sl, #0
 80142b4:	f04f 0b00 	mov.w	fp, #0
 80142b8:	460a      	mov	r2, r1
 80142ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80142bc:	7811      	ldrb	r1, [r2, #0]
 80142be:	292b      	cmp	r1, #43	@ 0x2b
 80142c0:	d04a      	beq.n	8014358 <_strtod_l+0xb8>
 80142c2:	d838      	bhi.n	8014336 <_strtod_l+0x96>
 80142c4:	290d      	cmp	r1, #13
 80142c6:	d832      	bhi.n	801432e <_strtod_l+0x8e>
 80142c8:	2908      	cmp	r1, #8
 80142ca:	d832      	bhi.n	8014332 <_strtod_l+0x92>
 80142cc:	2900      	cmp	r1, #0
 80142ce:	d03b      	beq.n	8014348 <_strtod_l+0xa8>
 80142d0:	2200      	movs	r2, #0
 80142d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80142d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80142d6:	782a      	ldrb	r2, [r5, #0]
 80142d8:	2a30      	cmp	r2, #48	@ 0x30
 80142da:	f040 80b3 	bne.w	8014444 <_strtod_l+0x1a4>
 80142de:	786a      	ldrb	r2, [r5, #1]
 80142e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80142e4:	2a58      	cmp	r2, #88	@ 0x58
 80142e6:	d16e      	bne.n	80143c6 <_strtod_l+0x126>
 80142e8:	9302      	str	r3, [sp, #8]
 80142ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142ec:	9301      	str	r3, [sp, #4]
 80142ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	4a8e      	ldr	r2, [pc, #568]	@ (801452c <_strtod_l+0x28c>)
 80142f4:	9805      	ldr	r0, [sp, #20]
 80142f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80142f8:	a919      	add	r1, sp, #100	@ 0x64
 80142fa:	f001 f927 	bl	801554c <__gethex>
 80142fe:	f010 060f 	ands.w	r6, r0, #15
 8014302:	4604      	mov	r4, r0
 8014304:	d005      	beq.n	8014312 <_strtod_l+0x72>
 8014306:	2e06      	cmp	r6, #6
 8014308:	d128      	bne.n	801435c <_strtod_l+0xbc>
 801430a:	3501      	adds	r5, #1
 801430c:	2300      	movs	r3, #0
 801430e:	9519      	str	r5, [sp, #100]	@ 0x64
 8014310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014314:	2b00      	cmp	r3, #0
 8014316:	f040 858e 	bne.w	8014e36 <_strtod_l+0xb96>
 801431a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801431c:	b1cb      	cbz	r3, 8014352 <_strtod_l+0xb2>
 801431e:	4652      	mov	r2, sl
 8014320:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8014324:	ec43 2b10 	vmov	d0, r2, r3
 8014328:	b01f      	add	sp, #124	@ 0x7c
 801432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432e:	2920      	cmp	r1, #32
 8014330:	d1ce      	bne.n	80142d0 <_strtod_l+0x30>
 8014332:	3201      	adds	r2, #1
 8014334:	e7c1      	b.n	80142ba <_strtod_l+0x1a>
 8014336:	292d      	cmp	r1, #45	@ 0x2d
 8014338:	d1ca      	bne.n	80142d0 <_strtod_l+0x30>
 801433a:	2101      	movs	r1, #1
 801433c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801433e:	1c51      	adds	r1, r2, #1
 8014340:	9119      	str	r1, [sp, #100]	@ 0x64
 8014342:	7852      	ldrb	r2, [r2, #1]
 8014344:	2a00      	cmp	r2, #0
 8014346:	d1c5      	bne.n	80142d4 <_strtod_l+0x34>
 8014348:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801434a:	9419      	str	r4, [sp, #100]	@ 0x64
 801434c:	2b00      	cmp	r3, #0
 801434e:	f040 8570 	bne.w	8014e32 <_strtod_l+0xb92>
 8014352:	4652      	mov	r2, sl
 8014354:	465b      	mov	r3, fp
 8014356:	e7e5      	b.n	8014324 <_strtod_l+0x84>
 8014358:	2100      	movs	r1, #0
 801435a:	e7ef      	b.n	801433c <_strtod_l+0x9c>
 801435c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801435e:	b13a      	cbz	r2, 8014370 <_strtod_l+0xd0>
 8014360:	2135      	movs	r1, #53	@ 0x35
 8014362:	a81c      	add	r0, sp, #112	@ 0x70
 8014364:	f7ff ff3a 	bl	80141dc <__copybits>
 8014368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801436a:	9805      	ldr	r0, [sp, #20]
 801436c:	f7ff fb08 	bl	8013980 <_Bfree>
 8014370:	3e01      	subs	r6, #1
 8014372:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014374:	2e04      	cmp	r6, #4
 8014376:	d806      	bhi.n	8014386 <_strtod_l+0xe6>
 8014378:	e8df f006 	tbb	[pc, r6]
 801437c:	201d0314 	.word	0x201d0314
 8014380:	14          	.byte	0x14
 8014381:	00          	.byte	0x00
 8014382:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8014386:	05e1      	lsls	r1, r4, #23
 8014388:	bf48      	it	mi
 801438a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801438e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014392:	0d1b      	lsrs	r3, r3, #20
 8014394:	051b      	lsls	r3, r3, #20
 8014396:	2b00      	cmp	r3, #0
 8014398:	d1bb      	bne.n	8014312 <_strtod_l+0x72>
 801439a:	f7fe fb2f 	bl	80129fc <__errno>
 801439e:	2322      	movs	r3, #34	@ 0x22
 80143a0:	6003      	str	r3, [r0, #0]
 80143a2:	e7b6      	b.n	8014312 <_strtod_l+0x72>
 80143a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80143a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80143ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80143b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80143b4:	e7e7      	b.n	8014386 <_strtod_l+0xe6>
 80143b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8014534 <_strtod_l+0x294>
 80143ba:	e7e4      	b.n	8014386 <_strtod_l+0xe6>
 80143bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80143c0:	f04f 3aff 	mov.w	sl, #4294967295
 80143c4:	e7df      	b.n	8014386 <_strtod_l+0xe6>
 80143c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80143c8:	1c5a      	adds	r2, r3, #1
 80143ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80143cc:	785b      	ldrb	r3, [r3, #1]
 80143ce:	2b30      	cmp	r3, #48	@ 0x30
 80143d0:	d0f9      	beq.n	80143c6 <_strtod_l+0x126>
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d09d      	beq.n	8014312 <_strtod_l+0x72>
 80143d6:	2301      	movs	r3, #1
 80143d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80143da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80143dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80143de:	2300      	movs	r3, #0
 80143e0:	9308      	str	r3, [sp, #32]
 80143e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80143e4:	461f      	mov	r7, r3
 80143e6:	220a      	movs	r2, #10
 80143e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80143ea:	7805      	ldrb	r5, [r0, #0]
 80143ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80143f0:	b2d9      	uxtb	r1, r3
 80143f2:	2909      	cmp	r1, #9
 80143f4:	d928      	bls.n	8014448 <_strtod_l+0x1a8>
 80143f6:	494e      	ldr	r1, [pc, #312]	@ (8014530 <_strtod_l+0x290>)
 80143f8:	2201      	movs	r2, #1
 80143fa:	f000 ffd5 	bl	80153a8 <strncmp>
 80143fe:	2800      	cmp	r0, #0
 8014400:	d032      	beq.n	8014468 <_strtod_l+0x1c8>
 8014402:	2000      	movs	r0, #0
 8014404:	462a      	mov	r2, r5
 8014406:	4681      	mov	r9, r0
 8014408:	463d      	mov	r5, r7
 801440a:	4603      	mov	r3, r0
 801440c:	2a65      	cmp	r2, #101	@ 0x65
 801440e:	d001      	beq.n	8014414 <_strtod_l+0x174>
 8014410:	2a45      	cmp	r2, #69	@ 0x45
 8014412:	d114      	bne.n	801443e <_strtod_l+0x19e>
 8014414:	b91d      	cbnz	r5, 801441e <_strtod_l+0x17e>
 8014416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014418:	4302      	orrs	r2, r0
 801441a:	d095      	beq.n	8014348 <_strtod_l+0xa8>
 801441c:	2500      	movs	r5, #0
 801441e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8014420:	1c62      	adds	r2, r4, #1
 8014422:	9219      	str	r2, [sp, #100]	@ 0x64
 8014424:	7862      	ldrb	r2, [r4, #1]
 8014426:	2a2b      	cmp	r2, #43	@ 0x2b
 8014428:	d077      	beq.n	801451a <_strtod_l+0x27a>
 801442a:	2a2d      	cmp	r2, #45	@ 0x2d
 801442c:	d07b      	beq.n	8014526 <_strtod_l+0x286>
 801442e:	f04f 0c00 	mov.w	ip, #0
 8014432:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014436:	2909      	cmp	r1, #9
 8014438:	f240 8082 	bls.w	8014540 <_strtod_l+0x2a0>
 801443c:	9419      	str	r4, [sp, #100]	@ 0x64
 801443e:	f04f 0800 	mov.w	r8, #0
 8014442:	e0a2      	b.n	801458a <_strtod_l+0x2ea>
 8014444:	2300      	movs	r3, #0
 8014446:	e7c7      	b.n	80143d8 <_strtod_l+0x138>
 8014448:	2f08      	cmp	r7, #8
 801444a:	bfd5      	itete	le
 801444c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801444e:	9908      	ldrgt	r1, [sp, #32]
 8014450:	fb02 3301 	mlale	r3, r2, r1, r3
 8014454:	fb02 3301 	mlagt	r3, r2, r1, r3
 8014458:	f100 0001 	add.w	r0, r0, #1
 801445c:	bfd4      	ite	le
 801445e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8014460:	9308      	strgt	r3, [sp, #32]
 8014462:	3701      	adds	r7, #1
 8014464:	9019      	str	r0, [sp, #100]	@ 0x64
 8014466:	e7bf      	b.n	80143e8 <_strtod_l+0x148>
 8014468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801446a:	1c5a      	adds	r2, r3, #1
 801446c:	9219      	str	r2, [sp, #100]	@ 0x64
 801446e:	785a      	ldrb	r2, [r3, #1]
 8014470:	b37f      	cbz	r7, 80144d2 <_strtod_l+0x232>
 8014472:	4681      	mov	r9, r0
 8014474:	463d      	mov	r5, r7
 8014476:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801447a:	2b09      	cmp	r3, #9
 801447c:	d912      	bls.n	80144a4 <_strtod_l+0x204>
 801447e:	2301      	movs	r3, #1
 8014480:	e7c4      	b.n	801440c <_strtod_l+0x16c>
 8014482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014484:	1c5a      	adds	r2, r3, #1
 8014486:	9219      	str	r2, [sp, #100]	@ 0x64
 8014488:	785a      	ldrb	r2, [r3, #1]
 801448a:	3001      	adds	r0, #1
 801448c:	2a30      	cmp	r2, #48	@ 0x30
 801448e:	d0f8      	beq.n	8014482 <_strtod_l+0x1e2>
 8014490:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014494:	2b08      	cmp	r3, #8
 8014496:	f200 84d3 	bhi.w	8014e40 <_strtod_l+0xba0>
 801449a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801449c:	930c      	str	r3, [sp, #48]	@ 0x30
 801449e:	4681      	mov	r9, r0
 80144a0:	2000      	movs	r0, #0
 80144a2:	4605      	mov	r5, r0
 80144a4:	3a30      	subs	r2, #48	@ 0x30
 80144a6:	f100 0301 	add.w	r3, r0, #1
 80144aa:	d02a      	beq.n	8014502 <_strtod_l+0x262>
 80144ac:	4499      	add	r9, r3
 80144ae:	eb00 0c05 	add.w	ip, r0, r5
 80144b2:	462b      	mov	r3, r5
 80144b4:	210a      	movs	r1, #10
 80144b6:	4563      	cmp	r3, ip
 80144b8:	d10d      	bne.n	80144d6 <_strtod_l+0x236>
 80144ba:	1c69      	adds	r1, r5, #1
 80144bc:	4401      	add	r1, r0
 80144be:	4428      	add	r0, r5
 80144c0:	2808      	cmp	r0, #8
 80144c2:	dc16      	bgt.n	80144f2 <_strtod_l+0x252>
 80144c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80144c6:	230a      	movs	r3, #10
 80144c8:	fb03 2300 	mla	r3, r3, r0, r2
 80144cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80144ce:	2300      	movs	r3, #0
 80144d0:	e018      	b.n	8014504 <_strtod_l+0x264>
 80144d2:	4638      	mov	r0, r7
 80144d4:	e7da      	b.n	801448c <_strtod_l+0x1ec>
 80144d6:	2b08      	cmp	r3, #8
 80144d8:	f103 0301 	add.w	r3, r3, #1
 80144dc:	dc03      	bgt.n	80144e6 <_strtod_l+0x246>
 80144de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80144e0:	434e      	muls	r6, r1
 80144e2:	960a      	str	r6, [sp, #40]	@ 0x28
 80144e4:	e7e7      	b.n	80144b6 <_strtod_l+0x216>
 80144e6:	2b10      	cmp	r3, #16
 80144e8:	bfde      	ittt	le
 80144ea:	9e08      	ldrle	r6, [sp, #32]
 80144ec:	434e      	mulle	r6, r1
 80144ee:	9608      	strle	r6, [sp, #32]
 80144f0:	e7e1      	b.n	80144b6 <_strtod_l+0x216>
 80144f2:	280f      	cmp	r0, #15
 80144f4:	dceb      	bgt.n	80144ce <_strtod_l+0x22e>
 80144f6:	9808      	ldr	r0, [sp, #32]
 80144f8:	230a      	movs	r3, #10
 80144fa:	fb03 2300 	mla	r3, r3, r0, r2
 80144fe:	9308      	str	r3, [sp, #32]
 8014500:	e7e5      	b.n	80144ce <_strtod_l+0x22e>
 8014502:	4629      	mov	r1, r5
 8014504:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014506:	1c50      	adds	r0, r2, #1
 8014508:	9019      	str	r0, [sp, #100]	@ 0x64
 801450a:	7852      	ldrb	r2, [r2, #1]
 801450c:	4618      	mov	r0, r3
 801450e:	460d      	mov	r5, r1
 8014510:	e7b1      	b.n	8014476 <_strtod_l+0x1d6>
 8014512:	f04f 0900 	mov.w	r9, #0
 8014516:	2301      	movs	r3, #1
 8014518:	e77d      	b.n	8014416 <_strtod_l+0x176>
 801451a:	f04f 0c00 	mov.w	ip, #0
 801451e:	1ca2      	adds	r2, r4, #2
 8014520:	9219      	str	r2, [sp, #100]	@ 0x64
 8014522:	78a2      	ldrb	r2, [r4, #2]
 8014524:	e785      	b.n	8014432 <_strtod_l+0x192>
 8014526:	f04f 0c01 	mov.w	ip, #1
 801452a:	e7f8      	b.n	801451e <_strtod_l+0x27e>
 801452c:	080173d8 	.word	0x080173d8
 8014530:	080173c0 	.word	0x080173c0
 8014534:	7ff00000 	.word	0x7ff00000
 8014538:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801453a:	1c51      	adds	r1, r2, #1
 801453c:	9119      	str	r1, [sp, #100]	@ 0x64
 801453e:	7852      	ldrb	r2, [r2, #1]
 8014540:	2a30      	cmp	r2, #48	@ 0x30
 8014542:	d0f9      	beq.n	8014538 <_strtod_l+0x298>
 8014544:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8014548:	2908      	cmp	r1, #8
 801454a:	f63f af78 	bhi.w	801443e <_strtod_l+0x19e>
 801454e:	3a30      	subs	r2, #48	@ 0x30
 8014550:	920e      	str	r2, [sp, #56]	@ 0x38
 8014552:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014554:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014556:	f04f 080a 	mov.w	r8, #10
 801455a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801455c:	1c56      	adds	r6, r2, #1
 801455e:	9619      	str	r6, [sp, #100]	@ 0x64
 8014560:	7852      	ldrb	r2, [r2, #1]
 8014562:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014566:	f1be 0f09 	cmp.w	lr, #9
 801456a:	d939      	bls.n	80145e0 <_strtod_l+0x340>
 801456c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801456e:	1a76      	subs	r6, r6, r1
 8014570:	2e08      	cmp	r6, #8
 8014572:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8014576:	dc03      	bgt.n	8014580 <_strtod_l+0x2e0>
 8014578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801457a:	4588      	cmp	r8, r1
 801457c:	bfa8      	it	ge
 801457e:	4688      	movge	r8, r1
 8014580:	f1bc 0f00 	cmp.w	ip, #0
 8014584:	d001      	beq.n	801458a <_strtod_l+0x2ea>
 8014586:	f1c8 0800 	rsb	r8, r8, #0
 801458a:	2d00      	cmp	r5, #0
 801458c:	d14e      	bne.n	801462c <_strtod_l+0x38c>
 801458e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014590:	4308      	orrs	r0, r1
 8014592:	f47f aebe 	bne.w	8014312 <_strtod_l+0x72>
 8014596:	2b00      	cmp	r3, #0
 8014598:	f47f aed6 	bne.w	8014348 <_strtod_l+0xa8>
 801459c:	2a69      	cmp	r2, #105	@ 0x69
 801459e:	d028      	beq.n	80145f2 <_strtod_l+0x352>
 80145a0:	dc25      	bgt.n	80145ee <_strtod_l+0x34e>
 80145a2:	2a49      	cmp	r2, #73	@ 0x49
 80145a4:	d025      	beq.n	80145f2 <_strtod_l+0x352>
 80145a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80145a8:	f47f aece 	bne.w	8014348 <_strtod_l+0xa8>
 80145ac:	499b      	ldr	r1, [pc, #620]	@ (801481c <_strtod_l+0x57c>)
 80145ae:	a819      	add	r0, sp, #100	@ 0x64
 80145b0:	f001 f9ee 	bl	8015990 <__match>
 80145b4:	2800      	cmp	r0, #0
 80145b6:	f43f aec7 	beq.w	8014348 <_strtod_l+0xa8>
 80145ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	2b28      	cmp	r3, #40	@ 0x28
 80145c0:	d12e      	bne.n	8014620 <_strtod_l+0x380>
 80145c2:	4997      	ldr	r1, [pc, #604]	@ (8014820 <_strtod_l+0x580>)
 80145c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80145c6:	a819      	add	r0, sp, #100	@ 0x64
 80145c8:	f001 f9f6 	bl	80159b8 <__hexnan>
 80145cc:	2805      	cmp	r0, #5
 80145ce:	d127      	bne.n	8014620 <_strtod_l+0x380>
 80145d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80145d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80145d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80145da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80145de:	e698      	b.n	8014312 <_strtod_l+0x72>
 80145e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80145e2:	fb08 2101 	mla	r1, r8, r1, r2
 80145e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80145ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80145ec:	e7b5      	b.n	801455a <_strtod_l+0x2ba>
 80145ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80145f0:	e7da      	b.n	80145a8 <_strtod_l+0x308>
 80145f2:	498c      	ldr	r1, [pc, #560]	@ (8014824 <_strtod_l+0x584>)
 80145f4:	a819      	add	r0, sp, #100	@ 0x64
 80145f6:	f001 f9cb 	bl	8015990 <__match>
 80145fa:	2800      	cmp	r0, #0
 80145fc:	f43f aea4 	beq.w	8014348 <_strtod_l+0xa8>
 8014600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014602:	4989      	ldr	r1, [pc, #548]	@ (8014828 <_strtod_l+0x588>)
 8014604:	3b01      	subs	r3, #1
 8014606:	a819      	add	r0, sp, #100	@ 0x64
 8014608:	9319      	str	r3, [sp, #100]	@ 0x64
 801460a:	f001 f9c1 	bl	8015990 <__match>
 801460e:	b910      	cbnz	r0, 8014616 <_strtod_l+0x376>
 8014610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014612:	3301      	adds	r3, #1
 8014614:	9319      	str	r3, [sp, #100]	@ 0x64
 8014616:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8014838 <_strtod_l+0x598>
 801461a:	f04f 0a00 	mov.w	sl, #0
 801461e:	e678      	b.n	8014312 <_strtod_l+0x72>
 8014620:	4882      	ldr	r0, [pc, #520]	@ (801482c <_strtod_l+0x58c>)
 8014622:	f000 fef1 	bl	8015408 <nan>
 8014626:	ec5b ab10 	vmov	sl, fp, d0
 801462a:	e672      	b.n	8014312 <_strtod_l+0x72>
 801462c:	eba8 0309 	sub.w	r3, r8, r9
 8014630:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014632:	9309      	str	r3, [sp, #36]	@ 0x24
 8014634:	2f00      	cmp	r7, #0
 8014636:	bf08      	it	eq
 8014638:	462f      	moveq	r7, r5
 801463a:	2d10      	cmp	r5, #16
 801463c:	462c      	mov	r4, r5
 801463e:	bfa8      	it	ge
 8014640:	2410      	movge	r4, #16
 8014642:	f7fc fc5f 	bl	8010f04 <__aeabi_ui2d>
 8014646:	2d09      	cmp	r5, #9
 8014648:	4682      	mov	sl, r0
 801464a:	468b      	mov	fp, r1
 801464c:	dc13      	bgt.n	8014676 <_strtod_l+0x3d6>
 801464e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014650:	2b00      	cmp	r3, #0
 8014652:	f43f ae5e 	beq.w	8014312 <_strtod_l+0x72>
 8014656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014658:	dd78      	ble.n	801474c <_strtod_l+0x4ac>
 801465a:	2b16      	cmp	r3, #22
 801465c:	dc5f      	bgt.n	801471e <_strtod_l+0x47e>
 801465e:	4974      	ldr	r1, [pc, #464]	@ (8014830 <_strtod_l+0x590>)
 8014660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014668:	4652      	mov	r2, sl
 801466a:	465b      	mov	r3, fp
 801466c:	f7fc fcc4 	bl	8010ff8 <__aeabi_dmul>
 8014670:	4682      	mov	sl, r0
 8014672:	468b      	mov	fp, r1
 8014674:	e64d      	b.n	8014312 <_strtod_l+0x72>
 8014676:	4b6e      	ldr	r3, [pc, #440]	@ (8014830 <_strtod_l+0x590>)
 8014678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801467c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8014680:	f7fc fcba 	bl	8010ff8 <__aeabi_dmul>
 8014684:	4682      	mov	sl, r0
 8014686:	9808      	ldr	r0, [sp, #32]
 8014688:	468b      	mov	fp, r1
 801468a:	f7fc fc3b 	bl	8010f04 <__aeabi_ui2d>
 801468e:	4602      	mov	r2, r0
 8014690:	460b      	mov	r3, r1
 8014692:	4650      	mov	r0, sl
 8014694:	4659      	mov	r1, fp
 8014696:	f7fc faf9 	bl	8010c8c <__adddf3>
 801469a:	2d0f      	cmp	r5, #15
 801469c:	4682      	mov	sl, r0
 801469e:	468b      	mov	fp, r1
 80146a0:	ddd5      	ble.n	801464e <_strtod_l+0x3ae>
 80146a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146a4:	1b2c      	subs	r4, r5, r4
 80146a6:	441c      	add	r4, r3
 80146a8:	2c00      	cmp	r4, #0
 80146aa:	f340 8096 	ble.w	80147da <_strtod_l+0x53a>
 80146ae:	f014 030f 	ands.w	r3, r4, #15
 80146b2:	d00a      	beq.n	80146ca <_strtod_l+0x42a>
 80146b4:	495e      	ldr	r1, [pc, #376]	@ (8014830 <_strtod_l+0x590>)
 80146b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80146ba:	4652      	mov	r2, sl
 80146bc:	465b      	mov	r3, fp
 80146be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146c2:	f7fc fc99 	bl	8010ff8 <__aeabi_dmul>
 80146c6:	4682      	mov	sl, r0
 80146c8:	468b      	mov	fp, r1
 80146ca:	f034 040f 	bics.w	r4, r4, #15
 80146ce:	d073      	beq.n	80147b8 <_strtod_l+0x518>
 80146d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80146d4:	dd48      	ble.n	8014768 <_strtod_l+0x4c8>
 80146d6:	2400      	movs	r4, #0
 80146d8:	46a0      	mov	r8, r4
 80146da:	940a      	str	r4, [sp, #40]	@ 0x28
 80146dc:	46a1      	mov	r9, r4
 80146de:	9a05      	ldr	r2, [sp, #20]
 80146e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8014838 <_strtod_l+0x598>
 80146e4:	2322      	movs	r3, #34	@ 0x22
 80146e6:	6013      	str	r3, [r2, #0]
 80146e8:	f04f 0a00 	mov.w	sl, #0
 80146ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f43f ae0f 	beq.w	8014312 <_strtod_l+0x72>
 80146f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80146f6:	9805      	ldr	r0, [sp, #20]
 80146f8:	f7ff f942 	bl	8013980 <_Bfree>
 80146fc:	9805      	ldr	r0, [sp, #20]
 80146fe:	4649      	mov	r1, r9
 8014700:	f7ff f93e 	bl	8013980 <_Bfree>
 8014704:	9805      	ldr	r0, [sp, #20]
 8014706:	4641      	mov	r1, r8
 8014708:	f7ff f93a 	bl	8013980 <_Bfree>
 801470c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801470e:	9805      	ldr	r0, [sp, #20]
 8014710:	f7ff f936 	bl	8013980 <_Bfree>
 8014714:	9805      	ldr	r0, [sp, #20]
 8014716:	4621      	mov	r1, r4
 8014718:	f7ff f932 	bl	8013980 <_Bfree>
 801471c:	e5f9      	b.n	8014312 <_strtod_l+0x72>
 801471e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014720:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8014724:	4293      	cmp	r3, r2
 8014726:	dbbc      	blt.n	80146a2 <_strtod_l+0x402>
 8014728:	4c41      	ldr	r4, [pc, #260]	@ (8014830 <_strtod_l+0x590>)
 801472a:	f1c5 050f 	rsb	r5, r5, #15
 801472e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014732:	4652      	mov	r2, sl
 8014734:	465b      	mov	r3, fp
 8014736:	e9d1 0100 	ldrd	r0, r1, [r1]
 801473a:	f7fc fc5d 	bl	8010ff8 <__aeabi_dmul>
 801473e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014740:	1b5d      	subs	r5, r3, r5
 8014742:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014746:	e9d4 2300 	ldrd	r2, r3, [r4]
 801474a:	e78f      	b.n	801466c <_strtod_l+0x3cc>
 801474c:	3316      	adds	r3, #22
 801474e:	dba8      	blt.n	80146a2 <_strtod_l+0x402>
 8014750:	4b37      	ldr	r3, [pc, #220]	@ (8014830 <_strtod_l+0x590>)
 8014752:	eba9 0808 	sub.w	r8, r9, r8
 8014756:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801475a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801475e:	4650      	mov	r0, sl
 8014760:	4659      	mov	r1, fp
 8014762:	f7fc fd73 	bl	801124c <__aeabi_ddiv>
 8014766:	e783      	b.n	8014670 <_strtod_l+0x3d0>
 8014768:	4b32      	ldr	r3, [pc, #200]	@ (8014834 <_strtod_l+0x594>)
 801476a:	9308      	str	r3, [sp, #32]
 801476c:	2300      	movs	r3, #0
 801476e:	1124      	asrs	r4, r4, #4
 8014770:	4650      	mov	r0, sl
 8014772:	4659      	mov	r1, fp
 8014774:	461e      	mov	r6, r3
 8014776:	2c01      	cmp	r4, #1
 8014778:	dc21      	bgt.n	80147be <_strtod_l+0x51e>
 801477a:	b10b      	cbz	r3, 8014780 <_strtod_l+0x4e0>
 801477c:	4682      	mov	sl, r0
 801477e:	468b      	mov	fp, r1
 8014780:	492c      	ldr	r1, [pc, #176]	@ (8014834 <_strtod_l+0x594>)
 8014782:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014786:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801478a:	4652      	mov	r2, sl
 801478c:	465b      	mov	r3, fp
 801478e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014792:	f7fc fc31 	bl	8010ff8 <__aeabi_dmul>
 8014796:	4b28      	ldr	r3, [pc, #160]	@ (8014838 <_strtod_l+0x598>)
 8014798:	460a      	mov	r2, r1
 801479a:	400b      	ands	r3, r1
 801479c:	4927      	ldr	r1, [pc, #156]	@ (801483c <_strtod_l+0x59c>)
 801479e:	428b      	cmp	r3, r1
 80147a0:	4682      	mov	sl, r0
 80147a2:	d898      	bhi.n	80146d6 <_strtod_l+0x436>
 80147a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80147a8:	428b      	cmp	r3, r1
 80147aa:	bf86      	itte	hi
 80147ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8014840 <_strtod_l+0x5a0>
 80147b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80147b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80147b8:	2300      	movs	r3, #0
 80147ba:	9308      	str	r3, [sp, #32]
 80147bc:	e07a      	b.n	80148b4 <_strtod_l+0x614>
 80147be:	07e2      	lsls	r2, r4, #31
 80147c0:	d505      	bpl.n	80147ce <_strtod_l+0x52e>
 80147c2:	9b08      	ldr	r3, [sp, #32]
 80147c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c8:	f7fc fc16 	bl	8010ff8 <__aeabi_dmul>
 80147cc:	2301      	movs	r3, #1
 80147ce:	9a08      	ldr	r2, [sp, #32]
 80147d0:	3208      	adds	r2, #8
 80147d2:	3601      	adds	r6, #1
 80147d4:	1064      	asrs	r4, r4, #1
 80147d6:	9208      	str	r2, [sp, #32]
 80147d8:	e7cd      	b.n	8014776 <_strtod_l+0x4d6>
 80147da:	d0ed      	beq.n	80147b8 <_strtod_l+0x518>
 80147dc:	4264      	negs	r4, r4
 80147de:	f014 020f 	ands.w	r2, r4, #15
 80147e2:	d00a      	beq.n	80147fa <_strtod_l+0x55a>
 80147e4:	4b12      	ldr	r3, [pc, #72]	@ (8014830 <_strtod_l+0x590>)
 80147e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147ea:	4650      	mov	r0, sl
 80147ec:	4659      	mov	r1, fp
 80147ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f2:	f7fc fd2b 	bl	801124c <__aeabi_ddiv>
 80147f6:	4682      	mov	sl, r0
 80147f8:	468b      	mov	fp, r1
 80147fa:	1124      	asrs	r4, r4, #4
 80147fc:	d0dc      	beq.n	80147b8 <_strtod_l+0x518>
 80147fe:	2c1f      	cmp	r4, #31
 8014800:	dd20      	ble.n	8014844 <_strtod_l+0x5a4>
 8014802:	2400      	movs	r4, #0
 8014804:	46a0      	mov	r8, r4
 8014806:	940a      	str	r4, [sp, #40]	@ 0x28
 8014808:	46a1      	mov	r9, r4
 801480a:	9a05      	ldr	r2, [sp, #20]
 801480c:	2322      	movs	r3, #34	@ 0x22
 801480e:	f04f 0a00 	mov.w	sl, #0
 8014812:	f04f 0b00 	mov.w	fp, #0
 8014816:	6013      	str	r3, [r2, #0]
 8014818:	e768      	b.n	80146ec <_strtod_l+0x44c>
 801481a:	bf00      	nop
 801481c:	080171ad 	.word	0x080171ad
 8014820:	080173c4 	.word	0x080173c4
 8014824:	080171a5 	.word	0x080171a5
 8014828:	080171dc 	.word	0x080171dc
 801482c:	0801756d 	.word	0x0801756d
 8014830:	080172f8 	.word	0x080172f8
 8014834:	080172d0 	.word	0x080172d0
 8014838:	7ff00000 	.word	0x7ff00000
 801483c:	7ca00000 	.word	0x7ca00000
 8014840:	7fefffff 	.word	0x7fefffff
 8014844:	f014 0310 	ands.w	r3, r4, #16
 8014848:	bf18      	it	ne
 801484a:	236a      	movne	r3, #106	@ 0x6a
 801484c:	4ea9      	ldr	r6, [pc, #676]	@ (8014af4 <_strtod_l+0x854>)
 801484e:	9308      	str	r3, [sp, #32]
 8014850:	4650      	mov	r0, sl
 8014852:	4659      	mov	r1, fp
 8014854:	2300      	movs	r3, #0
 8014856:	07e2      	lsls	r2, r4, #31
 8014858:	d504      	bpl.n	8014864 <_strtod_l+0x5c4>
 801485a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801485e:	f7fc fbcb 	bl	8010ff8 <__aeabi_dmul>
 8014862:	2301      	movs	r3, #1
 8014864:	1064      	asrs	r4, r4, #1
 8014866:	f106 0608 	add.w	r6, r6, #8
 801486a:	d1f4      	bne.n	8014856 <_strtod_l+0x5b6>
 801486c:	b10b      	cbz	r3, 8014872 <_strtod_l+0x5d2>
 801486e:	4682      	mov	sl, r0
 8014870:	468b      	mov	fp, r1
 8014872:	9b08      	ldr	r3, [sp, #32]
 8014874:	b1b3      	cbz	r3, 80148a4 <_strtod_l+0x604>
 8014876:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801487a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801487e:	2b00      	cmp	r3, #0
 8014880:	4659      	mov	r1, fp
 8014882:	dd0f      	ble.n	80148a4 <_strtod_l+0x604>
 8014884:	2b1f      	cmp	r3, #31
 8014886:	dd55      	ble.n	8014934 <_strtod_l+0x694>
 8014888:	2b34      	cmp	r3, #52	@ 0x34
 801488a:	bfde      	ittt	le
 801488c:	f04f 33ff 	movle.w	r3, #4294967295
 8014890:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014894:	4093      	lslle	r3, r2
 8014896:	f04f 0a00 	mov.w	sl, #0
 801489a:	bfcc      	ite	gt
 801489c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80148a0:	ea03 0b01 	andle.w	fp, r3, r1
 80148a4:	2200      	movs	r2, #0
 80148a6:	2300      	movs	r3, #0
 80148a8:	4650      	mov	r0, sl
 80148aa:	4659      	mov	r1, fp
 80148ac:	f7fc fe0c 	bl	80114c8 <__aeabi_dcmpeq>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d1a6      	bne.n	8014802 <_strtod_l+0x562>
 80148b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80148ba:	9805      	ldr	r0, [sp, #20]
 80148bc:	462b      	mov	r3, r5
 80148be:	463a      	mov	r2, r7
 80148c0:	f7ff f8c6 	bl	8013a50 <__s2b>
 80148c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80148c6:	2800      	cmp	r0, #0
 80148c8:	f43f af05 	beq.w	80146d6 <_strtod_l+0x436>
 80148cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148ce:	2a00      	cmp	r2, #0
 80148d0:	eba9 0308 	sub.w	r3, r9, r8
 80148d4:	bfa8      	it	ge
 80148d6:	2300      	movge	r3, #0
 80148d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80148da:	2400      	movs	r4, #0
 80148dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80148e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80148e2:	46a0      	mov	r8, r4
 80148e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148e6:	9805      	ldr	r0, [sp, #20]
 80148e8:	6859      	ldr	r1, [r3, #4]
 80148ea:	f7ff f809 	bl	8013900 <_Balloc>
 80148ee:	4681      	mov	r9, r0
 80148f0:	2800      	cmp	r0, #0
 80148f2:	f43f aef4 	beq.w	80146de <_strtod_l+0x43e>
 80148f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148f8:	691a      	ldr	r2, [r3, #16]
 80148fa:	3202      	adds	r2, #2
 80148fc:	f103 010c 	add.w	r1, r3, #12
 8014900:	0092      	lsls	r2, r2, #2
 8014902:	300c      	adds	r0, #12
 8014904:	f000 fd72 	bl	80153ec <memcpy>
 8014908:	ec4b ab10 	vmov	d0, sl, fp
 801490c:	9805      	ldr	r0, [sp, #20]
 801490e:	aa1c      	add	r2, sp, #112	@ 0x70
 8014910:	a91b      	add	r1, sp, #108	@ 0x6c
 8014912:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8014916:	f7ff fbd7 	bl	80140c8 <__d2b>
 801491a:	901a      	str	r0, [sp, #104]	@ 0x68
 801491c:	2800      	cmp	r0, #0
 801491e:	f43f aede 	beq.w	80146de <_strtod_l+0x43e>
 8014922:	9805      	ldr	r0, [sp, #20]
 8014924:	2101      	movs	r1, #1
 8014926:	f7ff f929 	bl	8013b7c <__i2b>
 801492a:	4680      	mov	r8, r0
 801492c:	b948      	cbnz	r0, 8014942 <_strtod_l+0x6a2>
 801492e:	f04f 0800 	mov.w	r8, #0
 8014932:	e6d4      	b.n	80146de <_strtod_l+0x43e>
 8014934:	f04f 32ff 	mov.w	r2, #4294967295
 8014938:	fa02 f303 	lsl.w	r3, r2, r3
 801493c:	ea03 0a0a 	and.w	sl, r3, sl
 8014940:	e7b0      	b.n	80148a4 <_strtod_l+0x604>
 8014942:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8014944:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014946:	2d00      	cmp	r5, #0
 8014948:	bfab      	itete	ge
 801494a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801494c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801494e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8014950:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8014952:	bfac      	ite	ge
 8014954:	18ef      	addge	r7, r5, r3
 8014956:	1b5e      	sublt	r6, r3, r5
 8014958:	9b08      	ldr	r3, [sp, #32]
 801495a:	1aed      	subs	r5, r5, r3
 801495c:	4415      	add	r5, r2
 801495e:	4b66      	ldr	r3, [pc, #408]	@ (8014af8 <_strtod_l+0x858>)
 8014960:	3d01      	subs	r5, #1
 8014962:	429d      	cmp	r5, r3
 8014964:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014968:	da50      	bge.n	8014a0c <_strtod_l+0x76c>
 801496a:	1b5b      	subs	r3, r3, r5
 801496c:	2b1f      	cmp	r3, #31
 801496e:	eba2 0203 	sub.w	r2, r2, r3
 8014972:	f04f 0101 	mov.w	r1, #1
 8014976:	dc3d      	bgt.n	80149f4 <_strtod_l+0x754>
 8014978:	fa01 f303 	lsl.w	r3, r1, r3
 801497c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801497e:	2300      	movs	r3, #0
 8014980:	9310      	str	r3, [sp, #64]	@ 0x40
 8014982:	18bd      	adds	r5, r7, r2
 8014984:	9b08      	ldr	r3, [sp, #32]
 8014986:	42af      	cmp	r7, r5
 8014988:	4416      	add	r6, r2
 801498a:	441e      	add	r6, r3
 801498c:	463b      	mov	r3, r7
 801498e:	bfa8      	it	ge
 8014990:	462b      	movge	r3, r5
 8014992:	42b3      	cmp	r3, r6
 8014994:	bfa8      	it	ge
 8014996:	4633      	movge	r3, r6
 8014998:	2b00      	cmp	r3, #0
 801499a:	bfc2      	ittt	gt
 801499c:	1aed      	subgt	r5, r5, r3
 801499e:	1af6      	subgt	r6, r6, r3
 80149a0:	1aff      	subgt	r7, r7, r3
 80149a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	dd16      	ble.n	80149d6 <_strtod_l+0x736>
 80149a8:	4641      	mov	r1, r8
 80149aa:	9805      	ldr	r0, [sp, #20]
 80149ac:	461a      	mov	r2, r3
 80149ae:	f7ff f9a5 	bl	8013cfc <__pow5mult>
 80149b2:	4680      	mov	r8, r0
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d0ba      	beq.n	801492e <_strtod_l+0x68e>
 80149b8:	4601      	mov	r1, r0
 80149ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80149bc:	9805      	ldr	r0, [sp, #20]
 80149be:	f7ff f8f3 	bl	8013ba8 <__multiply>
 80149c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80149c4:	2800      	cmp	r0, #0
 80149c6:	f43f ae8a 	beq.w	80146de <_strtod_l+0x43e>
 80149ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80149cc:	9805      	ldr	r0, [sp, #20]
 80149ce:	f7fe ffd7 	bl	8013980 <_Bfree>
 80149d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80149d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80149d6:	2d00      	cmp	r5, #0
 80149d8:	dc1d      	bgt.n	8014a16 <_strtod_l+0x776>
 80149da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80149dc:	2b00      	cmp	r3, #0
 80149de:	dd23      	ble.n	8014a28 <_strtod_l+0x788>
 80149e0:	4649      	mov	r1, r9
 80149e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80149e4:	9805      	ldr	r0, [sp, #20]
 80149e6:	f7ff f989 	bl	8013cfc <__pow5mult>
 80149ea:	4681      	mov	r9, r0
 80149ec:	b9e0      	cbnz	r0, 8014a28 <_strtod_l+0x788>
 80149ee:	f04f 0900 	mov.w	r9, #0
 80149f2:	e674      	b.n	80146de <_strtod_l+0x43e>
 80149f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80149f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80149fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8014a00:	35e2      	adds	r5, #226	@ 0xe2
 8014a02:	fa01 f305 	lsl.w	r3, r1, r5
 8014a06:	9310      	str	r3, [sp, #64]	@ 0x40
 8014a08:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014a0a:	e7ba      	b.n	8014982 <_strtod_l+0x6e2>
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014a10:	2301      	movs	r3, #1
 8014a12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014a14:	e7b5      	b.n	8014982 <_strtod_l+0x6e2>
 8014a16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014a18:	9805      	ldr	r0, [sp, #20]
 8014a1a:	462a      	mov	r2, r5
 8014a1c:	f7ff f9c8 	bl	8013db0 <__lshift>
 8014a20:	901a      	str	r0, [sp, #104]	@ 0x68
 8014a22:	2800      	cmp	r0, #0
 8014a24:	d1d9      	bne.n	80149da <_strtod_l+0x73a>
 8014a26:	e65a      	b.n	80146de <_strtod_l+0x43e>
 8014a28:	2e00      	cmp	r6, #0
 8014a2a:	dd07      	ble.n	8014a3c <_strtod_l+0x79c>
 8014a2c:	4649      	mov	r1, r9
 8014a2e:	9805      	ldr	r0, [sp, #20]
 8014a30:	4632      	mov	r2, r6
 8014a32:	f7ff f9bd 	bl	8013db0 <__lshift>
 8014a36:	4681      	mov	r9, r0
 8014a38:	2800      	cmp	r0, #0
 8014a3a:	d0d8      	beq.n	80149ee <_strtod_l+0x74e>
 8014a3c:	2f00      	cmp	r7, #0
 8014a3e:	dd08      	ble.n	8014a52 <_strtod_l+0x7b2>
 8014a40:	4641      	mov	r1, r8
 8014a42:	9805      	ldr	r0, [sp, #20]
 8014a44:	463a      	mov	r2, r7
 8014a46:	f7ff f9b3 	bl	8013db0 <__lshift>
 8014a4a:	4680      	mov	r8, r0
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	f43f ae46 	beq.w	80146de <_strtod_l+0x43e>
 8014a52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014a54:	9805      	ldr	r0, [sp, #20]
 8014a56:	464a      	mov	r2, r9
 8014a58:	f7ff fa32 	bl	8013ec0 <__mdiff>
 8014a5c:	4604      	mov	r4, r0
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	f43f ae3d 	beq.w	80146de <_strtod_l+0x43e>
 8014a64:	68c3      	ldr	r3, [r0, #12]
 8014a66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014a68:	2300      	movs	r3, #0
 8014a6a:	60c3      	str	r3, [r0, #12]
 8014a6c:	4641      	mov	r1, r8
 8014a6e:	f7ff fa0b 	bl	8013e88 <__mcmp>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	da46      	bge.n	8014b04 <_strtod_l+0x864>
 8014a76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014a78:	ea53 030a 	orrs.w	r3, r3, sl
 8014a7c:	d16c      	bne.n	8014b58 <_strtod_l+0x8b8>
 8014a7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d168      	bne.n	8014b58 <_strtod_l+0x8b8>
 8014a86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014a8a:	0d1b      	lsrs	r3, r3, #20
 8014a8c:	051b      	lsls	r3, r3, #20
 8014a8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014a92:	d961      	bls.n	8014b58 <_strtod_l+0x8b8>
 8014a94:	6963      	ldr	r3, [r4, #20]
 8014a96:	b913      	cbnz	r3, 8014a9e <_strtod_l+0x7fe>
 8014a98:	6923      	ldr	r3, [r4, #16]
 8014a9a:	2b01      	cmp	r3, #1
 8014a9c:	dd5c      	ble.n	8014b58 <_strtod_l+0x8b8>
 8014a9e:	4621      	mov	r1, r4
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	9805      	ldr	r0, [sp, #20]
 8014aa4:	f7ff f984 	bl	8013db0 <__lshift>
 8014aa8:	4641      	mov	r1, r8
 8014aaa:	4604      	mov	r4, r0
 8014aac:	f7ff f9ec 	bl	8013e88 <__mcmp>
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	dd51      	ble.n	8014b58 <_strtod_l+0x8b8>
 8014ab4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014ab8:	9a08      	ldr	r2, [sp, #32]
 8014aba:	0d1b      	lsrs	r3, r3, #20
 8014abc:	051b      	lsls	r3, r3, #20
 8014abe:	2a00      	cmp	r2, #0
 8014ac0:	d06b      	beq.n	8014b9a <_strtod_l+0x8fa>
 8014ac2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014ac6:	d868      	bhi.n	8014b9a <_strtod_l+0x8fa>
 8014ac8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014acc:	f67f ae9d 	bls.w	801480a <_strtod_l+0x56a>
 8014ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8014afc <_strtod_l+0x85c>)
 8014ad2:	4650      	mov	r0, sl
 8014ad4:	4659      	mov	r1, fp
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	f7fc fa8e 	bl	8010ff8 <__aeabi_dmul>
 8014adc:	4b08      	ldr	r3, [pc, #32]	@ (8014b00 <_strtod_l+0x860>)
 8014ade:	400b      	ands	r3, r1
 8014ae0:	4682      	mov	sl, r0
 8014ae2:	468b      	mov	fp, r1
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f47f ae05 	bne.w	80146f4 <_strtod_l+0x454>
 8014aea:	9a05      	ldr	r2, [sp, #20]
 8014aec:	2322      	movs	r3, #34	@ 0x22
 8014aee:	6013      	str	r3, [r2, #0]
 8014af0:	e600      	b.n	80146f4 <_strtod_l+0x454>
 8014af2:	bf00      	nop
 8014af4:	080173f0 	.word	0x080173f0
 8014af8:	fffffc02 	.word	0xfffffc02
 8014afc:	39500000 	.word	0x39500000
 8014b00:	7ff00000 	.word	0x7ff00000
 8014b04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014b08:	d165      	bne.n	8014bd6 <_strtod_l+0x936>
 8014b0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014b0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b10:	b35a      	cbz	r2, 8014b6a <_strtod_l+0x8ca>
 8014b12:	4a9f      	ldr	r2, [pc, #636]	@ (8014d90 <_strtod_l+0xaf0>)
 8014b14:	4293      	cmp	r3, r2
 8014b16:	d12b      	bne.n	8014b70 <_strtod_l+0x8d0>
 8014b18:	9b08      	ldr	r3, [sp, #32]
 8014b1a:	4651      	mov	r1, sl
 8014b1c:	b303      	cbz	r3, 8014b60 <_strtod_l+0x8c0>
 8014b1e:	4b9d      	ldr	r3, [pc, #628]	@ (8014d94 <_strtod_l+0xaf4>)
 8014b20:	465a      	mov	r2, fp
 8014b22:	4013      	ands	r3, r2
 8014b24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014b28:	f04f 32ff 	mov.w	r2, #4294967295
 8014b2c:	d81b      	bhi.n	8014b66 <_strtod_l+0x8c6>
 8014b2e:	0d1b      	lsrs	r3, r3, #20
 8014b30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014b34:	fa02 f303 	lsl.w	r3, r2, r3
 8014b38:	4299      	cmp	r1, r3
 8014b3a:	d119      	bne.n	8014b70 <_strtod_l+0x8d0>
 8014b3c:	4b96      	ldr	r3, [pc, #600]	@ (8014d98 <_strtod_l+0xaf8>)
 8014b3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d102      	bne.n	8014b4a <_strtod_l+0x8aa>
 8014b44:	3101      	adds	r1, #1
 8014b46:	f43f adca 	beq.w	80146de <_strtod_l+0x43e>
 8014b4a:	4b92      	ldr	r3, [pc, #584]	@ (8014d94 <_strtod_l+0xaf4>)
 8014b4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b4e:	401a      	ands	r2, r3
 8014b50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014b54:	f04f 0a00 	mov.w	sl, #0
 8014b58:	9b08      	ldr	r3, [sp, #32]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d1b8      	bne.n	8014ad0 <_strtod_l+0x830>
 8014b5e:	e5c9      	b.n	80146f4 <_strtod_l+0x454>
 8014b60:	f04f 33ff 	mov.w	r3, #4294967295
 8014b64:	e7e8      	b.n	8014b38 <_strtod_l+0x898>
 8014b66:	4613      	mov	r3, r2
 8014b68:	e7e6      	b.n	8014b38 <_strtod_l+0x898>
 8014b6a:	ea53 030a 	orrs.w	r3, r3, sl
 8014b6e:	d0a1      	beq.n	8014ab4 <_strtod_l+0x814>
 8014b70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014b72:	b1db      	cbz	r3, 8014bac <_strtod_l+0x90c>
 8014b74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b76:	4213      	tst	r3, r2
 8014b78:	d0ee      	beq.n	8014b58 <_strtod_l+0x8b8>
 8014b7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b7c:	9a08      	ldr	r2, [sp, #32]
 8014b7e:	4650      	mov	r0, sl
 8014b80:	4659      	mov	r1, fp
 8014b82:	b1bb      	cbz	r3, 8014bb4 <_strtod_l+0x914>
 8014b84:	f7ff fb6e 	bl	8014264 <sulp>
 8014b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014b8c:	ec53 2b10 	vmov	r2, r3, d0
 8014b90:	f7fc f87c 	bl	8010c8c <__adddf3>
 8014b94:	4682      	mov	sl, r0
 8014b96:	468b      	mov	fp, r1
 8014b98:	e7de      	b.n	8014b58 <_strtod_l+0x8b8>
 8014b9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014b9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014ba2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8014baa:	e7d5      	b.n	8014b58 <_strtod_l+0x8b8>
 8014bac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014bae:	ea13 0f0a 	tst.w	r3, sl
 8014bb2:	e7e1      	b.n	8014b78 <_strtod_l+0x8d8>
 8014bb4:	f7ff fb56 	bl	8014264 <sulp>
 8014bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014bbc:	ec53 2b10 	vmov	r2, r3, d0
 8014bc0:	f7fc f862 	bl	8010c88 <__aeabi_dsub>
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	4682      	mov	sl, r0
 8014bca:	468b      	mov	fp, r1
 8014bcc:	f7fc fc7c 	bl	80114c8 <__aeabi_dcmpeq>
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	d0c1      	beq.n	8014b58 <_strtod_l+0x8b8>
 8014bd4:	e619      	b.n	801480a <_strtod_l+0x56a>
 8014bd6:	4641      	mov	r1, r8
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f7ff facd 	bl	8014178 <__ratio>
 8014bde:	ec57 6b10 	vmov	r6, r7, d0
 8014be2:	2200      	movs	r2, #0
 8014be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014be8:	4630      	mov	r0, r6
 8014bea:	4639      	mov	r1, r7
 8014bec:	f7fc fc80 	bl	80114f0 <__aeabi_dcmple>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d06f      	beq.n	8014cd4 <_strtod_l+0xa34>
 8014bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d17a      	bne.n	8014cf0 <_strtod_l+0xa50>
 8014bfa:	f1ba 0f00 	cmp.w	sl, #0
 8014bfe:	d158      	bne.n	8014cb2 <_strtod_l+0xa12>
 8014c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d15a      	bne.n	8014cc0 <_strtod_l+0xa20>
 8014c0a:	4b64      	ldr	r3, [pc, #400]	@ (8014d9c <_strtod_l+0xafc>)
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	4630      	mov	r0, r6
 8014c10:	4639      	mov	r1, r7
 8014c12:	f7fc fc63 	bl	80114dc <__aeabi_dcmplt>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	d159      	bne.n	8014cce <_strtod_l+0xa2e>
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	4639      	mov	r1, r7
 8014c1e:	4b60      	ldr	r3, [pc, #384]	@ (8014da0 <_strtod_l+0xb00>)
 8014c20:	2200      	movs	r2, #0
 8014c22:	f7fc f9e9 	bl	8010ff8 <__aeabi_dmul>
 8014c26:	4606      	mov	r6, r0
 8014c28:	460f      	mov	r7, r1
 8014c2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014c2e:	9606      	str	r6, [sp, #24]
 8014c30:	9307      	str	r3, [sp, #28]
 8014c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c36:	4d57      	ldr	r5, [pc, #348]	@ (8014d94 <_strtod_l+0xaf4>)
 8014c38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c3e:	401d      	ands	r5, r3
 8014c40:	4b58      	ldr	r3, [pc, #352]	@ (8014da4 <_strtod_l+0xb04>)
 8014c42:	429d      	cmp	r5, r3
 8014c44:	f040 80b2 	bne.w	8014dac <_strtod_l+0xb0c>
 8014c48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014c4e:	ec4b ab10 	vmov	d0, sl, fp
 8014c52:	f7ff f9c9 	bl	8013fe8 <__ulp>
 8014c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c5a:	ec51 0b10 	vmov	r0, r1, d0
 8014c5e:	f7fc f9cb 	bl	8010ff8 <__aeabi_dmul>
 8014c62:	4652      	mov	r2, sl
 8014c64:	465b      	mov	r3, fp
 8014c66:	f7fc f811 	bl	8010c8c <__adddf3>
 8014c6a:	460b      	mov	r3, r1
 8014c6c:	4949      	ldr	r1, [pc, #292]	@ (8014d94 <_strtod_l+0xaf4>)
 8014c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8014da8 <_strtod_l+0xb08>)
 8014c70:	4019      	ands	r1, r3
 8014c72:	4291      	cmp	r1, r2
 8014c74:	4682      	mov	sl, r0
 8014c76:	d942      	bls.n	8014cfe <_strtod_l+0xa5e>
 8014c78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014c7a:	4b47      	ldr	r3, [pc, #284]	@ (8014d98 <_strtod_l+0xaf8>)
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d103      	bne.n	8014c88 <_strtod_l+0x9e8>
 8014c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c82:	3301      	adds	r3, #1
 8014c84:	f43f ad2b 	beq.w	80146de <_strtod_l+0x43e>
 8014c88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014d98 <_strtod_l+0xaf8>
 8014c8c:	f04f 3aff 	mov.w	sl, #4294967295
 8014c90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014c92:	9805      	ldr	r0, [sp, #20]
 8014c94:	f7fe fe74 	bl	8013980 <_Bfree>
 8014c98:	9805      	ldr	r0, [sp, #20]
 8014c9a:	4649      	mov	r1, r9
 8014c9c:	f7fe fe70 	bl	8013980 <_Bfree>
 8014ca0:	9805      	ldr	r0, [sp, #20]
 8014ca2:	4641      	mov	r1, r8
 8014ca4:	f7fe fe6c 	bl	8013980 <_Bfree>
 8014ca8:	9805      	ldr	r0, [sp, #20]
 8014caa:	4621      	mov	r1, r4
 8014cac:	f7fe fe68 	bl	8013980 <_Bfree>
 8014cb0:	e618      	b.n	80148e4 <_strtod_l+0x644>
 8014cb2:	f1ba 0f01 	cmp.w	sl, #1
 8014cb6:	d103      	bne.n	8014cc0 <_strtod_l+0xa20>
 8014cb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f43f ada5 	beq.w	801480a <_strtod_l+0x56a>
 8014cc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014d70 <_strtod_l+0xad0>
 8014cc4:	4f35      	ldr	r7, [pc, #212]	@ (8014d9c <_strtod_l+0xafc>)
 8014cc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014cca:	2600      	movs	r6, #0
 8014ccc:	e7b1      	b.n	8014c32 <_strtod_l+0x992>
 8014cce:	4f34      	ldr	r7, [pc, #208]	@ (8014da0 <_strtod_l+0xb00>)
 8014cd0:	2600      	movs	r6, #0
 8014cd2:	e7aa      	b.n	8014c2a <_strtod_l+0x98a>
 8014cd4:	4b32      	ldr	r3, [pc, #200]	@ (8014da0 <_strtod_l+0xb00>)
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	4639      	mov	r1, r7
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f7fc f98c 	bl	8010ff8 <__aeabi_dmul>
 8014ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	460f      	mov	r7, r1
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d09f      	beq.n	8014c2a <_strtod_l+0x98a>
 8014cea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014cee:	e7a0      	b.n	8014c32 <_strtod_l+0x992>
 8014cf0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014d78 <_strtod_l+0xad8>
 8014cf4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014cf8:	ec57 6b17 	vmov	r6, r7, d7
 8014cfc:	e799      	b.n	8014c32 <_strtod_l+0x992>
 8014cfe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014d02:	9b08      	ldr	r3, [sp, #32]
 8014d04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d1c1      	bne.n	8014c90 <_strtod_l+0x9f0>
 8014d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014d10:	0d1b      	lsrs	r3, r3, #20
 8014d12:	051b      	lsls	r3, r3, #20
 8014d14:	429d      	cmp	r5, r3
 8014d16:	d1bb      	bne.n	8014c90 <_strtod_l+0x9f0>
 8014d18:	4630      	mov	r0, r6
 8014d1a:	4639      	mov	r1, r7
 8014d1c:	f7fc fccc 	bl	80116b8 <__aeabi_d2lz>
 8014d20:	f7fc f93c 	bl	8010f9c <__aeabi_l2d>
 8014d24:	4602      	mov	r2, r0
 8014d26:	460b      	mov	r3, r1
 8014d28:	4630      	mov	r0, r6
 8014d2a:	4639      	mov	r1, r7
 8014d2c:	f7fb ffac 	bl	8010c88 <__aeabi_dsub>
 8014d30:	460b      	mov	r3, r1
 8014d32:	4602      	mov	r2, r0
 8014d34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014d38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d3e:	ea46 060a 	orr.w	r6, r6, sl
 8014d42:	431e      	orrs	r6, r3
 8014d44:	d06f      	beq.n	8014e26 <_strtod_l+0xb86>
 8014d46:	a30e      	add	r3, pc, #56	@ (adr r3, 8014d80 <_strtod_l+0xae0>)
 8014d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4c:	f7fc fbc6 	bl	80114dc <__aeabi_dcmplt>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	f47f accf 	bne.w	80146f4 <_strtod_l+0x454>
 8014d56:	a30c      	add	r3, pc, #48	@ (adr r3, 8014d88 <_strtod_l+0xae8>)
 8014d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014d60:	f7fc fbda 	bl	8011518 <__aeabi_dcmpgt>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d093      	beq.n	8014c90 <_strtod_l+0x9f0>
 8014d68:	e4c4      	b.n	80146f4 <_strtod_l+0x454>
 8014d6a:	bf00      	nop
 8014d6c:	f3af 8000 	nop.w
 8014d70:	00000000 	.word	0x00000000
 8014d74:	bff00000 	.word	0xbff00000
 8014d78:	00000000 	.word	0x00000000
 8014d7c:	3ff00000 	.word	0x3ff00000
 8014d80:	94a03595 	.word	0x94a03595
 8014d84:	3fdfffff 	.word	0x3fdfffff
 8014d88:	35afe535 	.word	0x35afe535
 8014d8c:	3fe00000 	.word	0x3fe00000
 8014d90:	000fffff 	.word	0x000fffff
 8014d94:	7ff00000 	.word	0x7ff00000
 8014d98:	7fefffff 	.word	0x7fefffff
 8014d9c:	3ff00000 	.word	0x3ff00000
 8014da0:	3fe00000 	.word	0x3fe00000
 8014da4:	7fe00000 	.word	0x7fe00000
 8014da8:	7c9fffff 	.word	0x7c9fffff
 8014dac:	9b08      	ldr	r3, [sp, #32]
 8014dae:	b323      	cbz	r3, 8014dfa <_strtod_l+0xb5a>
 8014db0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8014db4:	d821      	bhi.n	8014dfa <_strtod_l+0xb5a>
 8014db6:	a328      	add	r3, pc, #160	@ (adr r3, 8014e58 <_strtod_l+0xbb8>)
 8014db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	f7fc fb96 	bl	80114f0 <__aeabi_dcmple>
 8014dc4:	b1a0      	cbz	r0, 8014df0 <_strtod_l+0xb50>
 8014dc6:	4639      	mov	r1, r7
 8014dc8:	4630      	mov	r0, r6
 8014dca:	f7fc fbed 	bl	80115a8 <__aeabi_d2uiz>
 8014dce:	2801      	cmp	r0, #1
 8014dd0:	bf38      	it	cc
 8014dd2:	2001      	movcc	r0, #1
 8014dd4:	f7fc f896 	bl	8010f04 <__aeabi_ui2d>
 8014dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014dda:	4606      	mov	r6, r0
 8014ddc:	460f      	mov	r7, r1
 8014dde:	b9fb      	cbnz	r3, 8014e20 <_strtod_l+0xb80>
 8014de0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014de4:	9014      	str	r0, [sp, #80]	@ 0x50
 8014de6:	9315      	str	r3, [sp, #84]	@ 0x54
 8014de8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8014dec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014df0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014df2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8014df6:	1b5b      	subs	r3, r3, r5
 8014df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8014dfa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014dfe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8014e02:	f7ff f8f1 	bl	8013fe8 <__ulp>
 8014e06:	4650      	mov	r0, sl
 8014e08:	ec53 2b10 	vmov	r2, r3, d0
 8014e0c:	4659      	mov	r1, fp
 8014e0e:	f7fc f8f3 	bl	8010ff8 <__aeabi_dmul>
 8014e12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014e16:	f7fb ff39 	bl	8010c8c <__adddf3>
 8014e1a:	4682      	mov	sl, r0
 8014e1c:	468b      	mov	fp, r1
 8014e1e:	e770      	b.n	8014d02 <_strtod_l+0xa62>
 8014e20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8014e24:	e7e0      	b.n	8014de8 <_strtod_l+0xb48>
 8014e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8014e60 <_strtod_l+0xbc0>)
 8014e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2c:	f7fc fb56 	bl	80114dc <__aeabi_dcmplt>
 8014e30:	e798      	b.n	8014d64 <_strtod_l+0xac4>
 8014e32:	2300      	movs	r3, #0
 8014e34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	f7ff ba6d 	b.w	801431a <_strtod_l+0x7a>
 8014e40:	2a65      	cmp	r2, #101	@ 0x65
 8014e42:	f43f ab66 	beq.w	8014512 <_strtod_l+0x272>
 8014e46:	2a45      	cmp	r2, #69	@ 0x45
 8014e48:	f43f ab63 	beq.w	8014512 <_strtod_l+0x272>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	f7ff bb9e 	b.w	801458e <_strtod_l+0x2ee>
 8014e52:	bf00      	nop
 8014e54:	f3af 8000 	nop.w
 8014e58:	ffc00000 	.word	0xffc00000
 8014e5c:	41dfffff 	.word	0x41dfffff
 8014e60:	94a03595 	.word	0x94a03595
 8014e64:	3fcfffff 	.word	0x3fcfffff

08014e68 <_strtod_r>:
 8014e68:	4b01      	ldr	r3, [pc, #4]	@ (8014e70 <_strtod_r+0x8>)
 8014e6a:	f7ff ba19 	b.w	80142a0 <_strtod_l>
 8014e6e:	bf00      	nop
 8014e70:	20000070 	.word	0x20000070

08014e74 <_strtol_l.constprop.0>:
 8014e74:	2b24      	cmp	r3, #36	@ 0x24
 8014e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e7a:	4686      	mov	lr, r0
 8014e7c:	4690      	mov	r8, r2
 8014e7e:	d801      	bhi.n	8014e84 <_strtol_l.constprop.0+0x10>
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d106      	bne.n	8014e92 <_strtol_l.constprop.0+0x1e>
 8014e84:	f7fd fdba 	bl	80129fc <__errno>
 8014e88:	2316      	movs	r3, #22
 8014e8a:	6003      	str	r3, [r0, #0]
 8014e8c:	2000      	movs	r0, #0
 8014e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e92:	4834      	ldr	r0, [pc, #208]	@ (8014f64 <_strtol_l.constprop.0+0xf0>)
 8014e94:	460d      	mov	r5, r1
 8014e96:	462a      	mov	r2, r5
 8014e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e9c:	5d06      	ldrb	r6, [r0, r4]
 8014e9e:	f016 0608 	ands.w	r6, r6, #8
 8014ea2:	d1f8      	bne.n	8014e96 <_strtol_l.constprop.0+0x22>
 8014ea4:	2c2d      	cmp	r4, #45	@ 0x2d
 8014ea6:	d12d      	bne.n	8014f04 <_strtol_l.constprop.0+0x90>
 8014ea8:	782c      	ldrb	r4, [r5, #0]
 8014eaa:	2601      	movs	r6, #1
 8014eac:	1c95      	adds	r5, r2, #2
 8014eae:	f033 0210 	bics.w	r2, r3, #16
 8014eb2:	d109      	bne.n	8014ec8 <_strtol_l.constprop.0+0x54>
 8014eb4:	2c30      	cmp	r4, #48	@ 0x30
 8014eb6:	d12a      	bne.n	8014f0e <_strtol_l.constprop.0+0x9a>
 8014eb8:	782a      	ldrb	r2, [r5, #0]
 8014eba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014ebe:	2a58      	cmp	r2, #88	@ 0x58
 8014ec0:	d125      	bne.n	8014f0e <_strtol_l.constprop.0+0x9a>
 8014ec2:	786c      	ldrb	r4, [r5, #1]
 8014ec4:	2310      	movs	r3, #16
 8014ec6:	3502      	adds	r5, #2
 8014ec8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014ecc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	fbbc f9f3 	udiv	r9, ip, r3
 8014ed6:	4610      	mov	r0, r2
 8014ed8:	fb03 ca19 	mls	sl, r3, r9, ip
 8014edc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014ee0:	2f09      	cmp	r7, #9
 8014ee2:	d81b      	bhi.n	8014f1c <_strtol_l.constprop.0+0xa8>
 8014ee4:	463c      	mov	r4, r7
 8014ee6:	42a3      	cmp	r3, r4
 8014ee8:	dd27      	ble.n	8014f3a <_strtol_l.constprop.0+0xc6>
 8014eea:	1c57      	adds	r7, r2, #1
 8014eec:	d007      	beq.n	8014efe <_strtol_l.constprop.0+0x8a>
 8014eee:	4581      	cmp	r9, r0
 8014ef0:	d320      	bcc.n	8014f34 <_strtol_l.constprop.0+0xc0>
 8014ef2:	d101      	bne.n	8014ef8 <_strtol_l.constprop.0+0x84>
 8014ef4:	45a2      	cmp	sl, r4
 8014ef6:	db1d      	blt.n	8014f34 <_strtol_l.constprop.0+0xc0>
 8014ef8:	fb00 4003 	mla	r0, r0, r3, r4
 8014efc:	2201      	movs	r2, #1
 8014efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f02:	e7eb      	b.n	8014edc <_strtol_l.constprop.0+0x68>
 8014f04:	2c2b      	cmp	r4, #43	@ 0x2b
 8014f06:	bf04      	itt	eq
 8014f08:	782c      	ldrbeq	r4, [r5, #0]
 8014f0a:	1c95      	addeq	r5, r2, #2
 8014f0c:	e7cf      	b.n	8014eae <_strtol_l.constprop.0+0x3a>
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d1da      	bne.n	8014ec8 <_strtol_l.constprop.0+0x54>
 8014f12:	2c30      	cmp	r4, #48	@ 0x30
 8014f14:	bf0c      	ite	eq
 8014f16:	2308      	moveq	r3, #8
 8014f18:	230a      	movne	r3, #10
 8014f1a:	e7d5      	b.n	8014ec8 <_strtol_l.constprop.0+0x54>
 8014f1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014f20:	2f19      	cmp	r7, #25
 8014f22:	d801      	bhi.n	8014f28 <_strtol_l.constprop.0+0xb4>
 8014f24:	3c37      	subs	r4, #55	@ 0x37
 8014f26:	e7de      	b.n	8014ee6 <_strtol_l.constprop.0+0x72>
 8014f28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014f2c:	2f19      	cmp	r7, #25
 8014f2e:	d804      	bhi.n	8014f3a <_strtol_l.constprop.0+0xc6>
 8014f30:	3c57      	subs	r4, #87	@ 0x57
 8014f32:	e7d8      	b.n	8014ee6 <_strtol_l.constprop.0+0x72>
 8014f34:	f04f 32ff 	mov.w	r2, #4294967295
 8014f38:	e7e1      	b.n	8014efe <_strtol_l.constprop.0+0x8a>
 8014f3a:	1c53      	adds	r3, r2, #1
 8014f3c:	d108      	bne.n	8014f50 <_strtol_l.constprop.0+0xdc>
 8014f3e:	2322      	movs	r3, #34	@ 0x22
 8014f40:	f8ce 3000 	str.w	r3, [lr]
 8014f44:	4660      	mov	r0, ip
 8014f46:	f1b8 0f00 	cmp.w	r8, #0
 8014f4a:	d0a0      	beq.n	8014e8e <_strtol_l.constprop.0+0x1a>
 8014f4c:	1e69      	subs	r1, r5, #1
 8014f4e:	e006      	b.n	8014f5e <_strtol_l.constprop.0+0xea>
 8014f50:	b106      	cbz	r6, 8014f54 <_strtol_l.constprop.0+0xe0>
 8014f52:	4240      	negs	r0, r0
 8014f54:	f1b8 0f00 	cmp.w	r8, #0
 8014f58:	d099      	beq.n	8014e8e <_strtol_l.constprop.0+0x1a>
 8014f5a:	2a00      	cmp	r2, #0
 8014f5c:	d1f6      	bne.n	8014f4c <_strtol_l.constprop.0+0xd8>
 8014f5e:	f8c8 1000 	str.w	r1, [r8]
 8014f62:	e794      	b.n	8014e8e <_strtol_l.constprop.0+0x1a>
 8014f64:	08017419 	.word	0x08017419

08014f68 <_strtol_r>:
 8014f68:	f7ff bf84 	b.w	8014e74 <_strtol_l.constprop.0>

08014f6c <__ssputs_r>:
 8014f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f70:	688e      	ldr	r6, [r1, #8]
 8014f72:	461f      	mov	r7, r3
 8014f74:	42be      	cmp	r6, r7
 8014f76:	680b      	ldr	r3, [r1, #0]
 8014f78:	4682      	mov	sl, r0
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	4690      	mov	r8, r2
 8014f7e:	d82d      	bhi.n	8014fdc <__ssputs_r+0x70>
 8014f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014f88:	d026      	beq.n	8014fd8 <__ssputs_r+0x6c>
 8014f8a:	6965      	ldr	r5, [r4, #20]
 8014f8c:	6909      	ldr	r1, [r1, #16]
 8014f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f92:	eba3 0901 	sub.w	r9, r3, r1
 8014f96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014f9a:	1c7b      	adds	r3, r7, #1
 8014f9c:	444b      	add	r3, r9
 8014f9e:	106d      	asrs	r5, r5, #1
 8014fa0:	429d      	cmp	r5, r3
 8014fa2:	bf38      	it	cc
 8014fa4:	461d      	movcc	r5, r3
 8014fa6:	0553      	lsls	r3, r2, #21
 8014fa8:	d527      	bpl.n	8014ffa <__ssputs_r+0x8e>
 8014faa:	4629      	mov	r1, r5
 8014fac:	f7fe fc1c 	bl	80137e8 <_malloc_r>
 8014fb0:	4606      	mov	r6, r0
 8014fb2:	b360      	cbz	r0, 801500e <__ssputs_r+0xa2>
 8014fb4:	6921      	ldr	r1, [r4, #16]
 8014fb6:	464a      	mov	r2, r9
 8014fb8:	f000 fa18 	bl	80153ec <memcpy>
 8014fbc:	89a3      	ldrh	r3, [r4, #12]
 8014fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014fc6:	81a3      	strh	r3, [r4, #12]
 8014fc8:	6126      	str	r6, [r4, #16]
 8014fca:	6165      	str	r5, [r4, #20]
 8014fcc:	444e      	add	r6, r9
 8014fce:	eba5 0509 	sub.w	r5, r5, r9
 8014fd2:	6026      	str	r6, [r4, #0]
 8014fd4:	60a5      	str	r5, [r4, #8]
 8014fd6:	463e      	mov	r6, r7
 8014fd8:	42be      	cmp	r6, r7
 8014fda:	d900      	bls.n	8014fde <__ssputs_r+0x72>
 8014fdc:	463e      	mov	r6, r7
 8014fde:	6820      	ldr	r0, [r4, #0]
 8014fe0:	4632      	mov	r2, r6
 8014fe2:	4641      	mov	r1, r8
 8014fe4:	f000 f9c6 	bl	8015374 <memmove>
 8014fe8:	68a3      	ldr	r3, [r4, #8]
 8014fea:	1b9b      	subs	r3, r3, r6
 8014fec:	60a3      	str	r3, [r4, #8]
 8014fee:	6823      	ldr	r3, [r4, #0]
 8014ff0:	4433      	add	r3, r6
 8014ff2:	6023      	str	r3, [r4, #0]
 8014ff4:	2000      	movs	r0, #0
 8014ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ffa:	462a      	mov	r2, r5
 8014ffc:	f000 fd89 	bl	8015b12 <_realloc_r>
 8015000:	4606      	mov	r6, r0
 8015002:	2800      	cmp	r0, #0
 8015004:	d1e0      	bne.n	8014fc8 <__ssputs_r+0x5c>
 8015006:	6921      	ldr	r1, [r4, #16]
 8015008:	4650      	mov	r0, sl
 801500a:	f7fe fb79 	bl	8013700 <_free_r>
 801500e:	230c      	movs	r3, #12
 8015010:	f8ca 3000 	str.w	r3, [sl]
 8015014:	89a3      	ldrh	r3, [r4, #12]
 8015016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801501a:	81a3      	strh	r3, [r4, #12]
 801501c:	f04f 30ff 	mov.w	r0, #4294967295
 8015020:	e7e9      	b.n	8014ff6 <__ssputs_r+0x8a>
	...

08015024 <_svfiprintf_r>:
 8015024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015028:	4698      	mov	r8, r3
 801502a:	898b      	ldrh	r3, [r1, #12]
 801502c:	061b      	lsls	r3, r3, #24
 801502e:	b09d      	sub	sp, #116	@ 0x74
 8015030:	4607      	mov	r7, r0
 8015032:	460d      	mov	r5, r1
 8015034:	4614      	mov	r4, r2
 8015036:	d510      	bpl.n	801505a <_svfiprintf_r+0x36>
 8015038:	690b      	ldr	r3, [r1, #16]
 801503a:	b973      	cbnz	r3, 801505a <_svfiprintf_r+0x36>
 801503c:	2140      	movs	r1, #64	@ 0x40
 801503e:	f7fe fbd3 	bl	80137e8 <_malloc_r>
 8015042:	6028      	str	r0, [r5, #0]
 8015044:	6128      	str	r0, [r5, #16]
 8015046:	b930      	cbnz	r0, 8015056 <_svfiprintf_r+0x32>
 8015048:	230c      	movs	r3, #12
 801504a:	603b      	str	r3, [r7, #0]
 801504c:	f04f 30ff 	mov.w	r0, #4294967295
 8015050:	b01d      	add	sp, #116	@ 0x74
 8015052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015056:	2340      	movs	r3, #64	@ 0x40
 8015058:	616b      	str	r3, [r5, #20]
 801505a:	2300      	movs	r3, #0
 801505c:	9309      	str	r3, [sp, #36]	@ 0x24
 801505e:	2320      	movs	r3, #32
 8015060:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015064:	f8cd 800c 	str.w	r8, [sp, #12]
 8015068:	2330      	movs	r3, #48	@ 0x30
 801506a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015208 <_svfiprintf_r+0x1e4>
 801506e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015072:	f04f 0901 	mov.w	r9, #1
 8015076:	4623      	mov	r3, r4
 8015078:	469a      	mov	sl, r3
 801507a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801507e:	b10a      	cbz	r2, 8015084 <_svfiprintf_r+0x60>
 8015080:	2a25      	cmp	r2, #37	@ 0x25
 8015082:	d1f9      	bne.n	8015078 <_svfiprintf_r+0x54>
 8015084:	ebba 0b04 	subs.w	fp, sl, r4
 8015088:	d00b      	beq.n	80150a2 <_svfiprintf_r+0x7e>
 801508a:	465b      	mov	r3, fp
 801508c:	4622      	mov	r2, r4
 801508e:	4629      	mov	r1, r5
 8015090:	4638      	mov	r0, r7
 8015092:	f7ff ff6b 	bl	8014f6c <__ssputs_r>
 8015096:	3001      	adds	r0, #1
 8015098:	f000 80a7 	beq.w	80151ea <_svfiprintf_r+0x1c6>
 801509c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801509e:	445a      	add	r2, fp
 80150a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80150a2:	f89a 3000 	ldrb.w	r3, [sl]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	f000 809f 	beq.w	80151ea <_svfiprintf_r+0x1c6>
 80150ac:	2300      	movs	r3, #0
 80150ae:	f04f 32ff 	mov.w	r2, #4294967295
 80150b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150b6:	f10a 0a01 	add.w	sl, sl, #1
 80150ba:	9304      	str	r3, [sp, #16]
 80150bc:	9307      	str	r3, [sp, #28]
 80150be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80150c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80150c4:	4654      	mov	r4, sl
 80150c6:	2205      	movs	r2, #5
 80150c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150cc:	484e      	ldr	r0, [pc, #312]	@ (8015208 <_svfiprintf_r+0x1e4>)
 80150ce:	f7fb fd7f 	bl	8010bd0 <memchr>
 80150d2:	9a04      	ldr	r2, [sp, #16]
 80150d4:	b9d8      	cbnz	r0, 801510e <_svfiprintf_r+0xea>
 80150d6:	06d0      	lsls	r0, r2, #27
 80150d8:	bf44      	itt	mi
 80150da:	2320      	movmi	r3, #32
 80150dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150e0:	0711      	lsls	r1, r2, #28
 80150e2:	bf44      	itt	mi
 80150e4:	232b      	movmi	r3, #43	@ 0x2b
 80150e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80150ea:	f89a 3000 	ldrb.w	r3, [sl]
 80150ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80150f0:	d015      	beq.n	801511e <_svfiprintf_r+0xfa>
 80150f2:	9a07      	ldr	r2, [sp, #28]
 80150f4:	4654      	mov	r4, sl
 80150f6:	2000      	movs	r0, #0
 80150f8:	f04f 0c0a 	mov.w	ip, #10
 80150fc:	4621      	mov	r1, r4
 80150fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015102:	3b30      	subs	r3, #48	@ 0x30
 8015104:	2b09      	cmp	r3, #9
 8015106:	d94b      	bls.n	80151a0 <_svfiprintf_r+0x17c>
 8015108:	b1b0      	cbz	r0, 8015138 <_svfiprintf_r+0x114>
 801510a:	9207      	str	r2, [sp, #28]
 801510c:	e014      	b.n	8015138 <_svfiprintf_r+0x114>
 801510e:	eba0 0308 	sub.w	r3, r0, r8
 8015112:	fa09 f303 	lsl.w	r3, r9, r3
 8015116:	4313      	orrs	r3, r2
 8015118:	9304      	str	r3, [sp, #16]
 801511a:	46a2      	mov	sl, r4
 801511c:	e7d2      	b.n	80150c4 <_svfiprintf_r+0xa0>
 801511e:	9b03      	ldr	r3, [sp, #12]
 8015120:	1d19      	adds	r1, r3, #4
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	9103      	str	r1, [sp, #12]
 8015126:	2b00      	cmp	r3, #0
 8015128:	bfbb      	ittet	lt
 801512a:	425b      	neglt	r3, r3
 801512c:	f042 0202 	orrlt.w	r2, r2, #2
 8015130:	9307      	strge	r3, [sp, #28]
 8015132:	9307      	strlt	r3, [sp, #28]
 8015134:	bfb8      	it	lt
 8015136:	9204      	strlt	r2, [sp, #16]
 8015138:	7823      	ldrb	r3, [r4, #0]
 801513a:	2b2e      	cmp	r3, #46	@ 0x2e
 801513c:	d10a      	bne.n	8015154 <_svfiprintf_r+0x130>
 801513e:	7863      	ldrb	r3, [r4, #1]
 8015140:	2b2a      	cmp	r3, #42	@ 0x2a
 8015142:	d132      	bne.n	80151aa <_svfiprintf_r+0x186>
 8015144:	9b03      	ldr	r3, [sp, #12]
 8015146:	1d1a      	adds	r2, r3, #4
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	9203      	str	r2, [sp, #12]
 801514c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015150:	3402      	adds	r4, #2
 8015152:	9305      	str	r3, [sp, #20]
 8015154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015218 <_svfiprintf_r+0x1f4>
 8015158:	7821      	ldrb	r1, [r4, #0]
 801515a:	2203      	movs	r2, #3
 801515c:	4650      	mov	r0, sl
 801515e:	f7fb fd37 	bl	8010bd0 <memchr>
 8015162:	b138      	cbz	r0, 8015174 <_svfiprintf_r+0x150>
 8015164:	9b04      	ldr	r3, [sp, #16]
 8015166:	eba0 000a 	sub.w	r0, r0, sl
 801516a:	2240      	movs	r2, #64	@ 0x40
 801516c:	4082      	lsls	r2, r0
 801516e:	4313      	orrs	r3, r2
 8015170:	3401      	adds	r4, #1
 8015172:	9304      	str	r3, [sp, #16]
 8015174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015178:	4824      	ldr	r0, [pc, #144]	@ (801520c <_svfiprintf_r+0x1e8>)
 801517a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801517e:	2206      	movs	r2, #6
 8015180:	f7fb fd26 	bl	8010bd0 <memchr>
 8015184:	2800      	cmp	r0, #0
 8015186:	d036      	beq.n	80151f6 <_svfiprintf_r+0x1d2>
 8015188:	4b21      	ldr	r3, [pc, #132]	@ (8015210 <_svfiprintf_r+0x1ec>)
 801518a:	bb1b      	cbnz	r3, 80151d4 <_svfiprintf_r+0x1b0>
 801518c:	9b03      	ldr	r3, [sp, #12]
 801518e:	3307      	adds	r3, #7
 8015190:	f023 0307 	bic.w	r3, r3, #7
 8015194:	3308      	adds	r3, #8
 8015196:	9303      	str	r3, [sp, #12]
 8015198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801519a:	4433      	add	r3, r6
 801519c:	9309      	str	r3, [sp, #36]	@ 0x24
 801519e:	e76a      	b.n	8015076 <_svfiprintf_r+0x52>
 80151a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80151a4:	460c      	mov	r4, r1
 80151a6:	2001      	movs	r0, #1
 80151a8:	e7a8      	b.n	80150fc <_svfiprintf_r+0xd8>
 80151aa:	2300      	movs	r3, #0
 80151ac:	3401      	adds	r4, #1
 80151ae:	9305      	str	r3, [sp, #20]
 80151b0:	4619      	mov	r1, r3
 80151b2:	f04f 0c0a 	mov.w	ip, #10
 80151b6:	4620      	mov	r0, r4
 80151b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151bc:	3a30      	subs	r2, #48	@ 0x30
 80151be:	2a09      	cmp	r2, #9
 80151c0:	d903      	bls.n	80151ca <_svfiprintf_r+0x1a6>
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d0c6      	beq.n	8015154 <_svfiprintf_r+0x130>
 80151c6:	9105      	str	r1, [sp, #20]
 80151c8:	e7c4      	b.n	8015154 <_svfiprintf_r+0x130>
 80151ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80151ce:	4604      	mov	r4, r0
 80151d0:	2301      	movs	r3, #1
 80151d2:	e7f0      	b.n	80151b6 <_svfiprintf_r+0x192>
 80151d4:	ab03      	add	r3, sp, #12
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	462a      	mov	r2, r5
 80151da:	4b0e      	ldr	r3, [pc, #56]	@ (8015214 <_svfiprintf_r+0x1f0>)
 80151dc:	a904      	add	r1, sp, #16
 80151de:	4638      	mov	r0, r7
 80151e0:	f7fc fcc8 	bl	8011b74 <_printf_float>
 80151e4:	1c42      	adds	r2, r0, #1
 80151e6:	4606      	mov	r6, r0
 80151e8:	d1d6      	bne.n	8015198 <_svfiprintf_r+0x174>
 80151ea:	89ab      	ldrh	r3, [r5, #12]
 80151ec:	065b      	lsls	r3, r3, #25
 80151ee:	f53f af2d 	bmi.w	801504c <_svfiprintf_r+0x28>
 80151f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151f4:	e72c      	b.n	8015050 <_svfiprintf_r+0x2c>
 80151f6:	ab03      	add	r3, sp, #12
 80151f8:	9300      	str	r3, [sp, #0]
 80151fa:	462a      	mov	r2, r5
 80151fc:	4b05      	ldr	r3, [pc, #20]	@ (8015214 <_svfiprintf_r+0x1f0>)
 80151fe:	a904      	add	r1, sp, #16
 8015200:	4638      	mov	r0, r7
 8015202:	f7fc ff4f 	bl	80120a4 <_printf_i>
 8015206:	e7ed      	b.n	80151e4 <_svfiprintf_r+0x1c0>
 8015208:	08017519 	.word	0x08017519
 801520c:	08017523 	.word	0x08017523
 8015210:	08011b75 	.word	0x08011b75
 8015214:	08014f6d 	.word	0x08014f6d
 8015218:	0801751f 	.word	0x0801751f

0801521c <__sflush_r>:
 801521c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015224:	0716      	lsls	r6, r2, #28
 8015226:	4605      	mov	r5, r0
 8015228:	460c      	mov	r4, r1
 801522a:	d454      	bmi.n	80152d6 <__sflush_r+0xba>
 801522c:	684b      	ldr	r3, [r1, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	dc02      	bgt.n	8015238 <__sflush_r+0x1c>
 8015232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015234:	2b00      	cmp	r3, #0
 8015236:	dd48      	ble.n	80152ca <__sflush_r+0xae>
 8015238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801523a:	2e00      	cmp	r6, #0
 801523c:	d045      	beq.n	80152ca <__sflush_r+0xae>
 801523e:	2300      	movs	r3, #0
 8015240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015244:	682f      	ldr	r7, [r5, #0]
 8015246:	6a21      	ldr	r1, [r4, #32]
 8015248:	602b      	str	r3, [r5, #0]
 801524a:	d030      	beq.n	80152ae <__sflush_r+0x92>
 801524c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801524e:	89a3      	ldrh	r3, [r4, #12]
 8015250:	0759      	lsls	r1, r3, #29
 8015252:	d505      	bpl.n	8015260 <__sflush_r+0x44>
 8015254:	6863      	ldr	r3, [r4, #4]
 8015256:	1ad2      	subs	r2, r2, r3
 8015258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801525a:	b10b      	cbz	r3, 8015260 <__sflush_r+0x44>
 801525c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801525e:	1ad2      	subs	r2, r2, r3
 8015260:	2300      	movs	r3, #0
 8015262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015264:	6a21      	ldr	r1, [r4, #32]
 8015266:	4628      	mov	r0, r5
 8015268:	47b0      	blx	r6
 801526a:	1c43      	adds	r3, r0, #1
 801526c:	89a3      	ldrh	r3, [r4, #12]
 801526e:	d106      	bne.n	801527e <__sflush_r+0x62>
 8015270:	6829      	ldr	r1, [r5, #0]
 8015272:	291d      	cmp	r1, #29
 8015274:	d82b      	bhi.n	80152ce <__sflush_r+0xb2>
 8015276:	4a2a      	ldr	r2, [pc, #168]	@ (8015320 <__sflush_r+0x104>)
 8015278:	410a      	asrs	r2, r1
 801527a:	07d6      	lsls	r6, r2, #31
 801527c:	d427      	bmi.n	80152ce <__sflush_r+0xb2>
 801527e:	2200      	movs	r2, #0
 8015280:	6062      	str	r2, [r4, #4]
 8015282:	04d9      	lsls	r1, r3, #19
 8015284:	6922      	ldr	r2, [r4, #16]
 8015286:	6022      	str	r2, [r4, #0]
 8015288:	d504      	bpl.n	8015294 <__sflush_r+0x78>
 801528a:	1c42      	adds	r2, r0, #1
 801528c:	d101      	bne.n	8015292 <__sflush_r+0x76>
 801528e:	682b      	ldr	r3, [r5, #0]
 8015290:	b903      	cbnz	r3, 8015294 <__sflush_r+0x78>
 8015292:	6560      	str	r0, [r4, #84]	@ 0x54
 8015294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015296:	602f      	str	r7, [r5, #0]
 8015298:	b1b9      	cbz	r1, 80152ca <__sflush_r+0xae>
 801529a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801529e:	4299      	cmp	r1, r3
 80152a0:	d002      	beq.n	80152a8 <__sflush_r+0x8c>
 80152a2:	4628      	mov	r0, r5
 80152a4:	f7fe fa2c 	bl	8013700 <_free_r>
 80152a8:	2300      	movs	r3, #0
 80152aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80152ac:	e00d      	b.n	80152ca <__sflush_r+0xae>
 80152ae:	2301      	movs	r3, #1
 80152b0:	4628      	mov	r0, r5
 80152b2:	47b0      	blx	r6
 80152b4:	4602      	mov	r2, r0
 80152b6:	1c50      	adds	r0, r2, #1
 80152b8:	d1c9      	bne.n	801524e <__sflush_r+0x32>
 80152ba:	682b      	ldr	r3, [r5, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d0c6      	beq.n	801524e <__sflush_r+0x32>
 80152c0:	2b1d      	cmp	r3, #29
 80152c2:	d001      	beq.n	80152c8 <__sflush_r+0xac>
 80152c4:	2b16      	cmp	r3, #22
 80152c6:	d11e      	bne.n	8015306 <__sflush_r+0xea>
 80152c8:	602f      	str	r7, [r5, #0]
 80152ca:	2000      	movs	r0, #0
 80152cc:	e022      	b.n	8015314 <__sflush_r+0xf8>
 80152ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152d2:	b21b      	sxth	r3, r3
 80152d4:	e01b      	b.n	801530e <__sflush_r+0xf2>
 80152d6:	690f      	ldr	r7, [r1, #16]
 80152d8:	2f00      	cmp	r7, #0
 80152da:	d0f6      	beq.n	80152ca <__sflush_r+0xae>
 80152dc:	0793      	lsls	r3, r2, #30
 80152de:	680e      	ldr	r6, [r1, #0]
 80152e0:	bf08      	it	eq
 80152e2:	694b      	ldreq	r3, [r1, #20]
 80152e4:	600f      	str	r7, [r1, #0]
 80152e6:	bf18      	it	ne
 80152e8:	2300      	movne	r3, #0
 80152ea:	eba6 0807 	sub.w	r8, r6, r7
 80152ee:	608b      	str	r3, [r1, #8]
 80152f0:	f1b8 0f00 	cmp.w	r8, #0
 80152f4:	dde9      	ble.n	80152ca <__sflush_r+0xae>
 80152f6:	6a21      	ldr	r1, [r4, #32]
 80152f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80152fa:	4643      	mov	r3, r8
 80152fc:	463a      	mov	r2, r7
 80152fe:	4628      	mov	r0, r5
 8015300:	47b0      	blx	r6
 8015302:	2800      	cmp	r0, #0
 8015304:	dc08      	bgt.n	8015318 <__sflush_r+0xfc>
 8015306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801530a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801530e:	81a3      	strh	r3, [r4, #12]
 8015310:	f04f 30ff 	mov.w	r0, #4294967295
 8015314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015318:	4407      	add	r7, r0
 801531a:	eba8 0800 	sub.w	r8, r8, r0
 801531e:	e7e7      	b.n	80152f0 <__sflush_r+0xd4>
 8015320:	dfbffffe 	.word	0xdfbffffe

08015324 <_fflush_r>:
 8015324:	b538      	push	{r3, r4, r5, lr}
 8015326:	690b      	ldr	r3, [r1, #16]
 8015328:	4605      	mov	r5, r0
 801532a:	460c      	mov	r4, r1
 801532c:	b913      	cbnz	r3, 8015334 <_fflush_r+0x10>
 801532e:	2500      	movs	r5, #0
 8015330:	4628      	mov	r0, r5
 8015332:	bd38      	pop	{r3, r4, r5, pc}
 8015334:	b118      	cbz	r0, 801533e <_fflush_r+0x1a>
 8015336:	6a03      	ldr	r3, [r0, #32]
 8015338:	b90b      	cbnz	r3, 801533e <_fflush_r+0x1a>
 801533a:	f7fd fa73 	bl	8012824 <__sinit>
 801533e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d0f3      	beq.n	801532e <_fflush_r+0xa>
 8015346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015348:	07d0      	lsls	r0, r2, #31
 801534a:	d404      	bmi.n	8015356 <_fflush_r+0x32>
 801534c:	0599      	lsls	r1, r3, #22
 801534e:	d402      	bmi.n	8015356 <_fflush_r+0x32>
 8015350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015352:	f7fd fb7e 	bl	8012a52 <__retarget_lock_acquire_recursive>
 8015356:	4628      	mov	r0, r5
 8015358:	4621      	mov	r1, r4
 801535a:	f7ff ff5f 	bl	801521c <__sflush_r>
 801535e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015360:	07da      	lsls	r2, r3, #31
 8015362:	4605      	mov	r5, r0
 8015364:	d4e4      	bmi.n	8015330 <_fflush_r+0xc>
 8015366:	89a3      	ldrh	r3, [r4, #12]
 8015368:	059b      	lsls	r3, r3, #22
 801536a:	d4e1      	bmi.n	8015330 <_fflush_r+0xc>
 801536c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801536e:	f7fd fb71 	bl	8012a54 <__retarget_lock_release_recursive>
 8015372:	e7dd      	b.n	8015330 <_fflush_r+0xc>

08015374 <memmove>:
 8015374:	4288      	cmp	r0, r1
 8015376:	b510      	push	{r4, lr}
 8015378:	eb01 0402 	add.w	r4, r1, r2
 801537c:	d902      	bls.n	8015384 <memmove+0x10>
 801537e:	4284      	cmp	r4, r0
 8015380:	4623      	mov	r3, r4
 8015382:	d807      	bhi.n	8015394 <memmove+0x20>
 8015384:	1e43      	subs	r3, r0, #1
 8015386:	42a1      	cmp	r1, r4
 8015388:	d008      	beq.n	801539c <memmove+0x28>
 801538a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801538e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015392:	e7f8      	b.n	8015386 <memmove+0x12>
 8015394:	4402      	add	r2, r0
 8015396:	4601      	mov	r1, r0
 8015398:	428a      	cmp	r2, r1
 801539a:	d100      	bne.n	801539e <memmove+0x2a>
 801539c:	bd10      	pop	{r4, pc}
 801539e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80153a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80153a6:	e7f7      	b.n	8015398 <memmove+0x24>

080153a8 <strncmp>:
 80153a8:	b510      	push	{r4, lr}
 80153aa:	b16a      	cbz	r2, 80153c8 <strncmp+0x20>
 80153ac:	3901      	subs	r1, #1
 80153ae:	1884      	adds	r4, r0, r2
 80153b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d103      	bne.n	80153c4 <strncmp+0x1c>
 80153bc:	42a0      	cmp	r0, r4
 80153be:	d001      	beq.n	80153c4 <strncmp+0x1c>
 80153c0:	2a00      	cmp	r2, #0
 80153c2:	d1f5      	bne.n	80153b0 <strncmp+0x8>
 80153c4:	1ad0      	subs	r0, r2, r3
 80153c6:	bd10      	pop	{r4, pc}
 80153c8:	4610      	mov	r0, r2
 80153ca:	e7fc      	b.n	80153c6 <strncmp+0x1e>

080153cc <_sbrk_r>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	4d06      	ldr	r5, [pc, #24]	@ (80153e8 <_sbrk_r+0x1c>)
 80153d0:	2300      	movs	r3, #0
 80153d2:	4604      	mov	r4, r0
 80153d4:	4608      	mov	r0, r1
 80153d6:	602b      	str	r3, [r5, #0]
 80153d8:	f7eb fcce 	bl	8000d78 <_sbrk>
 80153dc:	1c43      	adds	r3, r0, #1
 80153de:	d102      	bne.n	80153e6 <_sbrk_r+0x1a>
 80153e0:	682b      	ldr	r3, [r5, #0]
 80153e2:	b103      	cbz	r3, 80153e6 <_sbrk_r+0x1a>
 80153e4:	6023      	str	r3, [r4, #0]
 80153e6:	bd38      	pop	{r3, r4, r5, pc}
 80153e8:	200003f4 	.word	0x200003f4

080153ec <memcpy>:
 80153ec:	440a      	add	r2, r1
 80153ee:	4291      	cmp	r1, r2
 80153f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80153f4:	d100      	bne.n	80153f8 <memcpy+0xc>
 80153f6:	4770      	bx	lr
 80153f8:	b510      	push	{r4, lr}
 80153fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015402:	4291      	cmp	r1, r2
 8015404:	d1f9      	bne.n	80153fa <memcpy+0xe>
 8015406:	bd10      	pop	{r4, pc}

08015408 <nan>:
 8015408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015410 <nan+0x8>
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	00000000 	.word	0x00000000
 8015414:	7ff80000 	.word	0x7ff80000

08015418 <__assert_func>:
 8015418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801541a:	4614      	mov	r4, r2
 801541c:	461a      	mov	r2, r3
 801541e:	4b09      	ldr	r3, [pc, #36]	@ (8015444 <__assert_func+0x2c>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	4605      	mov	r5, r0
 8015424:	68d8      	ldr	r0, [r3, #12]
 8015426:	b954      	cbnz	r4, 801543e <__assert_func+0x26>
 8015428:	4b07      	ldr	r3, [pc, #28]	@ (8015448 <__assert_func+0x30>)
 801542a:	461c      	mov	r4, r3
 801542c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015430:	9100      	str	r1, [sp, #0]
 8015432:	462b      	mov	r3, r5
 8015434:	4905      	ldr	r1, [pc, #20]	@ (801544c <__assert_func+0x34>)
 8015436:	f000 fba7 	bl	8015b88 <fiprintf>
 801543a:	f000 fbb7 	bl	8015bac <abort>
 801543e:	4b04      	ldr	r3, [pc, #16]	@ (8015450 <__assert_func+0x38>)
 8015440:	e7f4      	b.n	801542c <__assert_func+0x14>
 8015442:	bf00      	nop
 8015444:	20000020 	.word	0x20000020
 8015448:	0801756d 	.word	0x0801756d
 801544c:	0801753f 	.word	0x0801753f
 8015450:	08017532 	.word	0x08017532

08015454 <_calloc_r>:
 8015454:	b570      	push	{r4, r5, r6, lr}
 8015456:	fba1 5402 	umull	r5, r4, r1, r2
 801545a:	b93c      	cbnz	r4, 801546c <_calloc_r+0x18>
 801545c:	4629      	mov	r1, r5
 801545e:	f7fe f9c3 	bl	80137e8 <_malloc_r>
 8015462:	4606      	mov	r6, r0
 8015464:	b928      	cbnz	r0, 8015472 <_calloc_r+0x1e>
 8015466:	2600      	movs	r6, #0
 8015468:	4630      	mov	r0, r6
 801546a:	bd70      	pop	{r4, r5, r6, pc}
 801546c:	220c      	movs	r2, #12
 801546e:	6002      	str	r2, [r0, #0]
 8015470:	e7f9      	b.n	8015466 <_calloc_r+0x12>
 8015472:	462a      	mov	r2, r5
 8015474:	4621      	mov	r1, r4
 8015476:	f7fd fa6e 	bl	8012956 <memset>
 801547a:	e7f5      	b.n	8015468 <_calloc_r+0x14>

0801547c <rshift>:
 801547c:	6903      	ldr	r3, [r0, #16]
 801547e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015486:	ea4f 1261 	mov.w	r2, r1, asr #5
 801548a:	f100 0414 	add.w	r4, r0, #20
 801548e:	dd45      	ble.n	801551c <rshift+0xa0>
 8015490:	f011 011f 	ands.w	r1, r1, #31
 8015494:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015498:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801549c:	d10c      	bne.n	80154b8 <rshift+0x3c>
 801549e:	f100 0710 	add.w	r7, r0, #16
 80154a2:	4629      	mov	r1, r5
 80154a4:	42b1      	cmp	r1, r6
 80154a6:	d334      	bcc.n	8015512 <rshift+0x96>
 80154a8:	1a9b      	subs	r3, r3, r2
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	1eea      	subs	r2, r5, #3
 80154ae:	4296      	cmp	r6, r2
 80154b0:	bf38      	it	cc
 80154b2:	2300      	movcc	r3, #0
 80154b4:	4423      	add	r3, r4
 80154b6:	e015      	b.n	80154e4 <rshift+0x68>
 80154b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80154bc:	f1c1 0820 	rsb	r8, r1, #32
 80154c0:	40cf      	lsrs	r7, r1
 80154c2:	f105 0e04 	add.w	lr, r5, #4
 80154c6:	46a1      	mov	r9, r4
 80154c8:	4576      	cmp	r6, lr
 80154ca:	46f4      	mov	ip, lr
 80154cc:	d815      	bhi.n	80154fa <rshift+0x7e>
 80154ce:	1a9a      	subs	r2, r3, r2
 80154d0:	0092      	lsls	r2, r2, #2
 80154d2:	3a04      	subs	r2, #4
 80154d4:	3501      	adds	r5, #1
 80154d6:	42ae      	cmp	r6, r5
 80154d8:	bf38      	it	cc
 80154da:	2200      	movcc	r2, #0
 80154dc:	18a3      	adds	r3, r4, r2
 80154de:	50a7      	str	r7, [r4, r2]
 80154e0:	b107      	cbz	r7, 80154e4 <rshift+0x68>
 80154e2:	3304      	adds	r3, #4
 80154e4:	1b1a      	subs	r2, r3, r4
 80154e6:	42a3      	cmp	r3, r4
 80154e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80154ec:	bf08      	it	eq
 80154ee:	2300      	moveq	r3, #0
 80154f0:	6102      	str	r2, [r0, #16]
 80154f2:	bf08      	it	eq
 80154f4:	6143      	streq	r3, [r0, #20]
 80154f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154fa:	f8dc c000 	ldr.w	ip, [ip]
 80154fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8015502:	ea4c 0707 	orr.w	r7, ip, r7
 8015506:	f849 7b04 	str.w	r7, [r9], #4
 801550a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801550e:	40cf      	lsrs	r7, r1
 8015510:	e7da      	b.n	80154c8 <rshift+0x4c>
 8015512:	f851 cb04 	ldr.w	ip, [r1], #4
 8015516:	f847 cf04 	str.w	ip, [r7, #4]!
 801551a:	e7c3      	b.n	80154a4 <rshift+0x28>
 801551c:	4623      	mov	r3, r4
 801551e:	e7e1      	b.n	80154e4 <rshift+0x68>

08015520 <__hexdig_fun>:
 8015520:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015524:	2b09      	cmp	r3, #9
 8015526:	d802      	bhi.n	801552e <__hexdig_fun+0xe>
 8015528:	3820      	subs	r0, #32
 801552a:	b2c0      	uxtb	r0, r0
 801552c:	4770      	bx	lr
 801552e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015532:	2b05      	cmp	r3, #5
 8015534:	d801      	bhi.n	801553a <__hexdig_fun+0x1a>
 8015536:	3847      	subs	r0, #71	@ 0x47
 8015538:	e7f7      	b.n	801552a <__hexdig_fun+0xa>
 801553a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801553e:	2b05      	cmp	r3, #5
 8015540:	d801      	bhi.n	8015546 <__hexdig_fun+0x26>
 8015542:	3827      	subs	r0, #39	@ 0x27
 8015544:	e7f1      	b.n	801552a <__hexdig_fun+0xa>
 8015546:	2000      	movs	r0, #0
 8015548:	4770      	bx	lr
	...

0801554c <__gethex>:
 801554c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015550:	b085      	sub	sp, #20
 8015552:	468a      	mov	sl, r1
 8015554:	9302      	str	r3, [sp, #8]
 8015556:	680b      	ldr	r3, [r1, #0]
 8015558:	9001      	str	r0, [sp, #4]
 801555a:	4690      	mov	r8, r2
 801555c:	1c9c      	adds	r4, r3, #2
 801555e:	46a1      	mov	r9, r4
 8015560:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015564:	2830      	cmp	r0, #48	@ 0x30
 8015566:	d0fa      	beq.n	801555e <__gethex+0x12>
 8015568:	eba9 0303 	sub.w	r3, r9, r3
 801556c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015570:	f7ff ffd6 	bl	8015520 <__hexdig_fun>
 8015574:	4605      	mov	r5, r0
 8015576:	2800      	cmp	r0, #0
 8015578:	d168      	bne.n	801564c <__gethex+0x100>
 801557a:	49a0      	ldr	r1, [pc, #640]	@ (80157fc <__gethex+0x2b0>)
 801557c:	2201      	movs	r2, #1
 801557e:	4648      	mov	r0, r9
 8015580:	f7ff ff12 	bl	80153a8 <strncmp>
 8015584:	4607      	mov	r7, r0
 8015586:	2800      	cmp	r0, #0
 8015588:	d167      	bne.n	801565a <__gethex+0x10e>
 801558a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801558e:	4626      	mov	r6, r4
 8015590:	f7ff ffc6 	bl	8015520 <__hexdig_fun>
 8015594:	2800      	cmp	r0, #0
 8015596:	d062      	beq.n	801565e <__gethex+0x112>
 8015598:	4623      	mov	r3, r4
 801559a:	7818      	ldrb	r0, [r3, #0]
 801559c:	2830      	cmp	r0, #48	@ 0x30
 801559e:	4699      	mov	r9, r3
 80155a0:	f103 0301 	add.w	r3, r3, #1
 80155a4:	d0f9      	beq.n	801559a <__gethex+0x4e>
 80155a6:	f7ff ffbb 	bl	8015520 <__hexdig_fun>
 80155aa:	fab0 f580 	clz	r5, r0
 80155ae:	096d      	lsrs	r5, r5, #5
 80155b0:	f04f 0b01 	mov.w	fp, #1
 80155b4:	464a      	mov	r2, r9
 80155b6:	4616      	mov	r6, r2
 80155b8:	3201      	adds	r2, #1
 80155ba:	7830      	ldrb	r0, [r6, #0]
 80155bc:	f7ff ffb0 	bl	8015520 <__hexdig_fun>
 80155c0:	2800      	cmp	r0, #0
 80155c2:	d1f8      	bne.n	80155b6 <__gethex+0x6a>
 80155c4:	498d      	ldr	r1, [pc, #564]	@ (80157fc <__gethex+0x2b0>)
 80155c6:	2201      	movs	r2, #1
 80155c8:	4630      	mov	r0, r6
 80155ca:	f7ff feed 	bl	80153a8 <strncmp>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d13f      	bne.n	8015652 <__gethex+0x106>
 80155d2:	b944      	cbnz	r4, 80155e6 <__gethex+0x9a>
 80155d4:	1c74      	adds	r4, r6, #1
 80155d6:	4622      	mov	r2, r4
 80155d8:	4616      	mov	r6, r2
 80155da:	3201      	adds	r2, #1
 80155dc:	7830      	ldrb	r0, [r6, #0]
 80155de:	f7ff ff9f 	bl	8015520 <__hexdig_fun>
 80155e2:	2800      	cmp	r0, #0
 80155e4:	d1f8      	bne.n	80155d8 <__gethex+0x8c>
 80155e6:	1ba4      	subs	r4, r4, r6
 80155e8:	00a7      	lsls	r7, r4, #2
 80155ea:	7833      	ldrb	r3, [r6, #0]
 80155ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80155f0:	2b50      	cmp	r3, #80	@ 0x50
 80155f2:	d13e      	bne.n	8015672 <__gethex+0x126>
 80155f4:	7873      	ldrb	r3, [r6, #1]
 80155f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80155f8:	d033      	beq.n	8015662 <__gethex+0x116>
 80155fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80155fc:	d034      	beq.n	8015668 <__gethex+0x11c>
 80155fe:	1c71      	adds	r1, r6, #1
 8015600:	2400      	movs	r4, #0
 8015602:	7808      	ldrb	r0, [r1, #0]
 8015604:	f7ff ff8c 	bl	8015520 <__hexdig_fun>
 8015608:	1e43      	subs	r3, r0, #1
 801560a:	b2db      	uxtb	r3, r3
 801560c:	2b18      	cmp	r3, #24
 801560e:	d830      	bhi.n	8015672 <__gethex+0x126>
 8015610:	f1a0 0210 	sub.w	r2, r0, #16
 8015614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015618:	f7ff ff82 	bl	8015520 <__hexdig_fun>
 801561c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015620:	fa5f fc8c 	uxtb.w	ip, ip
 8015624:	f1bc 0f18 	cmp.w	ip, #24
 8015628:	f04f 030a 	mov.w	r3, #10
 801562c:	d91e      	bls.n	801566c <__gethex+0x120>
 801562e:	b104      	cbz	r4, 8015632 <__gethex+0xe6>
 8015630:	4252      	negs	r2, r2
 8015632:	4417      	add	r7, r2
 8015634:	f8ca 1000 	str.w	r1, [sl]
 8015638:	b1ed      	cbz	r5, 8015676 <__gethex+0x12a>
 801563a:	f1bb 0f00 	cmp.w	fp, #0
 801563e:	bf0c      	ite	eq
 8015640:	2506      	moveq	r5, #6
 8015642:	2500      	movne	r5, #0
 8015644:	4628      	mov	r0, r5
 8015646:	b005      	add	sp, #20
 8015648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801564c:	2500      	movs	r5, #0
 801564e:	462c      	mov	r4, r5
 8015650:	e7b0      	b.n	80155b4 <__gethex+0x68>
 8015652:	2c00      	cmp	r4, #0
 8015654:	d1c7      	bne.n	80155e6 <__gethex+0x9a>
 8015656:	4627      	mov	r7, r4
 8015658:	e7c7      	b.n	80155ea <__gethex+0x9e>
 801565a:	464e      	mov	r6, r9
 801565c:	462f      	mov	r7, r5
 801565e:	2501      	movs	r5, #1
 8015660:	e7c3      	b.n	80155ea <__gethex+0x9e>
 8015662:	2400      	movs	r4, #0
 8015664:	1cb1      	adds	r1, r6, #2
 8015666:	e7cc      	b.n	8015602 <__gethex+0xb6>
 8015668:	2401      	movs	r4, #1
 801566a:	e7fb      	b.n	8015664 <__gethex+0x118>
 801566c:	fb03 0002 	mla	r0, r3, r2, r0
 8015670:	e7ce      	b.n	8015610 <__gethex+0xc4>
 8015672:	4631      	mov	r1, r6
 8015674:	e7de      	b.n	8015634 <__gethex+0xe8>
 8015676:	eba6 0309 	sub.w	r3, r6, r9
 801567a:	3b01      	subs	r3, #1
 801567c:	4629      	mov	r1, r5
 801567e:	2b07      	cmp	r3, #7
 8015680:	dc0a      	bgt.n	8015698 <__gethex+0x14c>
 8015682:	9801      	ldr	r0, [sp, #4]
 8015684:	f7fe f93c 	bl	8013900 <_Balloc>
 8015688:	4604      	mov	r4, r0
 801568a:	b940      	cbnz	r0, 801569e <__gethex+0x152>
 801568c:	4b5c      	ldr	r3, [pc, #368]	@ (8015800 <__gethex+0x2b4>)
 801568e:	4602      	mov	r2, r0
 8015690:	21e4      	movs	r1, #228	@ 0xe4
 8015692:	485c      	ldr	r0, [pc, #368]	@ (8015804 <__gethex+0x2b8>)
 8015694:	f7ff fec0 	bl	8015418 <__assert_func>
 8015698:	3101      	adds	r1, #1
 801569a:	105b      	asrs	r3, r3, #1
 801569c:	e7ef      	b.n	801567e <__gethex+0x132>
 801569e:	f100 0a14 	add.w	sl, r0, #20
 80156a2:	2300      	movs	r3, #0
 80156a4:	4655      	mov	r5, sl
 80156a6:	469b      	mov	fp, r3
 80156a8:	45b1      	cmp	r9, r6
 80156aa:	d337      	bcc.n	801571c <__gethex+0x1d0>
 80156ac:	f845 bb04 	str.w	fp, [r5], #4
 80156b0:	eba5 050a 	sub.w	r5, r5, sl
 80156b4:	10ad      	asrs	r5, r5, #2
 80156b6:	6125      	str	r5, [r4, #16]
 80156b8:	4658      	mov	r0, fp
 80156ba:	f7fe fa13 	bl	8013ae4 <__hi0bits>
 80156be:	016d      	lsls	r5, r5, #5
 80156c0:	f8d8 6000 	ldr.w	r6, [r8]
 80156c4:	1a2d      	subs	r5, r5, r0
 80156c6:	42b5      	cmp	r5, r6
 80156c8:	dd54      	ble.n	8015774 <__gethex+0x228>
 80156ca:	1bad      	subs	r5, r5, r6
 80156cc:	4629      	mov	r1, r5
 80156ce:	4620      	mov	r0, r4
 80156d0:	f7fe fda7 	bl	8014222 <__any_on>
 80156d4:	4681      	mov	r9, r0
 80156d6:	b178      	cbz	r0, 80156f8 <__gethex+0x1ac>
 80156d8:	1e6b      	subs	r3, r5, #1
 80156da:	1159      	asrs	r1, r3, #5
 80156dc:	f003 021f 	and.w	r2, r3, #31
 80156e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80156e4:	f04f 0901 	mov.w	r9, #1
 80156e8:	fa09 f202 	lsl.w	r2, r9, r2
 80156ec:	420a      	tst	r2, r1
 80156ee:	d003      	beq.n	80156f8 <__gethex+0x1ac>
 80156f0:	454b      	cmp	r3, r9
 80156f2:	dc36      	bgt.n	8015762 <__gethex+0x216>
 80156f4:	f04f 0902 	mov.w	r9, #2
 80156f8:	4629      	mov	r1, r5
 80156fa:	4620      	mov	r0, r4
 80156fc:	f7ff febe 	bl	801547c <rshift>
 8015700:	442f      	add	r7, r5
 8015702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015706:	42bb      	cmp	r3, r7
 8015708:	da42      	bge.n	8015790 <__gethex+0x244>
 801570a:	9801      	ldr	r0, [sp, #4]
 801570c:	4621      	mov	r1, r4
 801570e:	f7fe f937 	bl	8013980 <_Bfree>
 8015712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015714:	2300      	movs	r3, #0
 8015716:	6013      	str	r3, [r2, #0]
 8015718:	25a3      	movs	r5, #163	@ 0xa3
 801571a:	e793      	b.n	8015644 <__gethex+0xf8>
 801571c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015720:	2a2e      	cmp	r2, #46	@ 0x2e
 8015722:	d012      	beq.n	801574a <__gethex+0x1fe>
 8015724:	2b20      	cmp	r3, #32
 8015726:	d104      	bne.n	8015732 <__gethex+0x1e6>
 8015728:	f845 bb04 	str.w	fp, [r5], #4
 801572c:	f04f 0b00 	mov.w	fp, #0
 8015730:	465b      	mov	r3, fp
 8015732:	7830      	ldrb	r0, [r6, #0]
 8015734:	9303      	str	r3, [sp, #12]
 8015736:	f7ff fef3 	bl	8015520 <__hexdig_fun>
 801573a:	9b03      	ldr	r3, [sp, #12]
 801573c:	f000 000f 	and.w	r0, r0, #15
 8015740:	4098      	lsls	r0, r3
 8015742:	ea4b 0b00 	orr.w	fp, fp, r0
 8015746:	3304      	adds	r3, #4
 8015748:	e7ae      	b.n	80156a8 <__gethex+0x15c>
 801574a:	45b1      	cmp	r9, r6
 801574c:	d8ea      	bhi.n	8015724 <__gethex+0x1d8>
 801574e:	492b      	ldr	r1, [pc, #172]	@ (80157fc <__gethex+0x2b0>)
 8015750:	9303      	str	r3, [sp, #12]
 8015752:	2201      	movs	r2, #1
 8015754:	4630      	mov	r0, r6
 8015756:	f7ff fe27 	bl	80153a8 <strncmp>
 801575a:	9b03      	ldr	r3, [sp, #12]
 801575c:	2800      	cmp	r0, #0
 801575e:	d1e1      	bne.n	8015724 <__gethex+0x1d8>
 8015760:	e7a2      	b.n	80156a8 <__gethex+0x15c>
 8015762:	1ea9      	subs	r1, r5, #2
 8015764:	4620      	mov	r0, r4
 8015766:	f7fe fd5c 	bl	8014222 <__any_on>
 801576a:	2800      	cmp	r0, #0
 801576c:	d0c2      	beq.n	80156f4 <__gethex+0x1a8>
 801576e:	f04f 0903 	mov.w	r9, #3
 8015772:	e7c1      	b.n	80156f8 <__gethex+0x1ac>
 8015774:	da09      	bge.n	801578a <__gethex+0x23e>
 8015776:	1b75      	subs	r5, r6, r5
 8015778:	4621      	mov	r1, r4
 801577a:	9801      	ldr	r0, [sp, #4]
 801577c:	462a      	mov	r2, r5
 801577e:	f7fe fb17 	bl	8013db0 <__lshift>
 8015782:	1b7f      	subs	r7, r7, r5
 8015784:	4604      	mov	r4, r0
 8015786:	f100 0a14 	add.w	sl, r0, #20
 801578a:	f04f 0900 	mov.w	r9, #0
 801578e:	e7b8      	b.n	8015702 <__gethex+0x1b6>
 8015790:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015794:	42bd      	cmp	r5, r7
 8015796:	dd6f      	ble.n	8015878 <__gethex+0x32c>
 8015798:	1bed      	subs	r5, r5, r7
 801579a:	42ae      	cmp	r6, r5
 801579c:	dc34      	bgt.n	8015808 <__gethex+0x2bc>
 801579e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80157a2:	2b02      	cmp	r3, #2
 80157a4:	d022      	beq.n	80157ec <__gethex+0x2a0>
 80157a6:	2b03      	cmp	r3, #3
 80157a8:	d024      	beq.n	80157f4 <__gethex+0x2a8>
 80157aa:	2b01      	cmp	r3, #1
 80157ac:	d115      	bne.n	80157da <__gethex+0x28e>
 80157ae:	42ae      	cmp	r6, r5
 80157b0:	d113      	bne.n	80157da <__gethex+0x28e>
 80157b2:	2e01      	cmp	r6, #1
 80157b4:	d10b      	bne.n	80157ce <__gethex+0x282>
 80157b6:	9a02      	ldr	r2, [sp, #8]
 80157b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80157bc:	6013      	str	r3, [r2, #0]
 80157be:	2301      	movs	r3, #1
 80157c0:	6123      	str	r3, [r4, #16]
 80157c2:	f8ca 3000 	str.w	r3, [sl]
 80157c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80157c8:	2562      	movs	r5, #98	@ 0x62
 80157ca:	601c      	str	r4, [r3, #0]
 80157cc:	e73a      	b.n	8015644 <__gethex+0xf8>
 80157ce:	1e71      	subs	r1, r6, #1
 80157d0:	4620      	mov	r0, r4
 80157d2:	f7fe fd26 	bl	8014222 <__any_on>
 80157d6:	2800      	cmp	r0, #0
 80157d8:	d1ed      	bne.n	80157b6 <__gethex+0x26a>
 80157da:	9801      	ldr	r0, [sp, #4]
 80157dc:	4621      	mov	r1, r4
 80157de:	f7fe f8cf 	bl	8013980 <_Bfree>
 80157e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80157e4:	2300      	movs	r3, #0
 80157e6:	6013      	str	r3, [r2, #0]
 80157e8:	2550      	movs	r5, #80	@ 0x50
 80157ea:	e72b      	b.n	8015644 <__gethex+0xf8>
 80157ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d1f3      	bne.n	80157da <__gethex+0x28e>
 80157f2:	e7e0      	b.n	80157b6 <__gethex+0x26a>
 80157f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d1dd      	bne.n	80157b6 <__gethex+0x26a>
 80157fa:	e7ee      	b.n	80157da <__gethex+0x28e>
 80157fc:	080173c0 	.word	0x080173c0
 8015800:	08017255 	.word	0x08017255
 8015804:	0801756e 	.word	0x0801756e
 8015808:	1e6f      	subs	r7, r5, #1
 801580a:	f1b9 0f00 	cmp.w	r9, #0
 801580e:	d130      	bne.n	8015872 <__gethex+0x326>
 8015810:	b127      	cbz	r7, 801581c <__gethex+0x2d0>
 8015812:	4639      	mov	r1, r7
 8015814:	4620      	mov	r0, r4
 8015816:	f7fe fd04 	bl	8014222 <__any_on>
 801581a:	4681      	mov	r9, r0
 801581c:	117a      	asrs	r2, r7, #5
 801581e:	2301      	movs	r3, #1
 8015820:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015824:	f007 071f 	and.w	r7, r7, #31
 8015828:	40bb      	lsls	r3, r7
 801582a:	4213      	tst	r3, r2
 801582c:	4629      	mov	r1, r5
 801582e:	4620      	mov	r0, r4
 8015830:	bf18      	it	ne
 8015832:	f049 0902 	orrne.w	r9, r9, #2
 8015836:	f7ff fe21 	bl	801547c <rshift>
 801583a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801583e:	1b76      	subs	r6, r6, r5
 8015840:	2502      	movs	r5, #2
 8015842:	f1b9 0f00 	cmp.w	r9, #0
 8015846:	d047      	beq.n	80158d8 <__gethex+0x38c>
 8015848:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801584c:	2b02      	cmp	r3, #2
 801584e:	d015      	beq.n	801587c <__gethex+0x330>
 8015850:	2b03      	cmp	r3, #3
 8015852:	d017      	beq.n	8015884 <__gethex+0x338>
 8015854:	2b01      	cmp	r3, #1
 8015856:	d109      	bne.n	801586c <__gethex+0x320>
 8015858:	f019 0f02 	tst.w	r9, #2
 801585c:	d006      	beq.n	801586c <__gethex+0x320>
 801585e:	f8da 3000 	ldr.w	r3, [sl]
 8015862:	ea49 0903 	orr.w	r9, r9, r3
 8015866:	f019 0f01 	tst.w	r9, #1
 801586a:	d10e      	bne.n	801588a <__gethex+0x33e>
 801586c:	f045 0510 	orr.w	r5, r5, #16
 8015870:	e032      	b.n	80158d8 <__gethex+0x38c>
 8015872:	f04f 0901 	mov.w	r9, #1
 8015876:	e7d1      	b.n	801581c <__gethex+0x2d0>
 8015878:	2501      	movs	r5, #1
 801587a:	e7e2      	b.n	8015842 <__gethex+0x2f6>
 801587c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801587e:	f1c3 0301 	rsb	r3, r3, #1
 8015882:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015886:	2b00      	cmp	r3, #0
 8015888:	d0f0      	beq.n	801586c <__gethex+0x320>
 801588a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801588e:	f104 0314 	add.w	r3, r4, #20
 8015892:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015896:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801589a:	f04f 0c00 	mov.w	ip, #0
 801589e:	4618      	mov	r0, r3
 80158a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80158a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80158a8:	d01b      	beq.n	80158e2 <__gethex+0x396>
 80158aa:	3201      	adds	r2, #1
 80158ac:	6002      	str	r2, [r0, #0]
 80158ae:	2d02      	cmp	r5, #2
 80158b0:	f104 0314 	add.w	r3, r4, #20
 80158b4:	d13c      	bne.n	8015930 <__gethex+0x3e4>
 80158b6:	f8d8 2000 	ldr.w	r2, [r8]
 80158ba:	3a01      	subs	r2, #1
 80158bc:	42b2      	cmp	r2, r6
 80158be:	d109      	bne.n	80158d4 <__gethex+0x388>
 80158c0:	1171      	asrs	r1, r6, #5
 80158c2:	2201      	movs	r2, #1
 80158c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80158c8:	f006 061f 	and.w	r6, r6, #31
 80158cc:	fa02 f606 	lsl.w	r6, r2, r6
 80158d0:	421e      	tst	r6, r3
 80158d2:	d13a      	bne.n	801594a <__gethex+0x3fe>
 80158d4:	f045 0520 	orr.w	r5, r5, #32
 80158d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158da:	601c      	str	r4, [r3, #0]
 80158dc:	9b02      	ldr	r3, [sp, #8]
 80158de:	601f      	str	r7, [r3, #0]
 80158e0:	e6b0      	b.n	8015644 <__gethex+0xf8>
 80158e2:	4299      	cmp	r1, r3
 80158e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80158e8:	d8d9      	bhi.n	801589e <__gethex+0x352>
 80158ea:	68a3      	ldr	r3, [r4, #8]
 80158ec:	459b      	cmp	fp, r3
 80158ee:	db17      	blt.n	8015920 <__gethex+0x3d4>
 80158f0:	6861      	ldr	r1, [r4, #4]
 80158f2:	9801      	ldr	r0, [sp, #4]
 80158f4:	3101      	adds	r1, #1
 80158f6:	f7fe f803 	bl	8013900 <_Balloc>
 80158fa:	4681      	mov	r9, r0
 80158fc:	b918      	cbnz	r0, 8015906 <__gethex+0x3ba>
 80158fe:	4b1a      	ldr	r3, [pc, #104]	@ (8015968 <__gethex+0x41c>)
 8015900:	4602      	mov	r2, r0
 8015902:	2184      	movs	r1, #132	@ 0x84
 8015904:	e6c5      	b.n	8015692 <__gethex+0x146>
 8015906:	6922      	ldr	r2, [r4, #16]
 8015908:	3202      	adds	r2, #2
 801590a:	f104 010c 	add.w	r1, r4, #12
 801590e:	0092      	lsls	r2, r2, #2
 8015910:	300c      	adds	r0, #12
 8015912:	f7ff fd6b 	bl	80153ec <memcpy>
 8015916:	4621      	mov	r1, r4
 8015918:	9801      	ldr	r0, [sp, #4]
 801591a:	f7fe f831 	bl	8013980 <_Bfree>
 801591e:	464c      	mov	r4, r9
 8015920:	6923      	ldr	r3, [r4, #16]
 8015922:	1c5a      	adds	r2, r3, #1
 8015924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015928:	6122      	str	r2, [r4, #16]
 801592a:	2201      	movs	r2, #1
 801592c:	615a      	str	r2, [r3, #20]
 801592e:	e7be      	b.n	80158ae <__gethex+0x362>
 8015930:	6922      	ldr	r2, [r4, #16]
 8015932:	455a      	cmp	r2, fp
 8015934:	dd0b      	ble.n	801594e <__gethex+0x402>
 8015936:	2101      	movs	r1, #1
 8015938:	4620      	mov	r0, r4
 801593a:	f7ff fd9f 	bl	801547c <rshift>
 801593e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015942:	3701      	adds	r7, #1
 8015944:	42bb      	cmp	r3, r7
 8015946:	f6ff aee0 	blt.w	801570a <__gethex+0x1be>
 801594a:	2501      	movs	r5, #1
 801594c:	e7c2      	b.n	80158d4 <__gethex+0x388>
 801594e:	f016 061f 	ands.w	r6, r6, #31
 8015952:	d0fa      	beq.n	801594a <__gethex+0x3fe>
 8015954:	4453      	add	r3, sl
 8015956:	f1c6 0620 	rsb	r6, r6, #32
 801595a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801595e:	f7fe f8c1 	bl	8013ae4 <__hi0bits>
 8015962:	42b0      	cmp	r0, r6
 8015964:	dbe7      	blt.n	8015936 <__gethex+0x3ea>
 8015966:	e7f0      	b.n	801594a <__gethex+0x3fe>
 8015968:	08017255 	.word	0x08017255

0801596c <L_shift>:
 801596c:	f1c2 0208 	rsb	r2, r2, #8
 8015970:	0092      	lsls	r2, r2, #2
 8015972:	b570      	push	{r4, r5, r6, lr}
 8015974:	f1c2 0620 	rsb	r6, r2, #32
 8015978:	6843      	ldr	r3, [r0, #4]
 801597a:	6804      	ldr	r4, [r0, #0]
 801597c:	fa03 f506 	lsl.w	r5, r3, r6
 8015980:	432c      	orrs	r4, r5
 8015982:	40d3      	lsrs	r3, r2
 8015984:	6004      	str	r4, [r0, #0]
 8015986:	f840 3f04 	str.w	r3, [r0, #4]!
 801598a:	4288      	cmp	r0, r1
 801598c:	d3f4      	bcc.n	8015978 <L_shift+0xc>
 801598e:	bd70      	pop	{r4, r5, r6, pc}

08015990 <__match>:
 8015990:	b530      	push	{r4, r5, lr}
 8015992:	6803      	ldr	r3, [r0, #0]
 8015994:	3301      	adds	r3, #1
 8015996:	f811 4b01 	ldrb.w	r4, [r1], #1
 801599a:	b914      	cbnz	r4, 80159a2 <__match+0x12>
 801599c:	6003      	str	r3, [r0, #0]
 801599e:	2001      	movs	r0, #1
 80159a0:	bd30      	pop	{r4, r5, pc}
 80159a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80159aa:	2d19      	cmp	r5, #25
 80159ac:	bf98      	it	ls
 80159ae:	3220      	addls	r2, #32
 80159b0:	42a2      	cmp	r2, r4
 80159b2:	d0f0      	beq.n	8015996 <__match+0x6>
 80159b4:	2000      	movs	r0, #0
 80159b6:	e7f3      	b.n	80159a0 <__match+0x10>

080159b8 <__hexnan>:
 80159b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159bc:	680b      	ldr	r3, [r1, #0]
 80159be:	6801      	ldr	r1, [r0, #0]
 80159c0:	115e      	asrs	r6, r3, #5
 80159c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80159c6:	f013 031f 	ands.w	r3, r3, #31
 80159ca:	b087      	sub	sp, #28
 80159cc:	bf18      	it	ne
 80159ce:	3604      	addne	r6, #4
 80159d0:	2500      	movs	r5, #0
 80159d2:	1f37      	subs	r7, r6, #4
 80159d4:	4682      	mov	sl, r0
 80159d6:	4690      	mov	r8, r2
 80159d8:	9301      	str	r3, [sp, #4]
 80159da:	f846 5c04 	str.w	r5, [r6, #-4]
 80159de:	46b9      	mov	r9, r7
 80159e0:	463c      	mov	r4, r7
 80159e2:	9502      	str	r5, [sp, #8]
 80159e4:	46ab      	mov	fp, r5
 80159e6:	784a      	ldrb	r2, [r1, #1]
 80159e8:	1c4b      	adds	r3, r1, #1
 80159ea:	9303      	str	r3, [sp, #12]
 80159ec:	b342      	cbz	r2, 8015a40 <__hexnan+0x88>
 80159ee:	4610      	mov	r0, r2
 80159f0:	9105      	str	r1, [sp, #20]
 80159f2:	9204      	str	r2, [sp, #16]
 80159f4:	f7ff fd94 	bl	8015520 <__hexdig_fun>
 80159f8:	2800      	cmp	r0, #0
 80159fa:	d151      	bne.n	8015aa0 <__hexnan+0xe8>
 80159fc:	9a04      	ldr	r2, [sp, #16]
 80159fe:	9905      	ldr	r1, [sp, #20]
 8015a00:	2a20      	cmp	r2, #32
 8015a02:	d818      	bhi.n	8015a36 <__hexnan+0x7e>
 8015a04:	9b02      	ldr	r3, [sp, #8]
 8015a06:	459b      	cmp	fp, r3
 8015a08:	dd13      	ble.n	8015a32 <__hexnan+0x7a>
 8015a0a:	454c      	cmp	r4, r9
 8015a0c:	d206      	bcs.n	8015a1c <__hexnan+0x64>
 8015a0e:	2d07      	cmp	r5, #7
 8015a10:	dc04      	bgt.n	8015a1c <__hexnan+0x64>
 8015a12:	462a      	mov	r2, r5
 8015a14:	4649      	mov	r1, r9
 8015a16:	4620      	mov	r0, r4
 8015a18:	f7ff ffa8 	bl	801596c <L_shift>
 8015a1c:	4544      	cmp	r4, r8
 8015a1e:	d952      	bls.n	8015ac6 <__hexnan+0x10e>
 8015a20:	2300      	movs	r3, #0
 8015a22:	f1a4 0904 	sub.w	r9, r4, #4
 8015a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8015a2a:	f8cd b008 	str.w	fp, [sp, #8]
 8015a2e:	464c      	mov	r4, r9
 8015a30:	461d      	mov	r5, r3
 8015a32:	9903      	ldr	r1, [sp, #12]
 8015a34:	e7d7      	b.n	80159e6 <__hexnan+0x2e>
 8015a36:	2a29      	cmp	r2, #41	@ 0x29
 8015a38:	d157      	bne.n	8015aea <__hexnan+0x132>
 8015a3a:	3102      	adds	r1, #2
 8015a3c:	f8ca 1000 	str.w	r1, [sl]
 8015a40:	f1bb 0f00 	cmp.w	fp, #0
 8015a44:	d051      	beq.n	8015aea <__hexnan+0x132>
 8015a46:	454c      	cmp	r4, r9
 8015a48:	d206      	bcs.n	8015a58 <__hexnan+0xa0>
 8015a4a:	2d07      	cmp	r5, #7
 8015a4c:	dc04      	bgt.n	8015a58 <__hexnan+0xa0>
 8015a4e:	462a      	mov	r2, r5
 8015a50:	4649      	mov	r1, r9
 8015a52:	4620      	mov	r0, r4
 8015a54:	f7ff ff8a 	bl	801596c <L_shift>
 8015a58:	4544      	cmp	r4, r8
 8015a5a:	d936      	bls.n	8015aca <__hexnan+0x112>
 8015a5c:	f1a8 0204 	sub.w	r2, r8, #4
 8015a60:	4623      	mov	r3, r4
 8015a62:	f853 1b04 	ldr.w	r1, [r3], #4
 8015a66:	f842 1f04 	str.w	r1, [r2, #4]!
 8015a6a:	429f      	cmp	r7, r3
 8015a6c:	d2f9      	bcs.n	8015a62 <__hexnan+0xaa>
 8015a6e:	1b3b      	subs	r3, r7, r4
 8015a70:	f023 0303 	bic.w	r3, r3, #3
 8015a74:	3304      	adds	r3, #4
 8015a76:	3401      	adds	r4, #1
 8015a78:	3e03      	subs	r6, #3
 8015a7a:	42b4      	cmp	r4, r6
 8015a7c:	bf88      	it	hi
 8015a7e:	2304      	movhi	r3, #4
 8015a80:	4443      	add	r3, r8
 8015a82:	2200      	movs	r2, #0
 8015a84:	f843 2b04 	str.w	r2, [r3], #4
 8015a88:	429f      	cmp	r7, r3
 8015a8a:	d2fb      	bcs.n	8015a84 <__hexnan+0xcc>
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	b91b      	cbnz	r3, 8015a98 <__hexnan+0xe0>
 8015a90:	4547      	cmp	r7, r8
 8015a92:	d128      	bne.n	8015ae6 <__hexnan+0x12e>
 8015a94:	2301      	movs	r3, #1
 8015a96:	603b      	str	r3, [r7, #0]
 8015a98:	2005      	movs	r0, #5
 8015a9a:	b007      	add	sp, #28
 8015a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa0:	3501      	adds	r5, #1
 8015aa2:	2d08      	cmp	r5, #8
 8015aa4:	f10b 0b01 	add.w	fp, fp, #1
 8015aa8:	dd06      	ble.n	8015ab8 <__hexnan+0x100>
 8015aaa:	4544      	cmp	r4, r8
 8015aac:	d9c1      	bls.n	8015a32 <__hexnan+0x7a>
 8015aae:	2300      	movs	r3, #0
 8015ab0:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ab4:	2501      	movs	r5, #1
 8015ab6:	3c04      	subs	r4, #4
 8015ab8:	6822      	ldr	r2, [r4, #0]
 8015aba:	f000 000f 	and.w	r0, r0, #15
 8015abe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015ac2:	6020      	str	r0, [r4, #0]
 8015ac4:	e7b5      	b.n	8015a32 <__hexnan+0x7a>
 8015ac6:	2508      	movs	r5, #8
 8015ac8:	e7b3      	b.n	8015a32 <__hexnan+0x7a>
 8015aca:	9b01      	ldr	r3, [sp, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d0dd      	beq.n	8015a8c <__hexnan+0xd4>
 8015ad0:	f1c3 0320 	rsb	r3, r3, #32
 8015ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ad8:	40da      	lsrs	r2, r3
 8015ada:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015ade:	4013      	ands	r3, r2
 8015ae0:	f846 3c04 	str.w	r3, [r6, #-4]
 8015ae4:	e7d2      	b.n	8015a8c <__hexnan+0xd4>
 8015ae6:	3f04      	subs	r7, #4
 8015ae8:	e7d0      	b.n	8015a8c <__hexnan+0xd4>
 8015aea:	2004      	movs	r0, #4
 8015aec:	e7d5      	b.n	8015a9a <__hexnan+0xe2>

08015aee <__ascii_mbtowc>:
 8015aee:	b082      	sub	sp, #8
 8015af0:	b901      	cbnz	r1, 8015af4 <__ascii_mbtowc+0x6>
 8015af2:	a901      	add	r1, sp, #4
 8015af4:	b142      	cbz	r2, 8015b08 <__ascii_mbtowc+0x1a>
 8015af6:	b14b      	cbz	r3, 8015b0c <__ascii_mbtowc+0x1e>
 8015af8:	7813      	ldrb	r3, [r2, #0]
 8015afa:	600b      	str	r3, [r1, #0]
 8015afc:	7812      	ldrb	r2, [r2, #0]
 8015afe:	1e10      	subs	r0, r2, #0
 8015b00:	bf18      	it	ne
 8015b02:	2001      	movne	r0, #1
 8015b04:	b002      	add	sp, #8
 8015b06:	4770      	bx	lr
 8015b08:	4610      	mov	r0, r2
 8015b0a:	e7fb      	b.n	8015b04 <__ascii_mbtowc+0x16>
 8015b0c:	f06f 0001 	mvn.w	r0, #1
 8015b10:	e7f8      	b.n	8015b04 <__ascii_mbtowc+0x16>

08015b12 <_realloc_r>:
 8015b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b16:	4680      	mov	r8, r0
 8015b18:	4615      	mov	r5, r2
 8015b1a:	460c      	mov	r4, r1
 8015b1c:	b921      	cbnz	r1, 8015b28 <_realloc_r+0x16>
 8015b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b22:	4611      	mov	r1, r2
 8015b24:	f7fd be60 	b.w	80137e8 <_malloc_r>
 8015b28:	b92a      	cbnz	r2, 8015b36 <_realloc_r+0x24>
 8015b2a:	f7fd fde9 	bl	8013700 <_free_r>
 8015b2e:	2400      	movs	r4, #0
 8015b30:	4620      	mov	r0, r4
 8015b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b36:	f000 f840 	bl	8015bba <_malloc_usable_size_r>
 8015b3a:	4285      	cmp	r5, r0
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	d802      	bhi.n	8015b46 <_realloc_r+0x34>
 8015b40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015b44:	d8f4      	bhi.n	8015b30 <_realloc_r+0x1e>
 8015b46:	4629      	mov	r1, r5
 8015b48:	4640      	mov	r0, r8
 8015b4a:	f7fd fe4d 	bl	80137e8 <_malloc_r>
 8015b4e:	4607      	mov	r7, r0
 8015b50:	2800      	cmp	r0, #0
 8015b52:	d0ec      	beq.n	8015b2e <_realloc_r+0x1c>
 8015b54:	42b5      	cmp	r5, r6
 8015b56:	462a      	mov	r2, r5
 8015b58:	4621      	mov	r1, r4
 8015b5a:	bf28      	it	cs
 8015b5c:	4632      	movcs	r2, r6
 8015b5e:	f7ff fc45 	bl	80153ec <memcpy>
 8015b62:	4621      	mov	r1, r4
 8015b64:	4640      	mov	r0, r8
 8015b66:	f7fd fdcb 	bl	8013700 <_free_r>
 8015b6a:	463c      	mov	r4, r7
 8015b6c:	e7e0      	b.n	8015b30 <_realloc_r+0x1e>

08015b6e <__ascii_wctomb>:
 8015b6e:	4603      	mov	r3, r0
 8015b70:	4608      	mov	r0, r1
 8015b72:	b141      	cbz	r1, 8015b86 <__ascii_wctomb+0x18>
 8015b74:	2aff      	cmp	r2, #255	@ 0xff
 8015b76:	d904      	bls.n	8015b82 <__ascii_wctomb+0x14>
 8015b78:	228a      	movs	r2, #138	@ 0x8a
 8015b7a:	601a      	str	r2, [r3, #0]
 8015b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b80:	4770      	bx	lr
 8015b82:	700a      	strb	r2, [r1, #0]
 8015b84:	2001      	movs	r0, #1
 8015b86:	4770      	bx	lr

08015b88 <fiprintf>:
 8015b88:	b40e      	push	{r1, r2, r3}
 8015b8a:	b503      	push	{r0, r1, lr}
 8015b8c:	4601      	mov	r1, r0
 8015b8e:	ab03      	add	r3, sp, #12
 8015b90:	4805      	ldr	r0, [pc, #20]	@ (8015ba8 <fiprintf+0x20>)
 8015b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b96:	6800      	ldr	r0, [r0, #0]
 8015b98:	9301      	str	r3, [sp, #4]
 8015b9a:	f000 f83f 	bl	8015c1c <_vfiprintf_r>
 8015b9e:	b002      	add	sp, #8
 8015ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ba4:	b003      	add	sp, #12
 8015ba6:	4770      	bx	lr
 8015ba8:	20000020 	.word	0x20000020

08015bac <abort>:
 8015bac:	b508      	push	{r3, lr}
 8015bae:	2006      	movs	r0, #6
 8015bb0:	f000 fa08 	bl	8015fc4 <raise>
 8015bb4:	2001      	movs	r0, #1
 8015bb6:	f7ea fff2 	bl	8000b9e <_exit>

08015bba <_malloc_usable_size_r>:
 8015bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015bbe:	1f18      	subs	r0, r3, #4
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	bfbc      	itt	lt
 8015bc4:	580b      	ldrlt	r3, [r1, r0]
 8015bc6:	18c0      	addlt	r0, r0, r3
 8015bc8:	4770      	bx	lr

08015bca <__sfputc_r>:
 8015bca:	6893      	ldr	r3, [r2, #8]
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	b410      	push	{r4}
 8015bd2:	6093      	str	r3, [r2, #8]
 8015bd4:	da08      	bge.n	8015be8 <__sfputc_r+0x1e>
 8015bd6:	6994      	ldr	r4, [r2, #24]
 8015bd8:	42a3      	cmp	r3, r4
 8015bda:	db01      	blt.n	8015be0 <__sfputc_r+0x16>
 8015bdc:	290a      	cmp	r1, #10
 8015bde:	d103      	bne.n	8015be8 <__sfputc_r+0x1e>
 8015be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015be4:	f000 b932 	b.w	8015e4c <__swbuf_r>
 8015be8:	6813      	ldr	r3, [r2, #0]
 8015bea:	1c58      	adds	r0, r3, #1
 8015bec:	6010      	str	r0, [r2, #0]
 8015bee:	7019      	strb	r1, [r3, #0]
 8015bf0:	4608      	mov	r0, r1
 8015bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bf6:	4770      	bx	lr

08015bf8 <__sfputs_r>:
 8015bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfa:	4606      	mov	r6, r0
 8015bfc:	460f      	mov	r7, r1
 8015bfe:	4614      	mov	r4, r2
 8015c00:	18d5      	adds	r5, r2, r3
 8015c02:	42ac      	cmp	r4, r5
 8015c04:	d101      	bne.n	8015c0a <__sfputs_r+0x12>
 8015c06:	2000      	movs	r0, #0
 8015c08:	e007      	b.n	8015c1a <__sfputs_r+0x22>
 8015c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c0e:	463a      	mov	r2, r7
 8015c10:	4630      	mov	r0, r6
 8015c12:	f7ff ffda 	bl	8015bca <__sfputc_r>
 8015c16:	1c43      	adds	r3, r0, #1
 8015c18:	d1f3      	bne.n	8015c02 <__sfputs_r+0xa>
 8015c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015c1c <_vfiprintf_r>:
 8015c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c20:	460d      	mov	r5, r1
 8015c22:	b09d      	sub	sp, #116	@ 0x74
 8015c24:	4614      	mov	r4, r2
 8015c26:	4698      	mov	r8, r3
 8015c28:	4606      	mov	r6, r0
 8015c2a:	b118      	cbz	r0, 8015c34 <_vfiprintf_r+0x18>
 8015c2c:	6a03      	ldr	r3, [r0, #32]
 8015c2e:	b90b      	cbnz	r3, 8015c34 <_vfiprintf_r+0x18>
 8015c30:	f7fc fdf8 	bl	8012824 <__sinit>
 8015c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c36:	07d9      	lsls	r1, r3, #31
 8015c38:	d405      	bmi.n	8015c46 <_vfiprintf_r+0x2a>
 8015c3a:	89ab      	ldrh	r3, [r5, #12]
 8015c3c:	059a      	lsls	r2, r3, #22
 8015c3e:	d402      	bmi.n	8015c46 <_vfiprintf_r+0x2a>
 8015c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c42:	f7fc ff06 	bl	8012a52 <__retarget_lock_acquire_recursive>
 8015c46:	89ab      	ldrh	r3, [r5, #12]
 8015c48:	071b      	lsls	r3, r3, #28
 8015c4a:	d501      	bpl.n	8015c50 <_vfiprintf_r+0x34>
 8015c4c:	692b      	ldr	r3, [r5, #16]
 8015c4e:	b99b      	cbnz	r3, 8015c78 <_vfiprintf_r+0x5c>
 8015c50:	4629      	mov	r1, r5
 8015c52:	4630      	mov	r0, r6
 8015c54:	f000 f938 	bl	8015ec8 <__swsetup_r>
 8015c58:	b170      	cbz	r0, 8015c78 <_vfiprintf_r+0x5c>
 8015c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015c5c:	07dc      	lsls	r4, r3, #31
 8015c5e:	d504      	bpl.n	8015c6a <_vfiprintf_r+0x4e>
 8015c60:	f04f 30ff 	mov.w	r0, #4294967295
 8015c64:	b01d      	add	sp, #116	@ 0x74
 8015c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c6a:	89ab      	ldrh	r3, [r5, #12]
 8015c6c:	0598      	lsls	r0, r3, #22
 8015c6e:	d4f7      	bmi.n	8015c60 <_vfiprintf_r+0x44>
 8015c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015c72:	f7fc feef 	bl	8012a54 <__retarget_lock_release_recursive>
 8015c76:	e7f3      	b.n	8015c60 <_vfiprintf_r+0x44>
 8015c78:	2300      	movs	r3, #0
 8015c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c7c:	2320      	movs	r3, #32
 8015c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c86:	2330      	movs	r3, #48	@ 0x30
 8015c88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015e38 <_vfiprintf_r+0x21c>
 8015c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c90:	f04f 0901 	mov.w	r9, #1
 8015c94:	4623      	mov	r3, r4
 8015c96:	469a      	mov	sl, r3
 8015c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c9c:	b10a      	cbz	r2, 8015ca2 <_vfiprintf_r+0x86>
 8015c9e:	2a25      	cmp	r2, #37	@ 0x25
 8015ca0:	d1f9      	bne.n	8015c96 <_vfiprintf_r+0x7a>
 8015ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8015ca6:	d00b      	beq.n	8015cc0 <_vfiprintf_r+0xa4>
 8015ca8:	465b      	mov	r3, fp
 8015caa:	4622      	mov	r2, r4
 8015cac:	4629      	mov	r1, r5
 8015cae:	4630      	mov	r0, r6
 8015cb0:	f7ff ffa2 	bl	8015bf8 <__sfputs_r>
 8015cb4:	3001      	adds	r0, #1
 8015cb6:	f000 80a7 	beq.w	8015e08 <_vfiprintf_r+0x1ec>
 8015cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015cbc:	445a      	add	r2, fp
 8015cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8015cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f000 809f 	beq.w	8015e08 <_vfiprintf_r+0x1ec>
 8015cca:	2300      	movs	r3, #0
 8015ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8015cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015cd4:	f10a 0a01 	add.w	sl, sl, #1
 8015cd8:	9304      	str	r3, [sp, #16]
 8015cda:	9307      	str	r3, [sp, #28]
 8015cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ce2:	4654      	mov	r4, sl
 8015ce4:	2205      	movs	r2, #5
 8015ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cea:	4853      	ldr	r0, [pc, #332]	@ (8015e38 <_vfiprintf_r+0x21c>)
 8015cec:	f7fa ff70 	bl	8010bd0 <memchr>
 8015cf0:	9a04      	ldr	r2, [sp, #16]
 8015cf2:	b9d8      	cbnz	r0, 8015d2c <_vfiprintf_r+0x110>
 8015cf4:	06d1      	lsls	r1, r2, #27
 8015cf6:	bf44      	itt	mi
 8015cf8:	2320      	movmi	r3, #32
 8015cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015cfe:	0713      	lsls	r3, r2, #28
 8015d00:	bf44      	itt	mi
 8015d02:	232b      	movmi	r3, #43	@ 0x2b
 8015d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015d08:	f89a 3000 	ldrb.w	r3, [sl]
 8015d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d0e:	d015      	beq.n	8015d3c <_vfiprintf_r+0x120>
 8015d10:	9a07      	ldr	r2, [sp, #28]
 8015d12:	4654      	mov	r4, sl
 8015d14:	2000      	movs	r0, #0
 8015d16:	f04f 0c0a 	mov.w	ip, #10
 8015d1a:	4621      	mov	r1, r4
 8015d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d20:	3b30      	subs	r3, #48	@ 0x30
 8015d22:	2b09      	cmp	r3, #9
 8015d24:	d94b      	bls.n	8015dbe <_vfiprintf_r+0x1a2>
 8015d26:	b1b0      	cbz	r0, 8015d56 <_vfiprintf_r+0x13a>
 8015d28:	9207      	str	r2, [sp, #28]
 8015d2a:	e014      	b.n	8015d56 <_vfiprintf_r+0x13a>
 8015d2c:	eba0 0308 	sub.w	r3, r0, r8
 8015d30:	fa09 f303 	lsl.w	r3, r9, r3
 8015d34:	4313      	orrs	r3, r2
 8015d36:	9304      	str	r3, [sp, #16]
 8015d38:	46a2      	mov	sl, r4
 8015d3a:	e7d2      	b.n	8015ce2 <_vfiprintf_r+0xc6>
 8015d3c:	9b03      	ldr	r3, [sp, #12]
 8015d3e:	1d19      	adds	r1, r3, #4
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	9103      	str	r1, [sp, #12]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	bfbb      	ittet	lt
 8015d48:	425b      	neglt	r3, r3
 8015d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8015d4e:	9307      	strge	r3, [sp, #28]
 8015d50:	9307      	strlt	r3, [sp, #28]
 8015d52:	bfb8      	it	lt
 8015d54:	9204      	strlt	r2, [sp, #16]
 8015d56:	7823      	ldrb	r3, [r4, #0]
 8015d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8015d5a:	d10a      	bne.n	8015d72 <_vfiprintf_r+0x156>
 8015d5c:	7863      	ldrb	r3, [r4, #1]
 8015d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d60:	d132      	bne.n	8015dc8 <_vfiprintf_r+0x1ac>
 8015d62:	9b03      	ldr	r3, [sp, #12]
 8015d64:	1d1a      	adds	r2, r3, #4
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	9203      	str	r2, [sp, #12]
 8015d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015d6e:	3402      	adds	r4, #2
 8015d70:	9305      	str	r3, [sp, #20]
 8015d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015e48 <_vfiprintf_r+0x22c>
 8015d76:	7821      	ldrb	r1, [r4, #0]
 8015d78:	2203      	movs	r2, #3
 8015d7a:	4650      	mov	r0, sl
 8015d7c:	f7fa ff28 	bl	8010bd0 <memchr>
 8015d80:	b138      	cbz	r0, 8015d92 <_vfiprintf_r+0x176>
 8015d82:	9b04      	ldr	r3, [sp, #16]
 8015d84:	eba0 000a 	sub.w	r0, r0, sl
 8015d88:	2240      	movs	r2, #64	@ 0x40
 8015d8a:	4082      	lsls	r2, r0
 8015d8c:	4313      	orrs	r3, r2
 8015d8e:	3401      	adds	r4, #1
 8015d90:	9304      	str	r3, [sp, #16]
 8015d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d96:	4829      	ldr	r0, [pc, #164]	@ (8015e3c <_vfiprintf_r+0x220>)
 8015d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d9c:	2206      	movs	r2, #6
 8015d9e:	f7fa ff17 	bl	8010bd0 <memchr>
 8015da2:	2800      	cmp	r0, #0
 8015da4:	d03f      	beq.n	8015e26 <_vfiprintf_r+0x20a>
 8015da6:	4b26      	ldr	r3, [pc, #152]	@ (8015e40 <_vfiprintf_r+0x224>)
 8015da8:	bb1b      	cbnz	r3, 8015df2 <_vfiprintf_r+0x1d6>
 8015daa:	9b03      	ldr	r3, [sp, #12]
 8015dac:	3307      	adds	r3, #7
 8015dae:	f023 0307 	bic.w	r3, r3, #7
 8015db2:	3308      	adds	r3, #8
 8015db4:	9303      	str	r3, [sp, #12]
 8015db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015db8:	443b      	add	r3, r7
 8015dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8015dbc:	e76a      	b.n	8015c94 <_vfiprintf_r+0x78>
 8015dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8015dc2:	460c      	mov	r4, r1
 8015dc4:	2001      	movs	r0, #1
 8015dc6:	e7a8      	b.n	8015d1a <_vfiprintf_r+0xfe>
 8015dc8:	2300      	movs	r3, #0
 8015dca:	3401      	adds	r4, #1
 8015dcc:	9305      	str	r3, [sp, #20]
 8015dce:	4619      	mov	r1, r3
 8015dd0:	f04f 0c0a 	mov.w	ip, #10
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015dda:	3a30      	subs	r2, #48	@ 0x30
 8015ddc:	2a09      	cmp	r2, #9
 8015dde:	d903      	bls.n	8015de8 <_vfiprintf_r+0x1cc>
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d0c6      	beq.n	8015d72 <_vfiprintf_r+0x156>
 8015de4:	9105      	str	r1, [sp, #20]
 8015de6:	e7c4      	b.n	8015d72 <_vfiprintf_r+0x156>
 8015de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8015dec:	4604      	mov	r4, r0
 8015dee:	2301      	movs	r3, #1
 8015df0:	e7f0      	b.n	8015dd4 <_vfiprintf_r+0x1b8>
 8015df2:	ab03      	add	r3, sp, #12
 8015df4:	9300      	str	r3, [sp, #0]
 8015df6:	462a      	mov	r2, r5
 8015df8:	4b12      	ldr	r3, [pc, #72]	@ (8015e44 <_vfiprintf_r+0x228>)
 8015dfa:	a904      	add	r1, sp, #16
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	f7fb feb9 	bl	8011b74 <_printf_float>
 8015e02:	4607      	mov	r7, r0
 8015e04:	1c78      	adds	r0, r7, #1
 8015e06:	d1d6      	bne.n	8015db6 <_vfiprintf_r+0x19a>
 8015e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e0a:	07d9      	lsls	r1, r3, #31
 8015e0c:	d405      	bmi.n	8015e1a <_vfiprintf_r+0x1fe>
 8015e0e:	89ab      	ldrh	r3, [r5, #12]
 8015e10:	059a      	lsls	r2, r3, #22
 8015e12:	d402      	bmi.n	8015e1a <_vfiprintf_r+0x1fe>
 8015e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e16:	f7fc fe1d 	bl	8012a54 <__retarget_lock_release_recursive>
 8015e1a:	89ab      	ldrh	r3, [r5, #12]
 8015e1c:	065b      	lsls	r3, r3, #25
 8015e1e:	f53f af1f 	bmi.w	8015c60 <_vfiprintf_r+0x44>
 8015e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015e24:	e71e      	b.n	8015c64 <_vfiprintf_r+0x48>
 8015e26:	ab03      	add	r3, sp, #12
 8015e28:	9300      	str	r3, [sp, #0]
 8015e2a:	462a      	mov	r2, r5
 8015e2c:	4b05      	ldr	r3, [pc, #20]	@ (8015e44 <_vfiprintf_r+0x228>)
 8015e2e:	a904      	add	r1, sp, #16
 8015e30:	4630      	mov	r0, r6
 8015e32:	f7fc f937 	bl	80120a4 <_printf_i>
 8015e36:	e7e4      	b.n	8015e02 <_vfiprintf_r+0x1e6>
 8015e38:	08017519 	.word	0x08017519
 8015e3c:	08017523 	.word	0x08017523
 8015e40:	08011b75 	.word	0x08011b75
 8015e44:	08015bf9 	.word	0x08015bf9
 8015e48:	0801751f 	.word	0x0801751f

08015e4c <__swbuf_r>:
 8015e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e4e:	460e      	mov	r6, r1
 8015e50:	4614      	mov	r4, r2
 8015e52:	4605      	mov	r5, r0
 8015e54:	b118      	cbz	r0, 8015e5e <__swbuf_r+0x12>
 8015e56:	6a03      	ldr	r3, [r0, #32]
 8015e58:	b90b      	cbnz	r3, 8015e5e <__swbuf_r+0x12>
 8015e5a:	f7fc fce3 	bl	8012824 <__sinit>
 8015e5e:	69a3      	ldr	r3, [r4, #24]
 8015e60:	60a3      	str	r3, [r4, #8]
 8015e62:	89a3      	ldrh	r3, [r4, #12]
 8015e64:	071a      	lsls	r2, r3, #28
 8015e66:	d501      	bpl.n	8015e6c <__swbuf_r+0x20>
 8015e68:	6923      	ldr	r3, [r4, #16]
 8015e6a:	b943      	cbnz	r3, 8015e7e <__swbuf_r+0x32>
 8015e6c:	4621      	mov	r1, r4
 8015e6e:	4628      	mov	r0, r5
 8015e70:	f000 f82a 	bl	8015ec8 <__swsetup_r>
 8015e74:	b118      	cbz	r0, 8015e7e <__swbuf_r+0x32>
 8015e76:	f04f 37ff 	mov.w	r7, #4294967295
 8015e7a:	4638      	mov	r0, r7
 8015e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e7e:	6823      	ldr	r3, [r4, #0]
 8015e80:	6922      	ldr	r2, [r4, #16]
 8015e82:	1a98      	subs	r0, r3, r2
 8015e84:	6963      	ldr	r3, [r4, #20]
 8015e86:	b2f6      	uxtb	r6, r6
 8015e88:	4283      	cmp	r3, r0
 8015e8a:	4637      	mov	r7, r6
 8015e8c:	dc05      	bgt.n	8015e9a <__swbuf_r+0x4e>
 8015e8e:	4621      	mov	r1, r4
 8015e90:	4628      	mov	r0, r5
 8015e92:	f7ff fa47 	bl	8015324 <_fflush_r>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d1ed      	bne.n	8015e76 <__swbuf_r+0x2a>
 8015e9a:	68a3      	ldr	r3, [r4, #8]
 8015e9c:	3b01      	subs	r3, #1
 8015e9e:	60a3      	str	r3, [r4, #8]
 8015ea0:	6823      	ldr	r3, [r4, #0]
 8015ea2:	1c5a      	adds	r2, r3, #1
 8015ea4:	6022      	str	r2, [r4, #0]
 8015ea6:	701e      	strb	r6, [r3, #0]
 8015ea8:	6962      	ldr	r2, [r4, #20]
 8015eaa:	1c43      	adds	r3, r0, #1
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d004      	beq.n	8015eba <__swbuf_r+0x6e>
 8015eb0:	89a3      	ldrh	r3, [r4, #12]
 8015eb2:	07db      	lsls	r3, r3, #31
 8015eb4:	d5e1      	bpl.n	8015e7a <__swbuf_r+0x2e>
 8015eb6:	2e0a      	cmp	r6, #10
 8015eb8:	d1df      	bne.n	8015e7a <__swbuf_r+0x2e>
 8015eba:	4621      	mov	r1, r4
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f7ff fa31 	bl	8015324 <_fflush_r>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d0d9      	beq.n	8015e7a <__swbuf_r+0x2e>
 8015ec6:	e7d6      	b.n	8015e76 <__swbuf_r+0x2a>

08015ec8 <__swsetup_r>:
 8015ec8:	b538      	push	{r3, r4, r5, lr}
 8015eca:	4b29      	ldr	r3, [pc, #164]	@ (8015f70 <__swsetup_r+0xa8>)
 8015ecc:	4605      	mov	r5, r0
 8015ece:	6818      	ldr	r0, [r3, #0]
 8015ed0:	460c      	mov	r4, r1
 8015ed2:	b118      	cbz	r0, 8015edc <__swsetup_r+0x14>
 8015ed4:	6a03      	ldr	r3, [r0, #32]
 8015ed6:	b90b      	cbnz	r3, 8015edc <__swsetup_r+0x14>
 8015ed8:	f7fc fca4 	bl	8012824 <__sinit>
 8015edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ee0:	0719      	lsls	r1, r3, #28
 8015ee2:	d422      	bmi.n	8015f2a <__swsetup_r+0x62>
 8015ee4:	06da      	lsls	r2, r3, #27
 8015ee6:	d407      	bmi.n	8015ef8 <__swsetup_r+0x30>
 8015ee8:	2209      	movs	r2, #9
 8015eea:	602a      	str	r2, [r5, #0]
 8015eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ef0:	81a3      	strh	r3, [r4, #12]
 8015ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ef6:	e033      	b.n	8015f60 <__swsetup_r+0x98>
 8015ef8:	0758      	lsls	r0, r3, #29
 8015efa:	d512      	bpl.n	8015f22 <__swsetup_r+0x5a>
 8015efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015efe:	b141      	cbz	r1, 8015f12 <__swsetup_r+0x4a>
 8015f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015f04:	4299      	cmp	r1, r3
 8015f06:	d002      	beq.n	8015f0e <__swsetup_r+0x46>
 8015f08:	4628      	mov	r0, r5
 8015f0a:	f7fd fbf9 	bl	8013700 <_free_r>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8015f12:	89a3      	ldrh	r3, [r4, #12]
 8015f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015f18:	81a3      	strh	r3, [r4, #12]
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	6063      	str	r3, [r4, #4]
 8015f1e:	6923      	ldr	r3, [r4, #16]
 8015f20:	6023      	str	r3, [r4, #0]
 8015f22:	89a3      	ldrh	r3, [r4, #12]
 8015f24:	f043 0308 	orr.w	r3, r3, #8
 8015f28:	81a3      	strh	r3, [r4, #12]
 8015f2a:	6923      	ldr	r3, [r4, #16]
 8015f2c:	b94b      	cbnz	r3, 8015f42 <__swsetup_r+0x7a>
 8015f2e:	89a3      	ldrh	r3, [r4, #12]
 8015f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015f38:	d003      	beq.n	8015f42 <__swsetup_r+0x7a>
 8015f3a:	4621      	mov	r1, r4
 8015f3c:	4628      	mov	r0, r5
 8015f3e:	f000 f883 	bl	8016048 <__smakebuf_r>
 8015f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f46:	f013 0201 	ands.w	r2, r3, #1
 8015f4a:	d00a      	beq.n	8015f62 <__swsetup_r+0x9a>
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	60a2      	str	r2, [r4, #8]
 8015f50:	6962      	ldr	r2, [r4, #20]
 8015f52:	4252      	negs	r2, r2
 8015f54:	61a2      	str	r2, [r4, #24]
 8015f56:	6922      	ldr	r2, [r4, #16]
 8015f58:	b942      	cbnz	r2, 8015f6c <__swsetup_r+0xa4>
 8015f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015f5e:	d1c5      	bne.n	8015eec <__swsetup_r+0x24>
 8015f60:	bd38      	pop	{r3, r4, r5, pc}
 8015f62:	0799      	lsls	r1, r3, #30
 8015f64:	bf58      	it	pl
 8015f66:	6962      	ldrpl	r2, [r4, #20]
 8015f68:	60a2      	str	r2, [r4, #8]
 8015f6a:	e7f4      	b.n	8015f56 <__swsetup_r+0x8e>
 8015f6c:	2000      	movs	r0, #0
 8015f6e:	e7f7      	b.n	8015f60 <__swsetup_r+0x98>
 8015f70:	20000020 	.word	0x20000020

08015f74 <_raise_r>:
 8015f74:	291f      	cmp	r1, #31
 8015f76:	b538      	push	{r3, r4, r5, lr}
 8015f78:	4605      	mov	r5, r0
 8015f7a:	460c      	mov	r4, r1
 8015f7c:	d904      	bls.n	8015f88 <_raise_r+0x14>
 8015f7e:	2316      	movs	r3, #22
 8015f80:	6003      	str	r3, [r0, #0]
 8015f82:	f04f 30ff 	mov.w	r0, #4294967295
 8015f86:	bd38      	pop	{r3, r4, r5, pc}
 8015f88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015f8a:	b112      	cbz	r2, 8015f92 <_raise_r+0x1e>
 8015f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015f90:	b94b      	cbnz	r3, 8015fa6 <_raise_r+0x32>
 8015f92:	4628      	mov	r0, r5
 8015f94:	f000 f830 	bl	8015ff8 <_getpid_r>
 8015f98:	4622      	mov	r2, r4
 8015f9a:	4601      	mov	r1, r0
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fa2:	f000 b817 	b.w	8015fd4 <_kill_r>
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d00a      	beq.n	8015fc0 <_raise_r+0x4c>
 8015faa:	1c59      	adds	r1, r3, #1
 8015fac:	d103      	bne.n	8015fb6 <_raise_r+0x42>
 8015fae:	2316      	movs	r3, #22
 8015fb0:	6003      	str	r3, [r0, #0]
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	e7e7      	b.n	8015f86 <_raise_r+0x12>
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	4798      	blx	r3
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	e7e0      	b.n	8015f86 <_raise_r+0x12>

08015fc4 <raise>:
 8015fc4:	4b02      	ldr	r3, [pc, #8]	@ (8015fd0 <raise+0xc>)
 8015fc6:	4601      	mov	r1, r0
 8015fc8:	6818      	ldr	r0, [r3, #0]
 8015fca:	f7ff bfd3 	b.w	8015f74 <_raise_r>
 8015fce:	bf00      	nop
 8015fd0:	20000020 	.word	0x20000020

08015fd4 <_kill_r>:
 8015fd4:	b538      	push	{r3, r4, r5, lr}
 8015fd6:	4d07      	ldr	r5, [pc, #28]	@ (8015ff4 <_kill_r+0x20>)
 8015fd8:	2300      	movs	r3, #0
 8015fda:	4604      	mov	r4, r0
 8015fdc:	4608      	mov	r0, r1
 8015fde:	4611      	mov	r1, r2
 8015fe0:	602b      	str	r3, [r5, #0]
 8015fe2:	f7ea fdcc 	bl	8000b7e <_kill>
 8015fe6:	1c43      	adds	r3, r0, #1
 8015fe8:	d102      	bne.n	8015ff0 <_kill_r+0x1c>
 8015fea:	682b      	ldr	r3, [r5, #0]
 8015fec:	b103      	cbz	r3, 8015ff0 <_kill_r+0x1c>
 8015fee:	6023      	str	r3, [r4, #0]
 8015ff0:	bd38      	pop	{r3, r4, r5, pc}
 8015ff2:	bf00      	nop
 8015ff4:	200003f4 	.word	0x200003f4

08015ff8 <_getpid_r>:
 8015ff8:	f7ea bdb9 	b.w	8000b6e <_getpid>

08015ffc <__swhatbuf_r>:
 8015ffc:	b570      	push	{r4, r5, r6, lr}
 8015ffe:	460c      	mov	r4, r1
 8016000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016004:	2900      	cmp	r1, #0
 8016006:	b096      	sub	sp, #88	@ 0x58
 8016008:	4615      	mov	r5, r2
 801600a:	461e      	mov	r6, r3
 801600c:	da0d      	bge.n	801602a <__swhatbuf_r+0x2e>
 801600e:	89a3      	ldrh	r3, [r4, #12]
 8016010:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016014:	f04f 0100 	mov.w	r1, #0
 8016018:	bf14      	ite	ne
 801601a:	2340      	movne	r3, #64	@ 0x40
 801601c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016020:	2000      	movs	r0, #0
 8016022:	6031      	str	r1, [r6, #0]
 8016024:	602b      	str	r3, [r5, #0]
 8016026:	b016      	add	sp, #88	@ 0x58
 8016028:	bd70      	pop	{r4, r5, r6, pc}
 801602a:	466a      	mov	r2, sp
 801602c:	f000 f848 	bl	80160c0 <_fstat_r>
 8016030:	2800      	cmp	r0, #0
 8016032:	dbec      	blt.n	801600e <__swhatbuf_r+0x12>
 8016034:	9901      	ldr	r1, [sp, #4]
 8016036:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801603a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801603e:	4259      	negs	r1, r3
 8016040:	4159      	adcs	r1, r3
 8016042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016046:	e7eb      	b.n	8016020 <__swhatbuf_r+0x24>

08016048 <__smakebuf_r>:
 8016048:	898b      	ldrh	r3, [r1, #12]
 801604a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801604c:	079d      	lsls	r5, r3, #30
 801604e:	4606      	mov	r6, r0
 8016050:	460c      	mov	r4, r1
 8016052:	d507      	bpl.n	8016064 <__smakebuf_r+0x1c>
 8016054:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016058:	6023      	str	r3, [r4, #0]
 801605a:	6123      	str	r3, [r4, #16]
 801605c:	2301      	movs	r3, #1
 801605e:	6163      	str	r3, [r4, #20]
 8016060:	b003      	add	sp, #12
 8016062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016064:	ab01      	add	r3, sp, #4
 8016066:	466a      	mov	r2, sp
 8016068:	f7ff ffc8 	bl	8015ffc <__swhatbuf_r>
 801606c:	9f00      	ldr	r7, [sp, #0]
 801606e:	4605      	mov	r5, r0
 8016070:	4639      	mov	r1, r7
 8016072:	4630      	mov	r0, r6
 8016074:	f7fd fbb8 	bl	80137e8 <_malloc_r>
 8016078:	b948      	cbnz	r0, 801608e <__smakebuf_r+0x46>
 801607a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801607e:	059a      	lsls	r2, r3, #22
 8016080:	d4ee      	bmi.n	8016060 <__smakebuf_r+0x18>
 8016082:	f023 0303 	bic.w	r3, r3, #3
 8016086:	f043 0302 	orr.w	r3, r3, #2
 801608a:	81a3      	strh	r3, [r4, #12]
 801608c:	e7e2      	b.n	8016054 <__smakebuf_r+0xc>
 801608e:	89a3      	ldrh	r3, [r4, #12]
 8016090:	6020      	str	r0, [r4, #0]
 8016092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016096:	81a3      	strh	r3, [r4, #12]
 8016098:	9b01      	ldr	r3, [sp, #4]
 801609a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801609e:	b15b      	cbz	r3, 80160b8 <__smakebuf_r+0x70>
 80160a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160a4:	4630      	mov	r0, r6
 80160a6:	f000 f81d 	bl	80160e4 <_isatty_r>
 80160aa:	b128      	cbz	r0, 80160b8 <__smakebuf_r+0x70>
 80160ac:	89a3      	ldrh	r3, [r4, #12]
 80160ae:	f023 0303 	bic.w	r3, r3, #3
 80160b2:	f043 0301 	orr.w	r3, r3, #1
 80160b6:	81a3      	strh	r3, [r4, #12]
 80160b8:	89a3      	ldrh	r3, [r4, #12]
 80160ba:	431d      	orrs	r5, r3
 80160bc:	81a5      	strh	r5, [r4, #12]
 80160be:	e7cf      	b.n	8016060 <__smakebuf_r+0x18>

080160c0 <_fstat_r>:
 80160c0:	b538      	push	{r3, r4, r5, lr}
 80160c2:	4d07      	ldr	r5, [pc, #28]	@ (80160e0 <_fstat_r+0x20>)
 80160c4:	2300      	movs	r3, #0
 80160c6:	4604      	mov	r4, r0
 80160c8:	4608      	mov	r0, r1
 80160ca:	4611      	mov	r1, r2
 80160cc:	602b      	str	r3, [r5, #0]
 80160ce:	f7ea fdb6 	bl	8000c3e <_fstat>
 80160d2:	1c43      	adds	r3, r0, #1
 80160d4:	d102      	bne.n	80160dc <_fstat_r+0x1c>
 80160d6:	682b      	ldr	r3, [r5, #0]
 80160d8:	b103      	cbz	r3, 80160dc <_fstat_r+0x1c>
 80160da:	6023      	str	r3, [r4, #0]
 80160dc:	bd38      	pop	{r3, r4, r5, pc}
 80160de:	bf00      	nop
 80160e0:	200003f4 	.word	0x200003f4

080160e4 <_isatty_r>:
 80160e4:	b538      	push	{r3, r4, r5, lr}
 80160e6:	4d06      	ldr	r5, [pc, #24]	@ (8016100 <_isatty_r+0x1c>)
 80160e8:	2300      	movs	r3, #0
 80160ea:	4604      	mov	r4, r0
 80160ec:	4608      	mov	r0, r1
 80160ee:	602b      	str	r3, [r5, #0]
 80160f0:	f7ea fdb5 	bl	8000c5e <_isatty>
 80160f4:	1c43      	adds	r3, r0, #1
 80160f6:	d102      	bne.n	80160fe <_isatty_r+0x1a>
 80160f8:	682b      	ldr	r3, [r5, #0]
 80160fa:	b103      	cbz	r3, 80160fe <_isatty_r+0x1a>
 80160fc:	6023      	str	r3, [r4, #0]
 80160fe:	bd38      	pop	{r3, r4, r5, pc}
 8016100:	200003f4 	.word	0x200003f4
 8016104:	00000000 	.word	0x00000000

08016108 <sin>:
 8016108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801610a:	ec53 2b10 	vmov	r2, r3, d0
 801610e:	4826      	ldr	r0, [pc, #152]	@ (80161a8 <sin+0xa0>)
 8016110:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016114:	4281      	cmp	r1, r0
 8016116:	d807      	bhi.n	8016128 <sin+0x20>
 8016118:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80161a0 <sin+0x98>
 801611c:	2000      	movs	r0, #0
 801611e:	b005      	add	sp, #20
 8016120:	f85d eb04 	ldr.w	lr, [sp], #4
 8016124:	f000 b90c 	b.w	8016340 <__kernel_sin>
 8016128:	4820      	ldr	r0, [pc, #128]	@ (80161ac <sin+0xa4>)
 801612a:	4281      	cmp	r1, r0
 801612c:	d908      	bls.n	8016140 <sin+0x38>
 801612e:	4610      	mov	r0, r2
 8016130:	4619      	mov	r1, r3
 8016132:	f7fa fda9 	bl	8010c88 <__aeabi_dsub>
 8016136:	ec41 0b10 	vmov	d0, r0, r1
 801613a:	b005      	add	sp, #20
 801613c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016140:	4668      	mov	r0, sp
 8016142:	f000 f9b9 	bl	80164b8 <__ieee754_rem_pio2>
 8016146:	f000 0003 	and.w	r0, r0, #3
 801614a:	2801      	cmp	r0, #1
 801614c:	d00c      	beq.n	8016168 <sin+0x60>
 801614e:	2802      	cmp	r0, #2
 8016150:	d011      	beq.n	8016176 <sin+0x6e>
 8016152:	b9e8      	cbnz	r0, 8016190 <sin+0x88>
 8016154:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016158:	ed9d 0b00 	vldr	d0, [sp]
 801615c:	2001      	movs	r0, #1
 801615e:	f000 f8ef 	bl	8016340 <__kernel_sin>
 8016162:	ec51 0b10 	vmov	r0, r1, d0
 8016166:	e7e6      	b.n	8016136 <sin+0x2e>
 8016168:	ed9d 1b02 	vldr	d1, [sp, #8]
 801616c:	ed9d 0b00 	vldr	d0, [sp]
 8016170:	f000 f81e 	bl	80161b0 <__kernel_cos>
 8016174:	e7f5      	b.n	8016162 <sin+0x5a>
 8016176:	ed9d 1b02 	vldr	d1, [sp, #8]
 801617a:	ed9d 0b00 	vldr	d0, [sp]
 801617e:	2001      	movs	r0, #1
 8016180:	f000 f8de 	bl	8016340 <__kernel_sin>
 8016184:	ec53 2b10 	vmov	r2, r3, d0
 8016188:	4610      	mov	r0, r2
 801618a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801618e:	e7d2      	b.n	8016136 <sin+0x2e>
 8016190:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016194:	ed9d 0b00 	vldr	d0, [sp]
 8016198:	f000 f80a 	bl	80161b0 <__kernel_cos>
 801619c:	e7f2      	b.n	8016184 <sin+0x7c>
 801619e:	bf00      	nop
	...
 80161a8:	3fe921fb 	.word	0x3fe921fb
 80161ac:	7fefffff 	.word	0x7fefffff

080161b0 <__kernel_cos>:
 80161b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b4:	ec57 6b10 	vmov	r6, r7, d0
 80161b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80161bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80161c0:	ed8d 1b00 	vstr	d1, [sp]
 80161c4:	d206      	bcs.n	80161d4 <__kernel_cos+0x24>
 80161c6:	4630      	mov	r0, r6
 80161c8:	4639      	mov	r1, r7
 80161ca:	f7fb f9c5 	bl	8011558 <__aeabi_d2iz>
 80161ce:	2800      	cmp	r0, #0
 80161d0:	f000 8088 	beq.w	80162e4 <__kernel_cos+0x134>
 80161d4:	4632      	mov	r2, r6
 80161d6:	463b      	mov	r3, r7
 80161d8:	4630      	mov	r0, r6
 80161da:	4639      	mov	r1, r7
 80161dc:	f7fa ff0c 	bl	8010ff8 <__aeabi_dmul>
 80161e0:	4b51      	ldr	r3, [pc, #324]	@ (8016328 <__kernel_cos+0x178>)
 80161e2:	2200      	movs	r2, #0
 80161e4:	4604      	mov	r4, r0
 80161e6:	460d      	mov	r5, r1
 80161e8:	f7fa ff06 	bl	8010ff8 <__aeabi_dmul>
 80161ec:	a340      	add	r3, pc, #256	@ (adr r3, 80162f0 <__kernel_cos+0x140>)
 80161ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161f2:	4682      	mov	sl, r0
 80161f4:	468b      	mov	fp, r1
 80161f6:	4620      	mov	r0, r4
 80161f8:	4629      	mov	r1, r5
 80161fa:	f7fa fefd 	bl	8010ff8 <__aeabi_dmul>
 80161fe:	a33e      	add	r3, pc, #248	@ (adr r3, 80162f8 <__kernel_cos+0x148>)
 8016200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016204:	f7fa fd42 	bl	8010c8c <__adddf3>
 8016208:	4622      	mov	r2, r4
 801620a:	462b      	mov	r3, r5
 801620c:	f7fa fef4 	bl	8010ff8 <__aeabi_dmul>
 8016210:	a33b      	add	r3, pc, #236	@ (adr r3, 8016300 <__kernel_cos+0x150>)
 8016212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016216:	f7fa fd37 	bl	8010c88 <__aeabi_dsub>
 801621a:	4622      	mov	r2, r4
 801621c:	462b      	mov	r3, r5
 801621e:	f7fa feeb 	bl	8010ff8 <__aeabi_dmul>
 8016222:	a339      	add	r3, pc, #228	@ (adr r3, 8016308 <__kernel_cos+0x158>)
 8016224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016228:	f7fa fd30 	bl	8010c8c <__adddf3>
 801622c:	4622      	mov	r2, r4
 801622e:	462b      	mov	r3, r5
 8016230:	f7fa fee2 	bl	8010ff8 <__aeabi_dmul>
 8016234:	a336      	add	r3, pc, #216	@ (adr r3, 8016310 <__kernel_cos+0x160>)
 8016236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623a:	f7fa fd25 	bl	8010c88 <__aeabi_dsub>
 801623e:	4622      	mov	r2, r4
 8016240:	462b      	mov	r3, r5
 8016242:	f7fa fed9 	bl	8010ff8 <__aeabi_dmul>
 8016246:	a334      	add	r3, pc, #208	@ (adr r3, 8016318 <__kernel_cos+0x168>)
 8016248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624c:	f7fa fd1e 	bl	8010c8c <__adddf3>
 8016250:	4622      	mov	r2, r4
 8016252:	462b      	mov	r3, r5
 8016254:	f7fa fed0 	bl	8010ff8 <__aeabi_dmul>
 8016258:	4622      	mov	r2, r4
 801625a:	462b      	mov	r3, r5
 801625c:	f7fa fecc 	bl	8010ff8 <__aeabi_dmul>
 8016260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016264:	4604      	mov	r4, r0
 8016266:	460d      	mov	r5, r1
 8016268:	4630      	mov	r0, r6
 801626a:	4639      	mov	r1, r7
 801626c:	f7fa fec4 	bl	8010ff8 <__aeabi_dmul>
 8016270:	460b      	mov	r3, r1
 8016272:	4602      	mov	r2, r0
 8016274:	4629      	mov	r1, r5
 8016276:	4620      	mov	r0, r4
 8016278:	f7fa fd06 	bl	8010c88 <__aeabi_dsub>
 801627c:	4b2b      	ldr	r3, [pc, #172]	@ (801632c <__kernel_cos+0x17c>)
 801627e:	4598      	cmp	r8, r3
 8016280:	4606      	mov	r6, r0
 8016282:	460f      	mov	r7, r1
 8016284:	d810      	bhi.n	80162a8 <__kernel_cos+0xf8>
 8016286:	4602      	mov	r2, r0
 8016288:	460b      	mov	r3, r1
 801628a:	4650      	mov	r0, sl
 801628c:	4659      	mov	r1, fp
 801628e:	f7fa fcfb 	bl	8010c88 <__aeabi_dsub>
 8016292:	460b      	mov	r3, r1
 8016294:	4926      	ldr	r1, [pc, #152]	@ (8016330 <__kernel_cos+0x180>)
 8016296:	4602      	mov	r2, r0
 8016298:	2000      	movs	r0, #0
 801629a:	f7fa fcf5 	bl	8010c88 <__aeabi_dsub>
 801629e:	ec41 0b10 	vmov	d0, r0, r1
 80162a2:	b003      	add	sp, #12
 80162a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a8:	4b22      	ldr	r3, [pc, #136]	@ (8016334 <__kernel_cos+0x184>)
 80162aa:	4921      	ldr	r1, [pc, #132]	@ (8016330 <__kernel_cos+0x180>)
 80162ac:	4598      	cmp	r8, r3
 80162ae:	bf8c      	ite	hi
 80162b0:	4d21      	ldrhi	r5, [pc, #132]	@ (8016338 <__kernel_cos+0x188>)
 80162b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80162b6:	2400      	movs	r4, #0
 80162b8:	4622      	mov	r2, r4
 80162ba:	462b      	mov	r3, r5
 80162bc:	2000      	movs	r0, #0
 80162be:	f7fa fce3 	bl	8010c88 <__aeabi_dsub>
 80162c2:	4622      	mov	r2, r4
 80162c4:	4680      	mov	r8, r0
 80162c6:	4689      	mov	r9, r1
 80162c8:	462b      	mov	r3, r5
 80162ca:	4650      	mov	r0, sl
 80162cc:	4659      	mov	r1, fp
 80162ce:	f7fa fcdb 	bl	8010c88 <__aeabi_dsub>
 80162d2:	4632      	mov	r2, r6
 80162d4:	463b      	mov	r3, r7
 80162d6:	f7fa fcd7 	bl	8010c88 <__aeabi_dsub>
 80162da:	4602      	mov	r2, r0
 80162dc:	460b      	mov	r3, r1
 80162de:	4640      	mov	r0, r8
 80162e0:	4649      	mov	r1, r9
 80162e2:	e7da      	b.n	801629a <__kernel_cos+0xea>
 80162e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8016320 <__kernel_cos+0x170>
 80162e8:	e7db      	b.n	80162a2 <__kernel_cos+0xf2>
 80162ea:	bf00      	nop
 80162ec:	f3af 8000 	nop.w
 80162f0:	be8838d4 	.word	0xbe8838d4
 80162f4:	bda8fae9 	.word	0xbda8fae9
 80162f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80162fc:	3e21ee9e 	.word	0x3e21ee9e
 8016300:	809c52ad 	.word	0x809c52ad
 8016304:	3e927e4f 	.word	0x3e927e4f
 8016308:	19cb1590 	.word	0x19cb1590
 801630c:	3efa01a0 	.word	0x3efa01a0
 8016310:	16c15177 	.word	0x16c15177
 8016314:	3f56c16c 	.word	0x3f56c16c
 8016318:	5555554c 	.word	0x5555554c
 801631c:	3fa55555 	.word	0x3fa55555
 8016320:	00000000 	.word	0x00000000
 8016324:	3ff00000 	.word	0x3ff00000
 8016328:	3fe00000 	.word	0x3fe00000
 801632c:	3fd33332 	.word	0x3fd33332
 8016330:	3ff00000 	.word	0x3ff00000
 8016334:	3fe90000 	.word	0x3fe90000
 8016338:	3fd20000 	.word	0x3fd20000
 801633c:	00000000 	.word	0x00000000

08016340 <__kernel_sin>:
 8016340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016344:	ec55 4b10 	vmov	r4, r5, d0
 8016348:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801634c:	b085      	sub	sp, #20
 801634e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8016352:	ed8d 1b02 	vstr	d1, [sp, #8]
 8016356:	4680      	mov	r8, r0
 8016358:	d205      	bcs.n	8016366 <__kernel_sin+0x26>
 801635a:	4620      	mov	r0, r4
 801635c:	4629      	mov	r1, r5
 801635e:	f7fb f8fb 	bl	8011558 <__aeabi_d2iz>
 8016362:	2800      	cmp	r0, #0
 8016364:	d052      	beq.n	801640c <__kernel_sin+0xcc>
 8016366:	4622      	mov	r2, r4
 8016368:	462b      	mov	r3, r5
 801636a:	4620      	mov	r0, r4
 801636c:	4629      	mov	r1, r5
 801636e:	f7fa fe43 	bl	8010ff8 <__aeabi_dmul>
 8016372:	4682      	mov	sl, r0
 8016374:	468b      	mov	fp, r1
 8016376:	4602      	mov	r2, r0
 8016378:	460b      	mov	r3, r1
 801637a:	4620      	mov	r0, r4
 801637c:	4629      	mov	r1, r5
 801637e:	f7fa fe3b 	bl	8010ff8 <__aeabi_dmul>
 8016382:	a342      	add	r3, pc, #264	@ (adr r3, 801648c <__kernel_sin+0x14c>)
 8016384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016388:	e9cd 0100 	strd	r0, r1, [sp]
 801638c:	4650      	mov	r0, sl
 801638e:	4659      	mov	r1, fp
 8016390:	f7fa fe32 	bl	8010ff8 <__aeabi_dmul>
 8016394:	a33f      	add	r3, pc, #252	@ (adr r3, 8016494 <__kernel_sin+0x154>)
 8016396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801639a:	f7fa fc75 	bl	8010c88 <__aeabi_dsub>
 801639e:	4652      	mov	r2, sl
 80163a0:	465b      	mov	r3, fp
 80163a2:	f7fa fe29 	bl	8010ff8 <__aeabi_dmul>
 80163a6:	a33d      	add	r3, pc, #244	@ (adr r3, 801649c <__kernel_sin+0x15c>)
 80163a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ac:	f7fa fc6e 	bl	8010c8c <__adddf3>
 80163b0:	4652      	mov	r2, sl
 80163b2:	465b      	mov	r3, fp
 80163b4:	f7fa fe20 	bl	8010ff8 <__aeabi_dmul>
 80163b8:	a33a      	add	r3, pc, #232	@ (adr r3, 80164a4 <__kernel_sin+0x164>)
 80163ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163be:	f7fa fc63 	bl	8010c88 <__aeabi_dsub>
 80163c2:	4652      	mov	r2, sl
 80163c4:	465b      	mov	r3, fp
 80163c6:	f7fa fe17 	bl	8010ff8 <__aeabi_dmul>
 80163ca:	a338      	add	r3, pc, #224	@ (adr r3, 80164ac <__kernel_sin+0x16c>)
 80163cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d0:	f7fa fc5c 	bl	8010c8c <__adddf3>
 80163d4:	4606      	mov	r6, r0
 80163d6:	460f      	mov	r7, r1
 80163d8:	f1b8 0f00 	cmp.w	r8, #0
 80163dc:	d11b      	bne.n	8016416 <__kernel_sin+0xd6>
 80163de:	4602      	mov	r2, r0
 80163e0:	460b      	mov	r3, r1
 80163e2:	4650      	mov	r0, sl
 80163e4:	4659      	mov	r1, fp
 80163e6:	f7fa fe07 	bl	8010ff8 <__aeabi_dmul>
 80163ea:	a325      	add	r3, pc, #148	@ (adr r3, 8016480 <__kernel_sin+0x140>)
 80163ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f0:	f7fa fc4a 	bl	8010c88 <__aeabi_dsub>
 80163f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163f8:	f7fa fdfe 	bl	8010ff8 <__aeabi_dmul>
 80163fc:	4602      	mov	r2, r0
 80163fe:	460b      	mov	r3, r1
 8016400:	4620      	mov	r0, r4
 8016402:	4629      	mov	r1, r5
 8016404:	f7fa fc42 	bl	8010c8c <__adddf3>
 8016408:	4604      	mov	r4, r0
 801640a:	460d      	mov	r5, r1
 801640c:	ec45 4b10 	vmov	d0, r4, r5
 8016410:	b005      	add	sp, #20
 8016412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801641a:	4b1b      	ldr	r3, [pc, #108]	@ (8016488 <__kernel_sin+0x148>)
 801641c:	2200      	movs	r2, #0
 801641e:	f7fa fdeb 	bl	8010ff8 <__aeabi_dmul>
 8016422:	4632      	mov	r2, r6
 8016424:	4680      	mov	r8, r0
 8016426:	4689      	mov	r9, r1
 8016428:	463b      	mov	r3, r7
 801642a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801642e:	f7fa fde3 	bl	8010ff8 <__aeabi_dmul>
 8016432:	4602      	mov	r2, r0
 8016434:	460b      	mov	r3, r1
 8016436:	4640      	mov	r0, r8
 8016438:	4649      	mov	r1, r9
 801643a:	f7fa fc25 	bl	8010c88 <__aeabi_dsub>
 801643e:	4652      	mov	r2, sl
 8016440:	465b      	mov	r3, fp
 8016442:	f7fa fdd9 	bl	8010ff8 <__aeabi_dmul>
 8016446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801644a:	f7fa fc1d 	bl	8010c88 <__aeabi_dsub>
 801644e:	a30c      	add	r3, pc, #48	@ (adr r3, 8016480 <__kernel_sin+0x140>)
 8016450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016454:	4606      	mov	r6, r0
 8016456:	460f      	mov	r7, r1
 8016458:	e9dd 0100 	ldrd	r0, r1, [sp]
 801645c:	f7fa fdcc 	bl	8010ff8 <__aeabi_dmul>
 8016460:	4602      	mov	r2, r0
 8016462:	460b      	mov	r3, r1
 8016464:	4630      	mov	r0, r6
 8016466:	4639      	mov	r1, r7
 8016468:	f7fa fc10 	bl	8010c8c <__adddf3>
 801646c:	4602      	mov	r2, r0
 801646e:	460b      	mov	r3, r1
 8016470:	4620      	mov	r0, r4
 8016472:	4629      	mov	r1, r5
 8016474:	f7fa fc08 	bl	8010c88 <__aeabi_dsub>
 8016478:	e7c6      	b.n	8016408 <__kernel_sin+0xc8>
 801647a:	bf00      	nop
 801647c:	f3af 8000 	nop.w
 8016480:	55555549 	.word	0x55555549
 8016484:	3fc55555 	.word	0x3fc55555
 8016488:	3fe00000 	.word	0x3fe00000
 801648c:	5acfd57c 	.word	0x5acfd57c
 8016490:	3de5d93a 	.word	0x3de5d93a
 8016494:	8a2b9ceb 	.word	0x8a2b9ceb
 8016498:	3e5ae5e6 	.word	0x3e5ae5e6
 801649c:	57b1fe7d 	.word	0x57b1fe7d
 80164a0:	3ec71de3 	.word	0x3ec71de3
 80164a4:	19c161d5 	.word	0x19c161d5
 80164a8:	3f2a01a0 	.word	0x3f2a01a0
 80164ac:	1110f8a6 	.word	0x1110f8a6
 80164b0:	3f811111 	.word	0x3f811111
 80164b4:	00000000 	.word	0x00000000

080164b8 <__ieee754_rem_pio2>:
 80164b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164bc:	ec57 6b10 	vmov	r6, r7, d0
 80164c0:	4bc5      	ldr	r3, [pc, #788]	@ (80167d8 <__ieee754_rem_pio2+0x320>)
 80164c2:	b08d      	sub	sp, #52	@ 0x34
 80164c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80164c8:	4598      	cmp	r8, r3
 80164ca:	4604      	mov	r4, r0
 80164cc:	9704      	str	r7, [sp, #16]
 80164ce:	d807      	bhi.n	80164e0 <__ieee754_rem_pio2+0x28>
 80164d0:	2200      	movs	r2, #0
 80164d2:	2300      	movs	r3, #0
 80164d4:	ed80 0b00 	vstr	d0, [r0]
 80164d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80164dc:	2500      	movs	r5, #0
 80164de:	e028      	b.n	8016532 <__ieee754_rem_pio2+0x7a>
 80164e0:	4bbe      	ldr	r3, [pc, #760]	@ (80167dc <__ieee754_rem_pio2+0x324>)
 80164e2:	4598      	cmp	r8, r3
 80164e4:	d878      	bhi.n	80165d8 <__ieee754_rem_pio2+0x120>
 80164e6:	9b04      	ldr	r3, [sp, #16]
 80164e8:	4dbd      	ldr	r5, [pc, #756]	@ (80167e0 <__ieee754_rem_pio2+0x328>)
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	4630      	mov	r0, r6
 80164ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 80167a0 <__ieee754_rem_pio2+0x2e8>)
 80164f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f4:	4639      	mov	r1, r7
 80164f6:	dd38      	ble.n	801656a <__ieee754_rem_pio2+0xb2>
 80164f8:	f7fa fbc6 	bl	8010c88 <__aeabi_dsub>
 80164fc:	45a8      	cmp	r8, r5
 80164fe:	4606      	mov	r6, r0
 8016500:	460f      	mov	r7, r1
 8016502:	d01a      	beq.n	801653a <__ieee754_rem_pio2+0x82>
 8016504:	a3a8      	add	r3, pc, #672	@ (adr r3, 80167a8 <__ieee754_rem_pio2+0x2f0>)
 8016506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650a:	f7fa fbbd 	bl	8010c88 <__aeabi_dsub>
 801650e:	4602      	mov	r2, r0
 8016510:	460b      	mov	r3, r1
 8016512:	4680      	mov	r8, r0
 8016514:	4689      	mov	r9, r1
 8016516:	4630      	mov	r0, r6
 8016518:	4639      	mov	r1, r7
 801651a:	f7fa fbb5 	bl	8010c88 <__aeabi_dsub>
 801651e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80167a8 <__ieee754_rem_pio2+0x2f0>)
 8016520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016524:	f7fa fbb0 	bl	8010c88 <__aeabi_dsub>
 8016528:	e9c4 8900 	strd	r8, r9, [r4]
 801652c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016530:	2501      	movs	r5, #1
 8016532:	4628      	mov	r0, r5
 8016534:	b00d      	add	sp, #52	@ 0x34
 8016536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653a:	a39d      	add	r3, pc, #628	@ (adr r3, 80167b0 <__ieee754_rem_pio2+0x2f8>)
 801653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016540:	f7fa fba2 	bl	8010c88 <__aeabi_dsub>
 8016544:	a39c      	add	r3, pc, #624	@ (adr r3, 80167b8 <__ieee754_rem_pio2+0x300>)
 8016546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801654a:	4606      	mov	r6, r0
 801654c:	460f      	mov	r7, r1
 801654e:	f7fa fb9b 	bl	8010c88 <__aeabi_dsub>
 8016552:	4602      	mov	r2, r0
 8016554:	460b      	mov	r3, r1
 8016556:	4680      	mov	r8, r0
 8016558:	4689      	mov	r9, r1
 801655a:	4630      	mov	r0, r6
 801655c:	4639      	mov	r1, r7
 801655e:	f7fa fb93 	bl	8010c88 <__aeabi_dsub>
 8016562:	a395      	add	r3, pc, #596	@ (adr r3, 80167b8 <__ieee754_rem_pio2+0x300>)
 8016564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016568:	e7dc      	b.n	8016524 <__ieee754_rem_pio2+0x6c>
 801656a:	f7fa fb8f 	bl	8010c8c <__adddf3>
 801656e:	45a8      	cmp	r8, r5
 8016570:	4606      	mov	r6, r0
 8016572:	460f      	mov	r7, r1
 8016574:	d018      	beq.n	80165a8 <__ieee754_rem_pio2+0xf0>
 8016576:	a38c      	add	r3, pc, #560	@ (adr r3, 80167a8 <__ieee754_rem_pio2+0x2f0>)
 8016578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801657c:	f7fa fb86 	bl	8010c8c <__adddf3>
 8016580:	4602      	mov	r2, r0
 8016582:	460b      	mov	r3, r1
 8016584:	4680      	mov	r8, r0
 8016586:	4689      	mov	r9, r1
 8016588:	4630      	mov	r0, r6
 801658a:	4639      	mov	r1, r7
 801658c:	f7fa fb7c 	bl	8010c88 <__aeabi_dsub>
 8016590:	a385      	add	r3, pc, #532	@ (adr r3, 80167a8 <__ieee754_rem_pio2+0x2f0>)
 8016592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016596:	f7fa fb79 	bl	8010c8c <__adddf3>
 801659a:	f04f 35ff 	mov.w	r5, #4294967295
 801659e:	e9c4 8900 	strd	r8, r9, [r4]
 80165a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80165a6:	e7c4      	b.n	8016532 <__ieee754_rem_pio2+0x7a>
 80165a8:	a381      	add	r3, pc, #516	@ (adr r3, 80167b0 <__ieee754_rem_pio2+0x2f8>)
 80165aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ae:	f7fa fb6d 	bl	8010c8c <__adddf3>
 80165b2:	a381      	add	r3, pc, #516	@ (adr r3, 80167b8 <__ieee754_rem_pio2+0x300>)
 80165b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b8:	4606      	mov	r6, r0
 80165ba:	460f      	mov	r7, r1
 80165bc:	f7fa fb66 	bl	8010c8c <__adddf3>
 80165c0:	4602      	mov	r2, r0
 80165c2:	460b      	mov	r3, r1
 80165c4:	4680      	mov	r8, r0
 80165c6:	4689      	mov	r9, r1
 80165c8:	4630      	mov	r0, r6
 80165ca:	4639      	mov	r1, r7
 80165cc:	f7fa fb5c 	bl	8010c88 <__aeabi_dsub>
 80165d0:	a379      	add	r3, pc, #484	@ (adr r3, 80167b8 <__ieee754_rem_pio2+0x300>)
 80165d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d6:	e7de      	b.n	8016596 <__ieee754_rem_pio2+0xde>
 80165d8:	4b82      	ldr	r3, [pc, #520]	@ (80167e4 <__ieee754_rem_pio2+0x32c>)
 80165da:	4598      	cmp	r8, r3
 80165dc:	f200 80d1 	bhi.w	8016782 <__ieee754_rem_pio2+0x2ca>
 80165e0:	f000 f966 	bl	80168b0 <fabs>
 80165e4:	ec57 6b10 	vmov	r6, r7, d0
 80165e8:	a375      	add	r3, pc, #468	@ (adr r3, 80167c0 <__ieee754_rem_pio2+0x308>)
 80165ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ee:	4630      	mov	r0, r6
 80165f0:	4639      	mov	r1, r7
 80165f2:	f7fa fd01 	bl	8010ff8 <__aeabi_dmul>
 80165f6:	4b7c      	ldr	r3, [pc, #496]	@ (80167e8 <__ieee754_rem_pio2+0x330>)
 80165f8:	2200      	movs	r2, #0
 80165fa:	f7fa fb47 	bl	8010c8c <__adddf3>
 80165fe:	f7fa ffab 	bl	8011558 <__aeabi_d2iz>
 8016602:	4605      	mov	r5, r0
 8016604:	f7fa fc8e 	bl	8010f24 <__aeabi_i2d>
 8016608:	4602      	mov	r2, r0
 801660a:	460b      	mov	r3, r1
 801660c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016610:	a363      	add	r3, pc, #396	@ (adr r3, 80167a0 <__ieee754_rem_pio2+0x2e8>)
 8016612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016616:	f7fa fcef 	bl	8010ff8 <__aeabi_dmul>
 801661a:	4602      	mov	r2, r0
 801661c:	460b      	mov	r3, r1
 801661e:	4630      	mov	r0, r6
 8016620:	4639      	mov	r1, r7
 8016622:	f7fa fb31 	bl	8010c88 <__aeabi_dsub>
 8016626:	a360      	add	r3, pc, #384	@ (adr r3, 80167a8 <__ieee754_rem_pio2+0x2f0>)
 8016628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801662c:	4682      	mov	sl, r0
 801662e:	468b      	mov	fp, r1
 8016630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016634:	f7fa fce0 	bl	8010ff8 <__aeabi_dmul>
 8016638:	2d1f      	cmp	r5, #31
 801663a:	4606      	mov	r6, r0
 801663c:	460f      	mov	r7, r1
 801663e:	dc0c      	bgt.n	801665a <__ieee754_rem_pio2+0x1a2>
 8016640:	4b6a      	ldr	r3, [pc, #424]	@ (80167ec <__ieee754_rem_pio2+0x334>)
 8016642:	1e6a      	subs	r2, r5, #1
 8016644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016648:	4543      	cmp	r3, r8
 801664a:	d006      	beq.n	801665a <__ieee754_rem_pio2+0x1a2>
 801664c:	4632      	mov	r2, r6
 801664e:	463b      	mov	r3, r7
 8016650:	4650      	mov	r0, sl
 8016652:	4659      	mov	r1, fp
 8016654:	f7fa fb18 	bl	8010c88 <__aeabi_dsub>
 8016658:	e00e      	b.n	8016678 <__ieee754_rem_pio2+0x1c0>
 801665a:	463b      	mov	r3, r7
 801665c:	4632      	mov	r2, r6
 801665e:	4650      	mov	r0, sl
 8016660:	4659      	mov	r1, fp
 8016662:	f7fa fb11 	bl	8010c88 <__aeabi_dsub>
 8016666:	ea4f 5328 	mov.w	r3, r8, asr #20
 801666a:	9305      	str	r3, [sp, #20]
 801666c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016670:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8016674:	2b10      	cmp	r3, #16
 8016676:	dc02      	bgt.n	801667e <__ieee754_rem_pio2+0x1c6>
 8016678:	e9c4 0100 	strd	r0, r1, [r4]
 801667c:	e039      	b.n	80166f2 <__ieee754_rem_pio2+0x23a>
 801667e:	a34c      	add	r3, pc, #304	@ (adr r3, 80167b0 <__ieee754_rem_pio2+0x2f8>)
 8016680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016688:	f7fa fcb6 	bl	8010ff8 <__aeabi_dmul>
 801668c:	4606      	mov	r6, r0
 801668e:	460f      	mov	r7, r1
 8016690:	4602      	mov	r2, r0
 8016692:	460b      	mov	r3, r1
 8016694:	4650      	mov	r0, sl
 8016696:	4659      	mov	r1, fp
 8016698:	f7fa faf6 	bl	8010c88 <__aeabi_dsub>
 801669c:	4602      	mov	r2, r0
 801669e:	460b      	mov	r3, r1
 80166a0:	4680      	mov	r8, r0
 80166a2:	4689      	mov	r9, r1
 80166a4:	4650      	mov	r0, sl
 80166a6:	4659      	mov	r1, fp
 80166a8:	f7fa faee 	bl	8010c88 <__aeabi_dsub>
 80166ac:	4632      	mov	r2, r6
 80166ae:	463b      	mov	r3, r7
 80166b0:	f7fa faea 	bl	8010c88 <__aeabi_dsub>
 80166b4:	a340      	add	r3, pc, #256	@ (adr r3, 80167b8 <__ieee754_rem_pio2+0x300>)
 80166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ba:	4606      	mov	r6, r0
 80166bc:	460f      	mov	r7, r1
 80166be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166c2:	f7fa fc99 	bl	8010ff8 <__aeabi_dmul>
 80166c6:	4632      	mov	r2, r6
 80166c8:	463b      	mov	r3, r7
 80166ca:	f7fa fadd 	bl	8010c88 <__aeabi_dsub>
 80166ce:	4602      	mov	r2, r0
 80166d0:	460b      	mov	r3, r1
 80166d2:	4606      	mov	r6, r0
 80166d4:	460f      	mov	r7, r1
 80166d6:	4640      	mov	r0, r8
 80166d8:	4649      	mov	r1, r9
 80166da:	f7fa fad5 	bl	8010c88 <__aeabi_dsub>
 80166de:	9a05      	ldr	r2, [sp, #20]
 80166e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80166e4:	1ad3      	subs	r3, r2, r3
 80166e6:	2b31      	cmp	r3, #49	@ 0x31
 80166e8:	dc20      	bgt.n	801672c <__ieee754_rem_pio2+0x274>
 80166ea:	e9c4 0100 	strd	r0, r1, [r4]
 80166ee:	46c2      	mov	sl, r8
 80166f0:	46cb      	mov	fp, r9
 80166f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80166f6:	4650      	mov	r0, sl
 80166f8:	4642      	mov	r2, r8
 80166fa:	464b      	mov	r3, r9
 80166fc:	4659      	mov	r1, fp
 80166fe:	f7fa fac3 	bl	8010c88 <__aeabi_dsub>
 8016702:	463b      	mov	r3, r7
 8016704:	4632      	mov	r2, r6
 8016706:	f7fa fabf 	bl	8010c88 <__aeabi_dsub>
 801670a:	9b04      	ldr	r3, [sp, #16]
 801670c:	2b00      	cmp	r3, #0
 801670e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016712:	f6bf af0e 	bge.w	8016532 <__ieee754_rem_pio2+0x7a>
 8016716:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801671a:	6063      	str	r3, [r4, #4]
 801671c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016720:	f8c4 8000 	str.w	r8, [r4]
 8016724:	60a0      	str	r0, [r4, #8]
 8016726:	60e3      	str	r3, [r4, #12]
 8016728:	426d      	negs	r5, r5
 801672a:	e702      	b.n	8016532 <__ieee754_rem_pio2+0x7a>
 801672c:	a326      	add	r3, pc, #152	@ (adr r3, 80167c8 <__ieee754_rem_pio2+0x310>)
 801672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016736:	f7fa fc5f 	bl	8010ff8 <__aeabi_dmul>
 801673a:	4606      	mov	r6, r0
 801673c:	460f      	mov	r7, r1
 801673e:	4602      	mov	r2, r0
 8016740:	460b      	mov	r3, r1
 8016742:	4640      	mov	r0, r8
 8016744:	4649      	mov	r1, r9
 8016746:	f7fa fa9f 	bl	8010c88 <__aeabi_dsub>
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	4682      	mov	sl, r0
 8016750:	468b      	mov	fp, r1
 8016752:	4640      	mov	r0, r8
 8016754:	4649      	mov	r1, r9
 8016756:	f7fa fa97 	bl	8010c88 <__aeabi_dsub>
 801675a:	4632      	mov	r2, r6
 801675c:	463b      	mov	r3, r7
 801675e:	f7fa fa93 	bl	8010c88 <__aeabi_dsub>
 8016762:	a31b      	add	r3, pc, #108	@ (adr r3, 80167d0 <__ieee754_rem_pio2+0x318>)
 8016764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016768:	4606      	mov	r6, r0
 801676a:	460f      	mov	r7, r1
 801676c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016770:	f7fa fc42 	bl	8010ff8 <__aeabi_dmul>
 8016774:	4632      	mov	r2, r6
 8016776:	463b      	mov	r3, r7
 8016778:	f7fa fa86 	bl	8010c88 <__aeabi_dsub>
 801677c:	4606      	mov	r6, r0
 801677e:	460f      	mov	r7, r1
 8016780:	e764      	b.n	801664c <__ieee754_rem_pio2+0x194>
 8016782:	4b1b      	ldr	r3, [pc, #108]	@ (80167f0 <__ieee754_rem_pio2+0x338>)
 8016784:	4598      	cmp	r8, r3
 8016786:	d935      	bls.n	80167f4 <__ieee754_rem_pio2+0x33c>
 8016788:	4632      	mov	r2, r6
 801678a:	463b      	mov	r3, r7
 801678c:	4630      	mov	r0, r6
 801678e:	4639      	mov	r1, r7
 8016790:	f7fa fa7a 	bl	8010c88 <__aeabi_dsub>
 8016794:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016798:	e9c4 0100 	strd	r0, r1, [r4]
 801679c:	e69e      	b.n	80164dc <__ieee754_rem_pio2+0x24>
 801679e:	bf00      	nop
 80167a0:	54400000 	.word	0x54400000
 80167a4:	3ff921fb 	.word	0x3ff921fb
 80167a8:	1a626331 	.word	0x1a626331
 80167ac:	3dd0b461 	.word	0x3dd0b461
 80167b0:	1a600000 	.word	0x1a600000
 80167b4:	3dd0b461 	.word	0x3dd0b461
 80167b8:	2e037073 	.word	0x2e037073
 80167bc:	3ba3198a 	.word	0x3ba3198a
 80167c0:	6dc9c883 	.word	0x6dc9c883
 80167c4:	3fe45f30 	.word	0x3fe45f30
 80167c8:	2e000000 	.word	0x2e000000
 80167cc:	3ba3198a 	.word	0x3ba3198a
 80167d0:	252049c1 	.word	0x252049c1
 80167d4:	397b839a 	.word	0x397b839a
 80167d8:	3fe921fb 	.word	0x3fe921fb
 80167dc:	4002d97b 	.word	0x4002d97b
 80167e0:	3ff921fb 	.word	0x3ff921fb
 80167e4:	413921fb 	.word	0x413921fb
 80167e8:	3fe00000 	.word	0x3fe00000
 80167ec:	080175d0 	.word	0x080175d0
 80167f0:	7fefffff 	.word	0x7fefffff
 80167f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80167f8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80167fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8016800:	4630      	mov	r0, r6
 8016802:	460f      	mov	r7, r1
 8016804:	f7fa fea8 	bl	8011558 <__aeabi_d2iz>
 8016808:	f7fa fb8c 	bl	8010f24 <__aeabi_i2d>
 801680c:	4602      	mov	r2, r0
 801680e:	460b      	mov	r3, r1
 8016810:	4630      	mov	r0, r6
 8016812:	4639      	mov	r1, r7
 8016814:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016818:	f7fa fa36 	bl	8010c88 <__aeabi_dsub>
 801681c:	4b22      	ldr	r3, [pc, #136]	@ (80168a8 <__ieee754_rem_pio2+0x3f0>)
 801681e:	2200      	movs	r2, #0
 8016820:	f7fa fbea 	bl	8010ff8 <__aeabi_dmul>
 8016824:	460f      	mov	r7, r1
 8016826:	4606      	mov	r6, r0
 8016828:	f7fa fe96 	bl	8011558 <__aeabi_d2iz>
 801682c:	f7fa fb7a 	bl	8010f24 <__aeabi_i2d>
 8016830:	4602      	mov	r2, r0
 8016832:	460b      	mov	r3, r1
 8016834:	4630      	mov	r0, r6
 8016836:	4639      	mov	r1, r7
 8016838:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801683c:	f7fa fa24 	bl	8010c88 <__aeabi_dsub>
 8016840:	4b19      	ldr	r3, [pc, #100]	@ (80168a8 <__ieee754_rem_pio2+0x3f0>)
 8016842:	2200      	movs	r2, #0
 8016844:	f7fa fbd8 	bl	8010ff8 <__aeabi_dmul>
 8016848:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801684c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8016850:	f04f 0803 	mov.w	r8, #3
 8016854:	2600      	movs	r6, #0
 8016856:	2700      	movs	r7, #0
 8016858:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801685c:	4632      	mov	r2, r6
 801685e:	463b      	mov	r3, r7
 8016860:	46c2      	mov	sl, r8
 8016862:	f108 38ff 	add.w	r8, r8, #4294967295
 8016866:	f7fa fe2f 	bl	80114c8 <__aeabi_dcmpeq>
 801686a:	2800      	cmp	r0, #0
 801686c:	d1f4      	bne.n	8016858 <__ieee754_rem_pio2+0x3a0>
 801686e:	4b0f      	ldr	r3, [pc, #60]	@ (80168ac <__ieee754_rem_pio2+0x3f4>)
 8016870:	9301      	str	r3, [sp, #4]
 8016872:	2302      	movs	r3, #2
 8016874:	9300      	str	r3, [sp, #0]
 8016876:	462a      	mov	r2, r5
 8016878:	4653      	mov	r3, sl
 801687a:	4621      	mov	r1, r4
 801687c:	a806      	add	r0, sp, #24
 801687e:	f000 f81f 	bl	80168c0 <__kernel_rem_pio2>
 8016882:	9b04      	ldr	r3, [sp, #16]
 8016884:	2b00      	cmp	r3, #0
 8016886:	4605      	mov	r5, r0
 8016888:	f6bf ae53 	bge.w	8016532 <__ieee754_rem_pio2+0x7a>
 801688c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016890:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016894:	e9c4 2300 	strd	r2, r3, [r4]
 8016898:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801689c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80168a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80168a4:	e740      	b.n	8016728 <__ieee754_rem_pio2+0x270>
 80168a6:	bf00      	nop
 80168a8:	41700000 	.word	0x41700000
 80168ac:	08017650 	.word	0x08017650

080168b0 <fabs>:
 80168b0:	ec51 0b10 	vmov	r0, r1, d0
 80168b4:	4602      	mov	r2, r0
 80168b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80168ba:	ec43 2b10 	vmov	d0, r2, r3
 80168be:	4770      	bx	lr

080168c0 <__kernel_rem_pio2>:
 80168c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c4:	ed2d 8b02 	vpush	{d8}
 80168c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80168cc:	f112 0f14 	cmn.w	r2, #20
 80168d0:	9306      	str	r3, [sp, #24]
 80168d2:	9104      	str	r1, [sp, #16]
 80168d4:	4bbe      	ldr	r3, [pc, #760]	@ (8016bd0 <__kernel_rem_pio2+0x310>)
 80168d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80168d8:	9008      	str	r0, [sp, #32]
 80168da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	9b06      	ldr	r3, [sp, #24]
 80168e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80168e6:	bfa8      	it	ge
 80168e8:	1ed4      	subge	r4, r2, #3
 80168ea:	9305      	str	r3, [sp, #20]
 80168ec:	bfb2      	itee	lt
 80168ee:	2400      	movlt	r4, #0
 80168f0:	2318      	movge	r3, #24
 80168f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80168f6:	f06f 0317 	mvn.w	r3, #23
 80168fa:	fb04 3303 	mla	r3, r4, r3, r3
 80168fe:	eb03 0b02 	add.w	fp, r3, r2
 8016902:	9b00      	ldr	r3, [sp, #0]
 8016904:	9a05      	ldr	r2, [sp, #20]
 8016906:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8016bc0 <__kernel_rem_pio2+0x300>
 801690a:	eb03 0802 	add.w	r8, r3, r2
 801690e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8016910:	1aa7      	subs	r7, r4, r2
 8016912:	ae20      	add	r6, sp, #128	@ 0x80
 8016914:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016918:	2500      	movs	r5, #0
 801691a:	4545      	cmp	r5, r8
 801691c:	dd13      	ble.n	8016946 <__kernel_rem_pio2+0x86>
 801691e:	9b06      	ldr	r3, [sp, #24]
 8016920:	aa20      	add	r2, sp, #128	@ 0x80
 8016922:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016926:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801692a:	f04f 0800 	mov.w	r8, #0
 801692e:	9b00      	ldr	r3, [sp, #0]
 8016930:	4598      	cmp	r8, r3
 8016932:	dc31      	bgt.n	8016998 <__kernel_rem_pio2+0xd8>
 8016934:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8016bc0 <__kernel_rem_pio2+0x300>
 8016938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801693c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016940:	462f      	mov	r7, r5
 8016942:	2600      	movs	r6, #0
 8016944:	e01b      	b.n	801697e <__kernel_rem_pio2+0xbe>
 8016946:	42ef      	cmn	r7, r5
 8016948:	d407      	bmi.n	801695a <__kernel_rem_pio2+0x9a>
 801694a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801694e:	f7fa fae9 	bl	8010f24 <__aeabi_i2d>
 8016952:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016956:	3501      	adds	r5, #1
 8016958:	e7df      	b.n	801691a <__kernel_rem_pio2+0x5a>
 801695a:	ec51 0b18 	vmov	r0, r1, d8
 801695e:	e7f8      	b.n	8016952 <__kernel_rem_pio2+0x92>
 8016960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016964:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016968:	f7fa fb46 	bl	8010ff8 <__aeabi_dmul>
 801696c:	4602      	mov	r2, r0
 801696e:	460b      	mov	r3, r1
 8016970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016974:	f7fa f98a 	bl	8010c8c <__adddf3>
 8016978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801697c:	3601      	adds	r6, #1
 801697e:	9b05      	ldr	r3, [sp, #20]
 8016980:	429e      	cmp	r6, r3
 8016982:	f1a7 0708 	sub.w	r7, r7, #8
 8016986:	ddeb      	ble.n	8016960 <__kernel_rem_pio2+0xa0>
 8016988:	ed9d 7b02 	vldr	d7, [sp, #8]
 801698c:	f108 0801 	add.w	r8, r8, #1
 8016990:	ecaa 7b02 	vstmia	sl!, {d7}
 8016994:	3508      	adds	r5, #8
 8016996:	e7ca      	b.n	801692e <__kernel_rem_pio2+0x6e>
 8016998:	9b00      	ldr	r3, [sp, #0]
 801699a:	f8dd 8000 	ldr.w	r8, [sp]
 801699e:	aa0c      	add	r2, sp, #48	@ 0x30
 80169a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80169a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80169a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80169a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80169ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80169ae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80169b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80169b4:	ab98      	add	r3, sp, #608	@ 0x260
 80169b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80169ba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80169be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80169c2:	ac0c      	add	r4, sp, #48	@ 0x30
 80169c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80169c6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80169ca:	46a1      	mov	r9, r4
 80169cc:	46c2      	mov	sl, r8
 80169ce:	f1ba 0f00 	cmp.w	sl, #0
 80169d2:	f1a5 0508 	sub.w	r5, r5, #8
 80169d6:	dc77      	bgt.n	8016ac8 <__kernel_rem_pio2+0x208>
 80169d8:	4658      	mov	r0, fp
 80169da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80169de:	f000 fac7 	bl	8016f70 <scalbn>
 80169e2:	ec57 6b10 	vmov	r6, r7, d0
 80169e6:	2200      	movs	r2, #0
 80169e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80169ec:	4630      	mov	r0, r6
 80169ee:	4639      	mov	r1, r7
 80169f0:	f7fa fb02 	bl	8010ff8 <__aeabi_dmul>
 80169f4:	ec41 0b10 	vmov	d0, r0, r1
 80169f8:	f000 fb3a 	bl	8017070 <floor>
 80169fc:	4b75      	ldr	r3, [pc, #468]	@ (8016bd4 <__kernel_rem_pio2+0x314>)
 80169fe:	ec51 0b10 	vmov	r0, r1, d0
 8016a02:	2200      	movs	r2, #0
 8016a04:	f7fa faf8 	bl	8010ff8 <__aeabi_dmul>
 8016a08:	4602      	mov	r2, r0
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	4639      	mov	r1, r7
 8016a10:	f7fa f93a 	bl	8010c88 <__aeabi_dsub>
 8016a14:	460f      	mov	r7, r1
 8016a16:	4606      	mov	r6, r0
 8016a18:	f7fa fd9e 	bl	8011558 <__aeabi_d2iz>
 8016a1c:	9002      	str	r0, [sp, #8]
 8016a1e:	f7fa fa81 	bl	8010f24 <__aeabi_i2d>
 8016a22:	4602      	mov	r2, r0
 8016a24:	460b      	mov	r3, r1
 8016a26:	4630      	mov	r0, r6
 8016a28:	4639      	mov	r1, r7
 8016a2a:	f7fa f92d 	bl	8010c88 <__aeabi_dsub>
 8016a2e:	f1bb 0f00 	cmp.w	fp, #0
 8016a32:	4606      	mov	r6, r0
 8016a34:	460f      	mov	r7, r1
 8016a36:	dd6c      	ble.n	8016b12 <__kernel_rem_pio2+0x252>
 8016a38:	f108 31ff 	add.w	r1, r8, #4294967295
 8016a3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8016a3e:	9d02      	ldr	r5, [sp, #8]
 8016a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a44:	f1cb 0018 	rsb	r0, fp, #24
 8016a48:	fa43 f200 	asr.w	r2, r3, r0
 8016a4c:	4415      	add	r5, r2
 8016a4e:	4082      	lsls	r2, r0
 8016a50:	1a9b      	subs	r3, r3, r2
 8016a52:	aa0c      	add	r2, sp, #48	@ 0x30
 8016a54:	9502      	str	r5, [sp, #8]
 8016a56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016a5a:	f1cb 0217 	rsb	r2, fp, #23
 8016a5e:	fa43 f902 	asr.w	r9, r3, r2
 8016a62:	f1b9 0f00 	cmp.w	r9, #0
 8016a66:	dd64      	ble.n	8016b32 <__kernel_rem_pio2+0x272>
 8016a68:	9b02      	ldr	r3, [sp, #8]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	9302      	str	r3, [sp, #8]
 8016a70:	4615      	mov	r5, r2
 8016a72:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8016a76:	4590      	cmp	r8, r2
 8016a78:	f300 80b8 	bgt.w	8016bec <__kernel_rem_pio2+0x32c>
 8016a7c:	f1bb 0f00 	cmp.w	fp, #0
 8016a80:	dd07      	ble.n	8016a92 <__kernel_rem_pio2+0x1d2>
 8016a82:	f1bb 0f01 	cmp.w	fp, #1
 8016a86:	f000 80bf 	beq.w	8016c08 <__kernel_rem_pio2+0x348>
 8016a8a:	f1bb 0f02 	cmp.w	fp, #2
 8016a8e:	f000 80c6 	beq.w	8016c1e <__kernel_rem_pio2+0x35e>
 8016a92:	f1b9 0f02 	cmp.w	r9, #2
 8016a96:	d14c      	bne.n	8016b32 <__kernel_rem_pio2+0x272>
 8016a98:	4632      	mov	r2, r6
 8016a9a:	463b      	mov	r3, r7
 8016a9c:	494e      	ldr	r1, [pc, #312]	@ (8016bd8 <__kernel_rem_pio2+0x318>)
 8016a9e:	2000      	movs	r0, #0
 8016aa0:	f7fa f8f2 	bl	8010c88 <__aeabi_dsub>
 8016aa4:	4606      	mov	r6, r0
 8016aa6:	460f      	mov	r7, r1
 8016aa8:	2d00      	cmp	r5, #0
 8016aaa:	d042      	beq.n	8016b32 <__kernel_rem_pio2+0x272>
 8016aac:	4658      	mov	r0, fp
 8016aae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8016bc8 <__kernel_rem_pio2+0x308>
 8016ab2:	f000 fa5d 	bl	8016f70 <scalbn>
 8016ab6:	4630      	mov	r0, r6
 8016ab8:	4639      	mov	r1, r7
 8016aba:	ec53 2b10 	vmov	r2, r3, d0
 8016abe:	f7fa f8e3 	bl	8010c88 <__aeabi_dsub>
 8016ac2:	4606      	mov	r6, r0
 8016ac4:	460f      	mov	r7, r1
 8016ac6:	e034      	b.n	8016b32 <__kernel_rem_pio2+0x272>
 8016ac8:	4b44      	ldr	r3, [pc, #272]	@ (8016bdc <__kernel_rem_pio2+0x31c>)
 8016aca:	2200      	movs	r2, #0
 8016acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016ad0:	f7fa fa92 	bl	8010ff8 <__aeabi_dmul>
 8016ad4:	f7fa fd40 	bl	8011558 <__aeabi_d2iz>
 8016ad8:	f7fa fa24 	bl	8010f24 <__aeabi_i2d>
 8016adc:	4b40      	ldr	r3, [pc, #256]	@ (8016be0 <__kernel_rem_pio2+0x320>)
 8016ade:	2200      	movs	r2, #0
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	460f      	mov	r7, r1
 8016ae4:	f7fa fa88 	bl	8010ff8 <__aeabi_dmul>
 8016ae8:	4602      	mov	r2, r0
 8016aea:	460b      	mov	r3, r1
 8016aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016af0:	f7fa f8ca 	bl	8010c88 <__aeabi_dsub>
 8016af4:	f7fa fd30 	bl	8011558 <__aeabi_d2iz>
 8016af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016afc:	f849 0b04 	str.w	r0, [r9], #4
 8016b00:	4639      	mov	r1, r7
 8016b02:	4630      	mov	r0, r6
 8016b04:	f7fa f8c2 	bl	8010c8c <__adddf3>
 8016b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016b10:	e75d      	b.n	80169ce <__kernel_rem_pio2+0x10e>
 8016b12:	d107      	bne.n	8016b24 <__kernel_rem_pio2+0x264>
 8016b14:	f108 33ff 	add.w	r3, r8, #4294967295
 8016b18:	aa0c      	add	r2, sp, #48	@ 0x30
 8016b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b1e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8016b22:	e79e      	b.n	8016a62 <__kernel_rem_pio2+0x1a2>
 8016b24:	4b2f      	ldr	r3, [pc, #188]	@ (8016be4 <__kernel_rem_pio2+0x324>)
 8016b26:	2200      	movs	r2, #0
 8016b28:	f7fa fcec 	bl	8011504 <__aeabi_dcmpge>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d143      	bne.n	8016bb8 <__kernel_rem_pio2+0x2f8>
 8016b30:	4681      	mov	r9, r0
 8016b32:	2200      	movs	r2, #0
 8016b34:	2300      	movs	r3, #0
 8016b36:	4630      	mov	r0, r6
 8016b38:	4639      	mov	r1, r7
 8016b3a:	f7fa fcc5 	bl	80114c8 <__aeabi_dcmpeq>
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	f000 80bf 	beq.w	8016cc2 <__kernel_rem_pio2+0x402>
 8016b44:	f108 33ff 	add.w	r3, r8, #4294967295
 8016b48:	2200      	movs	r2, #0
 8016b4a:	9900      	ldr	r1, [sp, #0]
 8016b4c:	428b      	cmp	r3, r1
 8016b4e:	da6e      	bge.n	8016c2e <__kernel_rem_pio2+0x36e>
 8016b50:	2a00      	cmp	r2, #0
 8016b52:	f000 8089 	beq.w	8016c68 <__kernel_rem_pio2+0x3a8>
 8016b56:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8016b5c:	f1ab 0b18 	sub.w	fp, fp, #24
 8016b60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d0f6      	beq.n	8016b56 <__kernel_rem_pio2+0x296>
 8016b68:	4658      	mov	r0, fp
 8016b6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8016bc8 <__kernel_rem_pio2+0x308>
 8016b6e:	f000 f9ff 	bl	8016f70 <scalbn>
 8016b72:	f108 0301 	add.w	r3, r8, #1
 8016b76:	00da      	lsls	r2, r3, #3
 8016b78:	9205      	str	r2, [sp, #20]
 8016b7a:	ec55 4b10 	vmov	r4, r5, d0
 8016b7e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8016b80:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8016bdc <__kernel_rem_pio2+0x31c>
 8016b84:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8016b88:	4646      	mov	r6, r8
 8016b8a:	f04f 0a00 	mov.w	sl, #0
 8016b8e:	2e00      	cmp	r6, #0
 8016b90:	f280 80cf 	bge.w	8016d32 <__kernel_rem_pio2+0x472>
 8016b94:	4644      	mov	r4, r8
 8016b96:	2c00      	cmp	r4, #0
 8016b98:	f2c0 80fd 	blt.w	8016d96 <__kernel_rem_pio2+0x4d6>
 8016b9c:	4b12      	ldr	r3, [pc, #72]	@ (8016be8 <__kernel_rem_pio2+0x328>)
 8016b9e:	461f      	mov	r7, r3
 8016ba0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8016ba2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016ba6:	9306      	str	r3, [sp, #24]
 8016ba8:	f04f 0a00 	mov.w	sl, #0
 8016bac:	f04f 0b00 	mov.w	fp, #0
 8016bb0:	2600      	movs	r6, #0
 8016bb2:	eba8 0504 	sub.w	r5, r8, r4
 8016bb6:	e0e2      	b.n	8016d7e <__kernel_rem_pio2+0x4be>
 8016bb8:	f04f 0902 	mov.w	r9, #2
 8016bbc:	e754      	b.n	8016a68 <__kernel_rem_pio2+0x1a8>
 8016bbe:	bf00      	nop
	...
 8016bcc:	3ff00000 	.word	0x3ff00000
 8016bd0:	08017798 	.word	0x08017798
 8016bd4:	40200000 	.word	0x40200000
 8016bd8:	3ff00000 	.word	0x3ff00000
 8016bdc:	3e700000 	.word	0x3e700000
 8016be0:	41700000 	.word	0x41700000
 8016be4:	3fe00000 	.word	0x3fe00000
 8016be8:	08017758 	.word	0x08017758
 8016bec:	f854 3b04 	ldr.w	r3, [r4], #4
 8016bf0:	b945      	cbnz	r5, 8016c04 <__kernel_rem_pio2+0x344>
 8016bf2:	b123      	cbz	r3, 8016bfe <__kernel_rem_pio2+0x33e>
 8016bf4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8016bf8:	f844 3c04 	str.w	r3, [r4, #-4]
 8016bfc:	2301      	movs	r3, #1
 8016bfe:	3201      	adds	r2, #1
 8016c00:	461d      	mov	r5, r3
 8016c02:	e738      	b.n	8016a76 <__kernel_rem_pio2+0x1b6>
 8016c04:	1acb      	subs	r3, r1, r3
 8016c06:	e7f7      	b.n	8016bf8 <__kernel_rem_pio2+0x338>
 8016c08:	f108 32ff 	add.w	r2, r8, #4294967295
 8016c0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8016c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016c16:	a90c      	add	r1, sp, #48	@ 0x30
 8016c18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016c1c:	e739      	b.n	8016a92 <__kernel_rem_pio2+0x1d2>
 8016c1e:	f108 32ff 	add.w	r2, r8, #4294967295
 8016c22:	ab0c      	add	r3, sp, #48	@ 0x30
 8016c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016c2c:	e7f3      	b.n	8016c16 <__kernel_rem_pio2+0x356>
 8016c2e:	a90c      	add	r1, sp, #48	@ 0x30
 8016c30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016c34:	3b01      	subs	r3, #1
 8016c36:	430a      	orrs	r2, r1
 8016c38:	e787      	b.n	8016b4a <__kernel_rem_pio2+0x28a>
 8016c3a:	3401      	adds	r4, #1
 8016c3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016c40:	2a00      	cmp	r2, #0
 8016c42:	d0fa      	beq.n	8016c3a <__kernel_rem_pio2+0x37a>
 8016c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016c46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016c4a:	eb0d 0503 	add.w	r5, sp, r3
 8016c4e:	9b06      	ldr	r3, [sp, #24]
 8016c50:	aa20      	add	r2, sp, #128	@ 0x80
 8016c52:	4443      	add	r3, r8
 8016c54:	f108 0701 	add.w	r7, r8, #1
 8016c58:	3d98      	subs	r5, #152	@ 0x98
 8016c5a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8016c5e:	4444      	add	r4, r8
 8016c60:	42bc      	cmp	r4, r7
 8016c62:	da04      	bge.n	8016c6e <__kernel_rem_pio2+0x3ae>
 8016c64:	46a0      	mov	r8, r4
 8016c66:	e6a2      	b.n	80169ae <__kernel_rem_pio2+0xee>
 8016c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c6a:	2401      	movs	r4, #1
 8016c6c:	e7e6      	b.n	8016c3c <__kernel_rem_pio2+0x37c>
 8016c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c70:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8016c74:	f7fa f956 	bl	8010f24 <__aeabi_i2d>
 8016c78:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8016f40 <__kernel_rem_pio2+0x680>
 8016c7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016c80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016c88:	46b2      	mov	sl, r6
 8016c8a:	f04f 0800 	mov.w	r8, #0
 8016c8e:	9b05      	ldr	r3, [sp, #20]
 8016c90:	4598      	cmp	r8, r3
 8016c92:	dd05      	ble.n	8016ca0 <__kernel_rem_pio2+0x3e0>
 8016c94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c98:	3701      	adds	r7, #1
 8016c9a:	eca5 7b02 	vstmia	r5!, {d7}
 8016c9e:	e7df      	b.n	8016c60 <__kernel_rem_pio2+0x3a0>
 8016ca0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8016ca4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016ca8:	f7fa f9a6 	bl	8010ff8 <__aeabi_dmul>
 8016cac:	4602      	mov	r2, r0
 8016cae:	460b      	mov	r3, r1
 8016cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016cb4:	f7f9 ffea 	bl	8010c8c <__adddf3>
 8016cb8:	f108 0801 	add.w	r8, r8, #1
 8016cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016cc0:	e7e5      	b.n	8016c8e <__kernel_rem_pio2+0x3ce>
 8016cc2:	f1cb 0000 	rsb	r0, fp, #0
 8016cc6:	ec47 6b10 	vmov	d0, r6, r7
 8016cca:	f000 f951 	bl	8016f70 <scalbn>
 8016cce:	ec55 4b10 	vmov	r4, r5, d0
 8016cd2:	4b9d      	ldr	r3, [pc, #628]	@ (8016f48 <__kernel_rem_pio2+0x688>)
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	4629      	mov	r1, r5
 8016cda:	f7fa fc13 	bl	8011504 <__aeabi_dcmpge>
 8016cde:	b300      	cbz	r0, 8016d22 <__kernel_rem_pio2+0x462>
 8016ce0:	4b9a      	ldr	r3, [pc, #616]	@ (8016f4c <__kernel_rem_pio2+0x68c>)
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	4629      	mov	r1, r5
 8016ce8:	f7fa f986 	bl	8010ff8 <__aeabi_dmul>
 8016cec:	f7fa fc34 	bl	8011558 <__aeabi_d2iz>
 8016cf0:	4606      	mov	r6, r0
 8016cf2:	f7fa f917 	bl	8010f24 <__aeabi_i2d>
 8016cf6:	4b94      	ldr	r3, [pc, #592]	@ (8016f48 <__kernel_rem_pio2+0x688>)
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	f7fa f97d 	bl	8010ff8 <__aeabi_dmul>
 8016cfe:	460b      	mov	r3, r1
 8016d00:	4602      	mov	r2, r0
 8016d02:	4629      	mov	r1, r5
 8016d04:	4620      	mov	r0, r4
 8016d06:	f7f9 ffbf 	bl	8010c88 <__aeabi_dsub>
 8016d0a:	f7fa fc25 	bl	8011558 <__aeabi_d2iz>
 8016d0e:	ab0c      	add	r3, sp, #48	@ 0x30
 8016d10:	f10b 0b18 	add.w	fp, fp, #24
 8016d14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016d18:	f108 0801 	add.w	r8, r8, #1
 8016d1c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8016d20:	e722      	b.n	8016b68 <__kernel_rem_pio2+0x2a8>
 8016d22:	4620      	mov	r0, r4
 8016d24:	4629      	mov	r1, r5
 8016d26:	f7fa fc17 	bl	8011558 <__aeabi_d2iz>
 8016d2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8016d2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016d30:	e71a      	b.n	8016b68 <__kernel_rem_pio2+0x2a8>
 8016d32:	ab0c      	add	r3, sp, #48	@ 0x30
 8016d34:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016d38:	f7fa f8f4 	bl	8010f24 <__aeabi_i2d>
 8016d3c:	4622      	mov	r2, r4
 8016d3e:	462b      	mov	r3, r5
 8016d40:	f7fa f95a 	bl	8010ff8 <__aeabi_dmul>
 8016d44:	4652      	mov	r2, sl
 8016d46:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8016d4a:	465b      	mov	r3, fp
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	4629      	mov	r1, r5
 8016d50:	f7fa f952 	bl	8010ff8 <__aeabi_dmul>
 8016d54:	3e01      	subs	r6, #1
 8016d56:	4604      	mov	r4, r0
 8016d58:	460d      	mov	r5, r1
 8016d5a:	e718      	b.n	8016b8e <__kernel_rem_pio2+0x2ce>
 8016d5c:	9906      	ldr	r1, [sp, #24]
 8016d5e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8016d62:	9106      	str	r1, [sp, #24]
 8016d64:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8016d68:	f7fa f946 	bl	8010ff8 <__aeabi_dmul>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	460b      	mov	r3, r1
 8016d70:	4650      	mov	r0, sl
 8016d72:	4659      	mov	r1, fp
 8016d74:	f7f9 ff8a 	bl	8010c8c <__adddf3>
 8016d78:	3601      	adds	r6, #1
 8016d7a:	4682      	mov	sl, r0
 8016d7c:	468b      	mov	fp, r1
 8016d7e:	9b00      	ldr	r3, [sp, #0]
 8016d80:	429e      	cmp	r6, r3
 8016d82:	dc01      	bgt.n	8016d88 <__kernel_rem_pio2+0x4c8>
 8016d84:	42b5      	cmp	r5, r6
 8016d86:	dae9      	bge.n	8016d5c <__kernel_rem_pio2+0x49c>
 8016d88:	ab48      	add	r3, sp, #288	@ 0x120
 8016d8a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016d8e:	e9c5 ab00 	strd	sl, fp, [r5]
 8016d92:	3c01      	subs	r4, #1
 8016d94:	e6ff      	b.n	8016b96 <__kernel_rem_pio2+0x2d6>
 8016d96:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8016d98:	2b02      	cmp	r3, #2
 8016d9a:	dc0b      	bgt.n	8016db4 <__kernel_rem_pio2+0x4f4>
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	dc39      	bgt.n	8016e14 <__kernel_rem_pio2+0x554>
 8016da0:	d05d      	beq.n	8016e5e <__kernel_rem_pio2+0x59e>
 8016da2:	9b02      	ldr	r3, [sp, #8]
 8016da4:	f003 0007 	and.w	r0, r3, #7
 8016da8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8016dac:	ecbd 8b02 	vpop	{d8}
 8016db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016db4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8016db6:	2b03      	cmp	r3, #3
 8016db8:	d1f3      	bne.n	8016da2 <__kernel_rem_pio2+0x4e2>
 8016dba:	9b05      	ldr	r3, [sp, #20]
 8016dbc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016dc0:	eb0d 0403 	add.w	r4, sp, r3
 8016dc4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8016dc8:	4625      	mov	r5, r4
 8016dca:	46c2      	mov	sl, r8
 8016dcc:	f1ba 0f00 	cmp.w	sl, #0
 8016dd0:	f1a5 0508 	sub.w	r5, r5, #8
 8016dd4:	dc6b      	bgt.n	8016eae <__kernel_rem_pio2+0x5ee>
 8016dd6:	4645      	mov	r5, r8
 8016dd8:	2d01      	cmp	r5, #1
 8016dda:	f1a4 0408 	sub.w	r4, r4, #8
 8016dde:	f300 8087 	bgt.w	8016ef0 <__kernel_rem_pio2+0x630>
 8016de2:	9c05      	ldr	r4, [sp, #20]
 8016de4:	ab48      	add	r3, sp, #288	@ 0x120
 8016de6:	441c      	add	r4, r3
 8016de8:	2000      	movs	r0, #0
 8016dea:	2100      	movs	r1, #0
 8016dec:	f1b8 0f01 	cmp.w	r8, #1
 8016df0:	f300 809c 	bgt.w	8016f2c <__kernel_rem_pio2+0x66c>
 8016df4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8016df8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8016dfc:	f1b9 0f00 	cmp.w	r9, #0
 8016e00:	f040 80a6 	bne.w	8016f50 <__kernel_rem_pio2+0x690>
 8016e04:	9b04      	ldr	r3, [sp, #16]
 8016e06:	e9c3 7800 	strd	r7, r8, [r3]
 8016e0a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8016e0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016e12:	e7c6      	b.n	8016da2 <__kernel_rem_pio2+0x4e2>
 8016e14:	9d05      	ldr	r5, [sp, #20]
 8016e16:	ab48      	add	r3, sp, #288	@ 0x120
 8016e18:	441d      	add	r5, r3
 8016e1a:	4644      	mov	r4, r8
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	2100      	movs	r1, #0
 8016e20:	2c00      	cmp	r4, #0
 8016e22:	da35      	bge.n	8016e90 <__kernel_rem_pio2+0x5d0>
 8016e24:	f1b9 0f00 	cmp.w	r9, #0
 8016e28:	d038      	beq.n	8016e9c <__kernel_rem_pio2+0x5dc>
 8016e2a:	4602      	mov	r2, r0
 8016e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016e30:	9c04      	ldr	r4, [sp, #16]
 8016e32:	e9c4 2300 	strd	r2, r3, [r4]
 8016e36:	4602      	mov	r2, r0
 8016e38:	460b      	mov	r3, r1
 8016e3a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8016e3e:	f7f9 ff23 	bl	8010c88 <__aeabi_dsub>
 8016e42:	ad4a      	add	r5, sp, #296	@ 0x128
 8016e44:	2401      	movs	r4, #1
 8016e46:	45a0      	cmp	r8, r4
 8016e48:	da2b      	bge.n	8016ea2 <__kernel_rem_pio2+0x5e2>
 8016e4a:	f1b9 0f00 	cmp.w	r9, #0
 8016e4e:	d002      	beq.n	8016e56 <__kernel_rem_pio2+0x596>
 8016e50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016e54:	4619      	mov	r1, r3
 8016e56:	9b04      	ldr	r3, [sp, #16]
 8016e58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016e5c:	e7a1      	b.n	8016da2 <__kernel_rem_pio2+0x4e2>
 8016e5e:	9c05      	ldr	r4, [sp, #20]
 8016e60:	ab48      	add	r3, sp, #288	@ 0x120
 8016e62:	441c      	add	r4, r3
 8016e64:	2000      	movs	r0, #0
 8016e66:	2100      	movs	r1, #0
 8016e68:	f1b8 0f00 	cmp.w	r8, #0
 8016e6c:	da09      	bge.n	8016e82 <__kernel_rem_pio2+0x5c2>
 8016e6e:	f1b9 0f00 	cmp.w	r9, #0
 8016e72:	d002      	beq.n	8016e7a <__kernel_rem_pio2+0x5ba>
 8016e74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016e78:	4619      	mov	r1, r3
 8016e7a:	9b04      	ldr	r3, [sp, #16]
 8016e7c:	e9c3 0100 	strd	r0, r1, [r3]
 8016e80:	e78f      	b.n	8016da2 <__kernel_rem_pio2+0x4e2>
 8016e82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016e86:	f7f9 ff01 	bl	8010c8c <__adddf3>
 8016e8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e8e:	e7eb      	b.n	8016e68 <__kernel_rem_pio2+0x5a8>
 8016e90:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8016e94:	f7f9 fefa 	bl	8010c8c <__adddf3>
 8016e98:	3c01      	subs	r4, #1
 8016e9a:	e7c1      	b.n	8016e20 <__kernel_rem_pio2+0x560>
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	460b      	mov	r3, r1
 8016ea0:	e7c6      	b.n	8016e30 <__kernel_rem_pio2+0x570>
 8016ea2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8016ea6:	f7f9 fef1 	bl	8010c8c <__adddf3>
 8016eaa:	3401      	adds	r4, #1
 8016eac:	e7cb      	b.n	8016e46 <__kernel_rem_pio2+0x586>
 8016eae:	ed95 7b00 	vldr	d7, [r5]
 8016eb2:	ed8d 7b00 	vstr	d7, [sp]
 8016eb6:	ed95 7b02 	vldr	d7, [r5, #8]
 8016eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ebe:	ec53 2b17 	vmov	r2, r3, d7
 8016ec2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016ec6:	f7f9 fee1 	bl	8010c8c <__adddf3>
 8016eca:	4602      	mov	r2, r0
 8016ecc:	460b      	mov	r3, r1
 8016ece:	4606      	mov	r6, r0
 8016ed0:	460f      	mov	r7, r1
 8016ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ed6:	f7f9 fed7 	bl	8010c88 <__aeabi_dsub>
 8016eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016ede:	f7f9 fed5 	bl	8010c8c <__adddf3>
 8016ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ee6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8016eea:	e9c5 6700 	strd	r6, r7, [r5]
 8016eee:	e76d      	b.n	8016dcc <__kernel_rem_pio2+0x50c>
 8016ef0:	ed94 7b00 	vldr	d7, [r4]
 8016ef4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8016ef8:	ec51 0b17 	vmov	r0, r1, d7
 8016efc:	4652      	mov	r2, sl
 8016efe:	465b      	mov	r3, fp
 8016f00:	ed8d 7b00 	vstr	d7, [sp]
 8016f04:	f7f9 fec2 	bl	8010c8c <__adddf3>
 8016f08:	4602      	mov	r2, r0
 8016f0a:	460b      	mov	r3, r1
 8016f0c:	4606      	mov	r6, r0
 8016f0e:	460f      	mov	r7, r1
 8016f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f14:	f7f9 feb8 	bl	8010c88 <__aeabi_dsub>
 8016f18:	4652      	mov	r2, sl
 8016f1a:	465b      	mov	r3, fp
 8016f1c:	f7f9 feb6 	bl	8010c8c <__adddf3>
 8016f20:	3d01      	subs	r5, #1
 8016f22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016f26:	e9c4 6700 	strd	r6, r7, [r4]
 8016f2a:	e755      	b.n	8016dd8 <__kernel_rem_pio2+0x518>
 8016f2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016f30:	f7f9 feac 	bl	8010c8c <__adddf3>
 8016f34:	f108 38ff 	add.w	r8, r8, #4294967295
 8016f38:	e758      	b.n	8016dec <__kernel_rem_pio2+0x52c>
 8016f3a:	bf00      	nop
 8016f3c:	f3af 8000 	nop.w
	...
 8016f48:	41700000 	.word	0x41700000
 8016f4c:	3e700000 	.word	0x3e700000
 8016f50:	9b04      	ldr	r3, [sp, #16]
 8016f52:	9a04      	ldr	r2, [sp, #16]
 8016f54:	601f      	str	r7, [r3, #0]
 8016f56:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8016f5a:	605c      	str	r4, [r3, #4]
 8016f5c:	609d      	str	r5, [r3, #8]
 8016f5e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8016f62:	60d3      	str	r3, [r2, #12]
 8016f64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016f68:	6110      	str	r0, [r2, #16]
 8016f6a:	6153      	str	r3, [r2, #20]
 8016f6c:	e719      	b.n	8016da2 <__kernel_rem_pio2+0x4e2>
 8016f6e:	bf00      	nop

08016f70 <scalbn>:
 8016f70:	b570      	push	{r4, r5, r6, lr}
 8016f72:	ec55 4b10 	vmov	r4, r5, d0
 8016f76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016f7a:	4606      	mov	r6, r0
 8016f7c:	462b      	mov	r3, r5
 8016f7e:	b991      	cbnz	r1, 8016fa6 <scalbn+0x36>
 8016f80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016f84:	4323      	orrs	r3, r4
 8016f86:	d03d      	beq.n	8017004 <scalbn+0x94>
 8016f88:	4b35      	ldr	r3, [pc, #212]	@ (8017060 <scalbn+0xf0>)
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	4629      	mov	r1, r5
 8016f8e:	2200      	movs	r2, #0
 8016f90:	f7fa f832 	bl	8010ff8 <__aeabi_dmul>
 8016f94:	4b33      	ldr	r3, [pc, #204]	@ (8017064 <scalbn+0xf4>)
 8016f96:	429e      	cmp	r6, r3
 8016f98:	4604      	mov	r4, r0
 8016f9a:	460d      	mov	r5, r1
 8016f9c:	da0f      	bge.n	8016fbe <scalbn+0x4e>
 8016f9e:	a328      	add	r3, pc, #160	@ (adr r3, 8017040 <scalbn+0xd0>)
 8016fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa4:	e01e      	b.n	8016fe4 <scalbn+0x74>
 8016fa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016faa:	4291      	cmp	r1, r2
 8016fac:	d10b      	bne.n	8016fc6 <scalbn+0x56>
 8016fae:	4622      	mov	r2, r4
 8016fb0:	4620      	mov	r0, r4
 8016fb2:	4629      	mov	r1, r5
 8016fb4:	f7f9 fe6a 	bl	8010c8c <__adddf3>
 8016fb8:	4604      	mov	r4, r0
 8016fba:	460d      	mov	r5, r1
 8016fbc:	e022      	b.n	8017004 <scalbn+0x94>
 8016fbe:	460b      	mov	r3, r1
 8016fc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016fc4:	3936      	subs	r1, #54	@ 0x36
 8016fc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016fca:	4296      	cmp	r6, r2
 8016fcc:	dd0d      	ble.n	8016fea <scalbn+0x7a>
 8016fce:	2d00      	cmp	r5, #0
 8016fd0:	a11d      	add	r1, pc, #116	@ (adr r1, 8017048 <scalbn+0xd8>)
 8016fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fd6:	da02      	bge.n	8016fde <scalbn+0x6e>
 8016fd8:	a11d      	add	r1, pc, #116	@ (adr r1, 8017050 <scalbn+0xe0>)
 8016fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016fde:	a31a      	add	r3, pc, #104	@ (adr r3, 8017048 <scalbn+0xd8>)
 8016fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe4:	f7fa f808 	bl	8010ff8 <__aeabi_dmul>
 8016fe8:	e7e6      	b.n	8016fb8 <scalbn+0x48>
 8016fea:	1872      	adds	r2, r6, r1
 8016fec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016ff0:	428a      	cmp	r2, r1
 8016ff2:	dcec      	bgt.n	8016fce <scalbn+0x5e>
 8016ff4:	2a00      	cmp	r2, #0
 8016ff6:	dd08      	ble.n	801700a <scalbn+0x9a>
 8016ff8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016ffc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017000:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017004:	ec45 4b10 	vmov	d0, r4, r5
 8017008:	bd70      	pop	{r4, r5, r6, pc}
 801700a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801700e:	da08      	bge.n	8017022 <scalbn+0xb2>
 8017010:	2d00      	cmp	r5, #0
 8017012:	a10b      	add	r1, pc, #44	@ (adr r1, 8017040 <scalbn+0xd0>)
 8017014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017018:	dac1      	bge.n	8016f9e <scalbn+0x2e>
 801701a:	a10f      	add	r1, pc, #60	@ (adr r1, 8017058 <scalbn+0xe8>)
 801701c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017020:	e7bd      	b.n	8016f9e <scalbn+0x2e>
 8017022:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017026:	3236      	adds	r2, #54	@ 0x36
 8017028:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801702c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017030:	4620      	mov	r0, r4
 8017032:	4b0d      	ldr	r3, [pc, #52]	@ (8017068 <scalbn+0xf8>)
 8017034:	4629      	mov	r1, r5
 8017036:	2200      	movs	r2, #0
 8017038:	e7d4      	b.n	8016fe4 <scalbn+0x74>
 801703a:	bf00      	nop
 801703c:	f3af 8000 	nop.w
 8017040:	c2f8f359 	.word	0xc2f8f359
 8017044:	01a56e1f 	.word	0x01a56e1f
 8017048:	8800759c 	.word	0x8800759c
 801704c:	7e37e43c 	.word	0x7e37e43c
 8017050:	8800759c 	.word	0x8800759c
 8017054:	fe37e43c 	.word	0xfe37e43c
 8017058:	c2f8f359 	.word	0xc2f8f359
 801705c:	81a56e1f 	.word	0x81a56e1f
 8017060:	43500000 	.word	0x43500000
 8017064:	ffff3cb0 	.word	0xffff3cb0
 8017068:	3c900000 	.word	0x3c900000
 801706c:	00000000 	.word	0x00000000

08017070 <floor>:
 8017070:	ec51 0b10 	vmov	r0, r1, d0
 8017074:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801707c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8017080:	2e13      	cmp	r6, #19
 8017082:	460c      	mov	r4, r1
 8017084:	4605      	mov	r5, r0
 8017086:	4680      	mov	r8, r0
 8017088:	dc34      	bgt.n	80170f4 <floor+0x84>
 801708a:	2e00      	cmp	r6, #0
 801708c:	da17      	bge.n	80170be <floor+0x4e>
 801708e:	a332      	add	r3, pc, #200	@ (adr r3, 8017158 <floor+0xe8>)
 8017090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017094:	f7f9 fdfa 	bl	8010c8c <__adddf3>
 8017098:	2200      	movs	r2, #0
 801709a:	2300      	movs	r3, #0
 801709c:	f7fa fa3c 	bl	8011518 <__aeabi_dcmpgt>
 80170a0:	b150      	cbz	r0, 80170b8 <floor+0x48>
 80170a2:	2c00      	cmp	r4, #0
 80170a4:	da55      	bge.n	8017152 <floor+0xe2>
 80170a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80170aa:	432c      	orrs	r4, r5
 80170ac:	2500      	movs	r5, #0
 80170ae:	42ac      	cmp	r4, r5
 80170b0:	4c2b      	ldr	r4, [pc, #172]	@ (8017160 <floor+0xf0>)
 80170b2:	bf08      	it	eq
 80170b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80170b8:	4621      	mov	r1, r4
 80170ba:	4628      	mov	r0, r5
 80170bc:	e023      	b.n	8017106 <floor+0x96>
 80170be:	4f29      	ldr	r7, [pc, #164]	@ (8017164 <floor+0xf4>)
 80170c0:	4137      	asrs	r7, r6
 80170c2:	ea01 0307 	and.w	r3, r1, r7
 80170c6:	4303      	orrs	r3, r0
 80170c8:	d01d      	beq.n	8017106 <floor+0x96>
 80170ca:	a323      	add	r3, pc, #140	@ (adr r3, 8017158 <floor+0xe8>)
 80170cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d0:	f7f9 fddc 	bl	8010c8c <__adddf3>
 80170d4:	2200      	movs	r2, #0
 80170d6:	2300      	movs	r3, #0
 80170d8:	f7fa fa1e 	bl	8011518 <__aeabi_dcmpgt>
 80170dc:	2800      	cmp	r0, #0
 80170de:	d0eb      	beq.n	80170b8 <floor+0x48>
 80170e0:	2c00      	cmp	r4, #0
 80170e2:	bfbe      	ittt	lt
 80170e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80170e8:	4133      	asrlt	r3, r6
 80170ea:	18e4      	addlt	r4, r4, r3
 80170ec:	ea24 0407 	bic.w	r4, r4, r7
 80170f0:	2500      	movs	r5, #0
 80170f2:	e7e1      	b.n	80170b8 <floor+0x48>
 80170f4:	2e33      	cmp	r6, #51	@ 0x33
 80170f6:	dd0a      	ble.n	801710e <floor+0x9e>
 80170f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80170fc:	d103      	bne.n	8017106 <floor+0x96>
 80170fe:	4602      	mov	r2, r0
 8017100:	460b      	mov	r3, r1
 8017102:	f7f9 fdc3 	bl	8010c8c <__adddf3>
 8017106:	ec41 0b10 	vmov	d0, r0, r1
 801710a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801710e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8017112:	f04f 37ff 	mov.w	r7, #4294967295
 8017116:	40df      	lsrs	r7, r3
 8017118:	4207      	tst	r7, r0
 801711a:	d0f4      	beq.n	8017106 <floor+0x96>
 801711c:	a30e      	add	r3, pc, #56	@ (adr r3, 8017158 <floor+0xe8>)
 801711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017122:	f7f9 fdb3 	bl	8010c8c <__adddf3>
 8017126:	2200      	movs	r2, #0
 8017128:	2300      	movs	r3, #0
 801712a:	f7fa f9f5 	bl	8011518 <__aeabi_dcmpgt>
 801712e:	2800      	cmp	r0, #0
 8017130:	d0c2      	beq.n	80170b8 <floor+0x48>
 8017132:	2c00      	cmp	r4, #0
 8017134:	da0a      	bge.n	801714c <floor+0xdc>
 8017136:	2e14      	cmp	r6, #20
 8017138:	d101      	bne.n	801713e <floor+0xce>
 801713a:	3401      	adds	r4, #1
 801713c:	e006      	b.n	801714c <floor+0xdc>
 801713e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8017142:	2301      	movs	r3, #1
 8017144:	40b3      	lsls	r3, r6
 8017146:	441d      	add	r5, r3
 8017148:	4545      	cmp	r5, r8
 801714a:	d3f6      	bcc.n	801713a <floor+0xca>
 801714c:	ea25 0507 	bic.w	r5, r5, r7
 8017150:	e7b2      	b.n	80170b8 <floor+0x48>
 8017152:	2500      	movs	r5, #0
 8017154:	462c      	mov	r4, r5
 8017156:	e7af      	b.n	80170b8 <floor+0x48>
 8017158:	8800759c 	.word	0x8800759c
 801715c:	7e37e43c 	.word	0x7e37e43c
 8017160:	bff00000 	.word	0xbff00000
 8017164:	000fffff 	.word	0x000fffff

08017168 <_init>:
 8017168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716a:	bf00      	nop
 801716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801716e:	bc08      	pop	{r3}
 8017170:	469e      	mov	lr, r3
 8017172:	4770      	bx	lr

08017174 <_fini>:
 8017174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017176:	bf00      	nop
 8017178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801717a:	bc08      	pop	{r3}
 801717c:	469e      	mov	lr, r3
 801717e:	4770      	bx	lr
