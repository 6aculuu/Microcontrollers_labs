
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003860  08003860  0000508c  2**0
                  CONTENTS
  4 .ARM          00000008  08003860  08003860  00004860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003868  08003868  0000508c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00004868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800386c  0800386c  0000486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08003870  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000008c  080038fc  0000508c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080038fc  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f80  00000000  00000000  000050bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000193c  00000000  00000000  0000e03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b9  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002115c  00000000  00000000  000106b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a47c  00000000  00000000  0003180d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c88ba  00000000  00000000  0003bc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e0  00000000  00000000  00104588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00106868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080037b4 	.word	0x080037b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	080037b4 	.word	0x080037b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <LED_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_COUNT; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e00e      	b.n	80005da <LED_Init+0x2a>
        HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_RESET);
 80005bc:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <LED_Init+0x3c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <LED_Init+0x40>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005cc:	2200      	movs	r2, #0
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 ff22 	bl	8001418 <HAL_GPIO_WritePin>
    for (int i = 0; i < LED_COUNT; i++) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3301      	adds	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	dded      	ble.n	80005bc <LED_Init+0xc>
    }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000020 	.word	0x20000020

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb4c 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f812 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f89a 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f86e 	bl	80006e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_Init();
 8000608:	f7ff ffd2 	bl	80005b0 <LED_Init>
  HAL_UART_Receive_IT(&huart2, rx_buffer, UART_BUFFER_SIZE);
 800060c:	2204      	movs	r2, #4
 800060e:	4903      	ldr	r1, [pc, #12]	@ (800061c <main+0x28>)
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x2c>)
 8000612:	f001 fd03 	bl	800201c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x22>
 800061a:	bf00      	nop
 800061c:	200000f0 	.word	0x200000f0
 8000620:	200000a8 	.word	0x200000a8

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fc2c 	bl	8002e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemClock_Config+0xb8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <SystemClock_Config+0xb8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <SystemClock_Config+0xbc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <SystemClock_Config+0xbc>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <SystemClock_Config+0xbc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f99b 	bl	80019d4 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a4:	f000 f9cc 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fec2 	bl	800144c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ce:	f000 f9b7 	bl	8000a40 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 fbf8 	bl	8001f10 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f98b 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000a8 	.word	0x200000a8
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <MX_GPIO_Init+0x80>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a18      	ldr	r2, [pc, #96]	@ (80007b8 <MX_GPIO_Init+0x80>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0x80>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_GPIO_Init+0x80>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a11      	ldr	r2, [pc, #68]	@ (80007b8 <MX_GPIO_Init+0x80>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_GPIO_Init+0x80>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 800078c:	480b      	ldr	r0, [pc, #44]	@ (80007bc <MX_GPIO_Init+0x84>)
 800078e:	f000 fe43 	bl	8001418 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000792:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8000796:	60fb      	str	r3, [r7, #12]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_GPIO_Init+0x84>)
 80007ac:	f000 fc88 	bl	80010c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020800 	.word	0x40020800

080007c0 <Set_LEDs>:

/* USER CODE BEGIN 4 */
void Set_LEDs(uint8_t num_leds) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < LED_COUNT; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e01f      	b.n	8000810 <Set_LEDs+0x50>
        if (i < num_leds) {
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	da0c      	bge.n	80007f2 <Set_LEDs+0x32>
            HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_SET);
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <Set_LEDs+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <Set_LEDs+0x64>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	f000 fe14 	bl	8001418 <HAL_GPIO_WritePin>
 80007f0:	e00b      	b.n	800080a <Set_LEDs+0x4a>
        } else {
            HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], GPIO_PIN_RESET);
 80007f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <Set_LEDs+0x60>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <Set_LEDs+0x64>)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	f000 fe07 	bl	8001418 <HAL_GPIO_WritePin>
    for (int i = 0; i < LED_COUNT; i++) {
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b07      	cmp	r3, #7
 8000814:	dddc      	ble.n	80007d0 <Set_LEDs+0x10>
        }
    }
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000020 	.word	0x20000020

08000828 <Process_Command>:

void Process_Command(uint8_t *cmd) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    if (strncmp((char*)cmd, "ping", 4) == 0) {
 8000830:	2204      	movs	r2, #4
 8000832:	495c      	ldr	r1, [pc, #368]	@ (80009a4 <Process_Command+0x17c>)
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f002 fb33 	bl	8002ea0 <strncmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10a      	bne.n	8000856 <Process_Command+0x2e>
        strcpy((char*)tx_buffer, "ping\r\n");
 8000840:	4b59      	ldr	r3, [pc, #356]	@ (80009a8 <Process_Command+0x180>)
 8000842:	4a5a      	ldr	r2, [pc, #360]	@ (80009ac <Process_Command+0x184>)
 8000844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000848:	6018      	str	r0, [r3, #0]
 800084a:	3304      	adds	r3, #4
 800084c:	8019      	strh	r1, [r3, #0]
 800084e:	3302      	adds	r3, #2
 8000850:	0c0a      	lsrs	r2, r1, #16
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e090      	b.n	8000978 <Process_Command+0x150>

    } else if (strncmp((char*)cmd, "alln", 4) == 0) {
 8000856:	2204      	movs	r2, #4
 8000858:	4955      	ldr	r1, [pc, #340]	@ (80009b0 <Process_Command+0x188>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f002 fb20 	bl	8002ea0 <strncmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10d      	bne.n	8000882 <Process_Command+0x5a>
        Set_LEDs(LED_COUNT);
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff ffaa 	bl	80007c0 <Set_LEDs>
        strcpy((char*)tx_buffer, "alln\r\n");
 800086c:	4b4e      	ldr	r3, [pc, #312]	@ (80009a8 <Process_Command+0x180>)
 800086e:	4a51      	ldr	r2, [pc, #324]	@ (80009b4 <Process_Command+0x18c>)
 8000870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000874:	6018      	str	r0, [r3, #0]
 8000876:	3304      	adds	r3, #4
 8000878:	8019      	strh	r1, [r3, #0]
 800087a:	3302      	adds	r3, #2
 800087c:	0c0a      	lsrs	r2, r1, #16
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e07a      	b.n	8000978 <Process_Command+0x150>

    } else if (strncmp((char*)cmd, "allf", 4) == 0) {
 8000882:	2204      	movs	r2, #4
 8000884:	494c      	ldr	r1, [pc, #304]	@ (80009b8 <Process_Command+0x190>)
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f002 fb0a 	bl	8002ea0 <strncmp>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10d      	bne.n	80008ae <Process_Command+0x86>
        Set_LEDs(0);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ff94 	bl	80007c0 <Set_LEDs>
        strcpy((char*)tx_buffer, "allf\r\n");
 8000898:	4b43      	ldr	r3, [pc, #268]	@ (80009a8 <Process_Command+0x180>)
 800089a:	4a48      	ldr	r2, [pc, #288]	@ (80009bc <Process_Command+0x194>)
 800089c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a0:	6018      	str	r0, [r3, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	8019      	strh	r1, [r3, #0]
 80008a6:	3302      	adds	r3, #2
 80008a8:	0c0a      	lsrs	r2, r1, #16
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e064      	b.n	8000978 <Process_Command+0x150>

    } else if (cmd[0] == 'l' && cmd[1] == 'e' && cmd[2] == 'd' && cmd[3] >= '0' && cmd[3] <= '8') {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b6c      	cmp	r3, #108	@ 0x6c
 80008b4:	d125      	bne.n	8000902 <Process_Command+0xda>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3301      	adds	r3, #1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b65      	cmp	r3, #101	@ 0x65
 80008be:	d120      	bne.n	8000902 <Process_Command+0xda>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3302      	adds	r3, #2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b64      	cmp	r3, #100	@ 0x64
 80008c8:	d11b      	bne.n	8000902 <Process_Command+0xda>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3303      	adds	r3, #3
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80008d2:	d916      	bls.n	8000902 <Process_Command+0xda>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3303      	adds	r3, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b38      	cmp	r3, #56	@ 0x38
 80008dc:	d811      	bhi.n	8000902 <Process_Command+0xda>
        uint8_t num_leds = cmd[3] - '0';
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3303      	adds	r3, #3
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3b30      	subs	r3, #48	@ 0x30
 80008e6:	72fb      	strb	r3, [r7, #11]
        Set_LEDs(num_leds);
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff68 	bl	80007c0 <Set_LEDs>
        sprintf((char*)tx_buffer, "led%c\r\n", cmd[3]);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3303      	adds	r3, #3
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4931      	ldr	r1, [pc, #196]	@ (80009c0 <Process_Command+0x198>)
 80008fa:	482b      	ldr	r0, [pc, #172]	@ (80009a8 <Process_Command+0x180>)
 80008fc:	f002 faa8 	bl	8002e50 <siprintf>
    } else if (cmd[0] == 'l' && cmd[1] == 'e' && cmd[2] == 'd' && cmd[3] >= '0' && cmd[3] <= '8') {
 8000900:	e03a      	b.n	8000978 <Process_Command+0x150>

    } else if (strncmp((char*)cmd, "stat", 4) == 0) {
 8000902:	2204      	movs	r2, #4
 8000904:	492f      	ldr	r1, [pc, #188]	@ (80009c4 <Process_Command+0x19c>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f002 faca 	bl	8002ea0 <strncmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d128      	bne.n	8000964 <Process_Command+0x13c>
        strcpy((char*)tx_buffer, "stat");
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <Process_Command+0x180>)
 8000914:	4a2b      	ldr	r2, [pc, #172]	@ (80009c4 <Process_Command+0x19c>)
 8000916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	3304      	adds	r3, #4
 800091e:	7019      	strb	r1, [r3, #0]
        for (int i = 0; i < LED_COUNT; i++) {
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	e014      	b.n	8000950 <Process_Command+0x128>
			tx_buffer[4 + i] = HAL_GPIO_ReadPin(GPIOC, LED_PINS[i]) ? '1' : '0';
 8000926:	4a28      	ldr	r2, [pc, #160]	@ (80009c8 <Process_Command+0x1a0>)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	4619      	mov	r1, r3
 8000930:	4826      	ldr	r0, [pc, #152]	@ (80009cc <Process_Command+0x1a4>)
 8000932:	f000 fd59 	bl	80013e8 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <Process_Command+0x118>
 800093c:	2131      	movs	r1, #49	@ 0x31
 800093e:	e000      	b.n	8000942 <Process_Command+0x11a>
 8000940:	2130      	movs	r1, #48	@ 0x30
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3304      	adds	r3, #4
 8000946:	4a18      	ldr	r2, [pc, #96]	@ (80009a8 <Process_Command+0x180>)
 8000948:	54d1      	strb	r1, [r2, r3]
        for (int i = 0; i < LED_COUNT; i++) {
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3301      	adds	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b07      	cmp	r3, #7
 8000954:	dde7      	ble.n	8000926 <Process_Command+0xfe>
		}
        tx_buffer[4 + LED_COUNT] = '\r';
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <Process_Command+0x180>)
 8000958:	220d      	movs	r2, #13
 800095a:	731a      	strb	r2, [r3, #12]
        tx_buffer[5 + LED_COUNT] = '\n';
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <Process_Command+0x180>)
 800095e:	220a      	movs	r2, #10
 8000960:	735a      	strb	r2, [r3, #13]
 8000962:	e009      	b.n	8000978 <Process_Command+0x150>

    } else {
        strcpy((char*)tx_buffer, "erro\r\n");
 8000964:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <Process_Command+0x180>)
 8000966:	4a1a      	ldr	r2, [pc, #104]	@ (80009d0 <Process_Command+0x1a8>)
 8000968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096c:	6018      	str	r0, [r3, #0]
 800096e:	3304      	adds	r3, #4
 8000970:	8019      	strh	r1, [r3, #0]
 8000972:	3302      	adds	r3, #2
 8000974:	0c0a      	lsrs	r2, r1, #16
 8000976:	701a      	strb	r2, [r3, #0]
    }

    if (!tx_busy) {
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <Process_Command+0x1ac>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10c      	bne.n	800099a <Process_Command+0x172>
            tx_busy = 1;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <Process_Command+0x1ac>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, tx_buffer, strlen((char*)tx_buffer));
 8000986:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <Process_Command+0x180>)
 8000988:	f7ff fc42 	bl	8000210 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29b      	uxth	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	4905      	ldr	r1, [pc, #20]	@ (80009a8 <Process_Command+0x180>)
 8000994:	4810      	ldr	r0, [pc, #64]	@ (80009d8 <Process_Command+0x1b0>)
 8000996:	f001 fb0b 	bl	8001fb0 <HAL_UART_Transmit_IT>
    }
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	080037cc 	.word	0x080037cc
 80009a8:	200000f4 	.word	0x200000f4
 80009ac:	080037d4 	.word	0x080037d4
 80009b0:	080037dc 	.word	0x080037dc
 80009b4:	080037e4 	.word	0x080037e4
 80009b8:	080037ec 	.word	0x080037ec
 80009bc:	080037f4 	.word	0x080037f4
 80009c0:	080037fc 	.word	0x080037fc
 80009c4:	08003804 	.word	0x08003804
 80009c8:	20000020 	.word	0x20000020
 80009cc:	40020800 	.word	0x40020800
 80009d0:	0800380c 	.word	0x0800380c
 80009d4:	20000102 	.word	0x20000102
 80009d8:	200000a8 	.word	0x200000a8

080009dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	@ (8000a08 <HAL_UART_RxCpltCallback+0x2c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d107      	bne.n	80009fe <HAL_UART_RxCpltCallback+0x22>
        Process_Command(rx_buffer);
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <HAL_UART_RxCpltCallback+0x30>)
 80009f0:	f7ff ff1a 	bl	8000828 <Process_Command>
        HAL_UART_Receive_IT(&huart2, rx_buffer, UART_BUFFER_SIZE);
 80009f4:	2204      	movs	r2, #4
 80009f6:	4905      	ldr	r1, [pc, #20]	@ (8000a0c <HAL_UART_RxCpltCallback+0x30>)
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_UART_RxCpltCallback+0x34>)
 80009fa:	f001 fb0f 	bl	800201c <HAL_UART_Receive_IT>
    }
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	200000f0 	.word	0x200000f0
 8000a10:	200000a8 	.word	0x200000a8

08000a14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <HAL_UART_TxCpltCallback+0x24>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d102      	bne.n	8000a2c <HAL_UART_TxCpltCallback+0x18>
        tx_busy = 0;
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_UART_TxCpltCallback+0x28>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
    }
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	20000102 	.word	0x20000102

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <HAL_MspInit+0x4c>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <HAL_MspInit+0x4c>)
 8000a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <HAL_MspInit+0x4c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <HAL_UART_MspInit+0x94>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d133      	bne.n	8000b26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <HAL_UART_MspInit+0x98>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <HAL_UART_MspInit+0x98>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <HAL_UART_MspInit+0x98>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_UART_MspInit+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a14      	ldr	r2, [pc, #80]	@ (8000b34 <HAL_UART_MspInit+0x98>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_UART_MspInit+0x98>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <HAL_UART_MspInit+0x9c>)
 8000b12:	f000 fad5 	bl	80010c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2026      	movs	r0, #38	@ 0x26
 8000b1c:	f000 fa07 	bl	8000f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b20:	2026      	movs	r0, #38	@ 0x26
 8000b22:	f000 fa20 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <NMI_Handler+0x4>

08000b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 f8d1 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f001 fa61 	bl	8002068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000a8 	.word	0x200000a8

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f002 f970 	bl	8002ec4 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20020000 	.word	0x20020000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000104 	.word	0x20000104
 8000c18:	20000258 	.word	0x20000258

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c44:	f7ff ffea 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	@ (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f002 f92f 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fcbf 	bl	80005f4 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000c84:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 8000c88:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000c8c:	20000254 	.word	0x20000254

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f92b 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fec0 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f943 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f90b 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	@ (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	20000038 	.word	0x20000038
 8000d34:	20000034 	.word	0x20000034

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000038 	.word	0x20000038
 8000d5c:	20000108 	.word	0x20000108

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000108 	.word	0x20000108

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff29 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff3e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff31 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff feda 	bl	8000d60 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d008      	beq.n	8000fcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e052      	b.n	8001072 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0216 	bic.w	r2, r2, #22
 8000fda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d103      	bne.n	8000ffc <HAL_DMA_Abort+0x62>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0208 	bic.w	r2, r2, #8
 800100a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800101c:	e013      	b.n	8001046 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800101e:	f7ff fe9f 	bl	8000d60 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b05      	cmp	r3, #5
 800102a:	d90c      	bls.n	8001046 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2220      	movs	r2, #32
 8001030:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e015      	b.n	8001072 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e4      	bne.n	800101e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001058:	223f      	movs	r2, #63	@ 0x3f
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d004      	beq.n	8001098 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e00c      	b.n	80010b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2205      	movs	r2, #5
 800109c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e165      	b.n	80013a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f040 8154 	bne.w	80013a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d005      	beq.n	8001112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	2b02      	cmp	r3, #2
 8001110:	d130      	bne.n	8001174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 0201 	and.w	r2, r3, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b03      	cmp	r3, #3
 800117e:	d017      	beq.n	80011b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80ae 	beq.w	80013a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b5d      	ldr	r3, [pc, #372]	@ (80013c0 <HAL_GPIO_Init+0x300>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a5c      	ldr	r2, [pc, #368]	@ (80013c0 <HAL_GPIO_Init+0x300>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b5a      	ldr	r3, [pc, #360]	@ (80013c0 <HAL_GPIO_Init+0x300>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001262:	4a58      	ldr	r2, [pc, #352]	@ (80013c4 <HAL_GPIO_Init+0x304>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4f      	ldr	r2, [pc, #316]	@ (80013c8 <HAL_GPIO_Init+0x308>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x21a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4e      	ldr	r2, [pc, #312]	@ (80013cc <HAL_GPIO_Init+0x30c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x216>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4d      	ldr	r2, [pc, #308]	@ (80013d0 <HAL_GPIO_Init+0x310>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x212>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4c      	ldr	r2, [pc, #304]	@ (80013d4 <HAL_GPIO_Init+0x314>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4b      	ldr	r2, [pc, #300]	@ (80013d8 <HAL_GPIO_Init+0x318>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x20a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4a      	ldr	r2, [pc, #296]	@ (80013dc <HAL_GPIO_Init+0x31c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x206>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a49      	ldr	r2, [pc, #292]	@ (80013e0 <HAL_GPIO_Init+0x320>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x202>
 80012be:	2306      	movs	r3, #6
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <HAL_GPIO_Init+0x304>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b3a      	ldr	r3, [pc, #232]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a31      	ldr	r2, [pc, #196]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a26      	ldr	r2, [pc, #152]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_GPIO_Init+0x324>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae96 	bls.w	80010dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	@ 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40013c00 	.word	0x40013c00

080013e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e001      	b.n	800140a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0cc      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001460:	4b68      	ldr	r3, [pc, #416]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 030f 	and.w	r3, r3, #15
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d90c      	bls.n	8001488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b65      	ldr	r3, [pc, #404]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b63      	ldr	r3, [pc, #396]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e0b8      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d020      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a0:	4b59      	ldr	r3, [pc, #356]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a58      	ldr	r2, [pc, #352]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a52      	ldr	r2, [pc, #328]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c4:	4b50      	ldr	r3, [pc, #320]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	494d      	ldr	r1, [pc, #308]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d044      	beq.n	800156c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d119      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e07f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d003      	beq.n	800150a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	2b03      	cmp	r3, #3
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e06f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e067      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f023 0203 	bic.w	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4934      	ldr	r1, [pc, #208]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	4313      	orrs	r3, r2
 800153a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800153c:	f7ff fc10 	bl	8000d60 <HAL_GetTick>
 8001540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	e00a      	b.n	800155a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	f7ff fc0c 	bl	8000d60 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e04f      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 020c 	and.w	r2, r3, #12
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d1eb      	bne.n	8001544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d20c      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e032      	b.n	80015fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4916      	ldr	r1, [pc, #88]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	490e      	ldr	r1, [pc, #56]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d2:	f000 f855 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	490a      	ldr	r1, [pc, #40]	@ (800160c <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	5ccb      	ldrb	r3, [r1, r3]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb70 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00
 8001608:	40023800 	.word	0x40023800
 800160c:	08003814 	.word	0x08003814
 8001610:	20000030 	.word	0x20000030
 8001614:	20000034 	.word	0x20000034

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_RCC_GetHCLKFreq+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000030 	.word	0x20000030

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff0 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	@ (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	08003824 	.word	0x08003824

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffdc 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0b5b      	lsrs	r3, r3, #13
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	@ (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	08003824 	.word	0x08003824

08001680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001684:	b0a6      	sub	sp, #152	@ 0x98
 8001686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a6:	4bc8      	ldr	r3, [pc, #800]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f200 817e 	bhi.w	80019b0 <HAL_RCC_GetSysClockFreq+0x330>
 80016b4:	a201      	add	r2, pc, #4	@ (adr r2, 80016bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	080019b1 	.word	0x080019b1
 80016c4:	080019b1 	.word	0x080019b1
 80016c8:	080019b1 	.word	0x080019b1
 80016cc:	080016f9 	.word	0x080016f9
 80016d0:	080019b1 	.word	0x080019b1
 80016d4:	080019b1 	.word	0x080019b1
 80016d8:	080019b1 	.word	0x080019b1
 80016dc:	08001701 	.word	0x08001701
 80016e0:	080019b1 	.word	0x080019b1
 80016e4:	080019b1 	.word	0x080019b1
 80016e8:	080019b1 	.word	0x080019b1
 80016ec:	0800186b 	.word	0x0800186b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4bb6      	ldr	r3, [pc, #728]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80016f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80016f6:	e15f      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016f8:	4bb5      	ldr	r3, [pc, #724]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80016fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80016fe:	e15b      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001700:	4bb1      	ldr	r3, [pc, #708]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170c:	4bae      	ldr	r3, [pc, #696]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d031      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4bab      	ldr	r3, [pc, #684]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001722:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172a:	663b      	str	r3, [r7, #96]	@ 0x60
 800172c:	2300      	movs	r3, #0
 800172e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001730:	4ba7      	ldr	r3, [pc, #668]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001732:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001736:	462a      	mov	r2, r5
 8001738:	fb03 f202 	mul.w	r2, r3, r2
 800173c:	2300      	movs	r3, #0
 800173e:	4621      	mov	r1, r4
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	4aa2      	ldr	r2, [pc, #648]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001748:	4621      	mov	r1, r4
 800174a:	fba1 1202 	umull	r1, r2, r1, r2
 800174e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001750:	460a      	mov	r2, r1
 8001752:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001754:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001756:	4413      	add	r3, r2
 8001758:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800175a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800175e:	2200      	movs	r2, #0
 8001760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001762:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001768:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800176c:	f7fe fda8 	bl	80002c0 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800177a:	e064      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177c:	4b92      	ldr	r3, [pc, #584]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	099b      	lsrs	r3, r3, #6
 8001782:	2200      	movs	r2, #0
 8001784:	653b      	str	r3, [r7, #80]	@ 0x50
 8001786:	657a      	str	r2, [r7, #84]	@ 0x54
 8001788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800178a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001790:	2300      	movs	r3, #0
 8001792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001794:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0159      	lsls	r1, r3, #5
 80017a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017aa:	0150      	lsls	r0, r2, #5
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4621      	mov	r1, r4
 80017b2:	1a51      	subs	r1, r2, r1
 80017b4:	6139      	str	r1, [r7, #16]
 80017b6:	4629      	mov	r1, r5
 80017b8:	eb63 0301 	sbc.w	r3, r3, r1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017ca:	4659      	mov	r1, fp
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017d4:	4651      	mov	r1, sl
 80017d6:	018a      	lsls	r2, r1, #6
 80017d8:	4651      	mov	r1, sl
 80017da:	ebb2 0801 	subs.w	r8, r2, r1
 80017de:	4659      	mov	r1, fp
 80017e0:	eb63 0901 	sbc.w	r9, r3, r1
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017f8:	4690      	mov	r8, r2
 80017fa:	4699      	mov	r9, r3
 80017fc:	4623      	mov	r3, r4
 80017fe:	eb18 0303 	adds.w	r3, r8, r3
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	462b      	mov	r3, r5
 8001806:	eb49 0303 	adc.w	r3, r9, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001818:	4629      	mov	r1, r5
 800181a:	028b      	lsls	r3, r1, #10
 800181c:	4621      	mov	r1, r4
 800181e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001822:	4621      	mov	r1, r4
 8001824:	028a      	lsls	r2, r1, #10
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800182e:	2200      	movs	r2, #0
 8001830:	643b      	str	r3, [r7, #64]	@ 0x40
 8001832:	647a      	str	r2, [r7, #68]	@ 0x44
 8001834:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001838:	f7fe fd42 	bl	80002c0 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001846:	4b60      	ldr	r3, [pc, #384]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	3301      	adds	r3, #1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001858:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800185c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001868:	e0a6      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186a:	4b57      	ldr	r3, [pc, #348]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b54      	ldr	r3, [pc, #336]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02a      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b51      	ldr	r3, [pc, #324]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800188c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001894:	2100      	movs	r1, #0
 8001896:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001898:	fb03 f201 	mul.w	r2, r3, r1
 800189c:	2300      	movs	r3, #0
 800189e:	fb00 f303 	mul.w	r3, r0, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	4a4a      	ldr	r2, [pc, #296]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80018a6:	fba0 1202 	umull	r1, r2, r0, r2
 80018aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80018ac:	460a      	mov	r2, r1
 80018ae:	673a      	str	r2, [r7, #112]	@ 0x70
 80018b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80018b2:	4413      	add	r3, r2
 80018b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80018b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018ba:	2200      	movs	r2, #0
 80018bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80018be:	637a      	str	r2, [r7, #52]	@ 0x34
 80018c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018c8:	f7fe fcfa 	bl	80002c0 <__aeabi_uldivmod>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4613      	mov	r3, r2
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018d6:	e05b      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	4b3b      	ldr	r3, [pc, #236]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	099b      	lsrs	r3, r3, #6
 80018de:	2200      	movs	r2, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f4:	4642      	mov	r2, r8
 80018f6:	464b      	mov	r3, r9
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	0159      	lsls	r1, r3, #5
 8001902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001906:	0150      	lsls	r0, r2, #5
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4641      	mov	r1, r8
 800190e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001912:	4649      	mov	r1, r9
 8001914:	eb63 0b01 	sbc.w	fp, r3, r1
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800192c:	ebb2 040a 	subs.w	r4, r2, sl
 8001930:	eb63 050b 	sbc.w	r5, r3, fp
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	00eb      	lsls	r3, r5, #3
 800193e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001942:	00e2      	lsls	r2, r4, #3
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4643      	mov	r3, r8
 800194a:	18e3      	adds	r3, r4, r3
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	464b      	mov	r3, r9
 8001950:	eb45 0303 	adc.w	r3, r5, r3
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001962:	4629      	mov	r1, r5
 8001964:	028b      	lsls	r3, r1, #10
 8001966:	4621      	mov	r1, r4
 8001968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800196c:	4621      	mov	r1, r4
 800196e:	028a      	lsls	r2, r1, #10
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001978:	2200      	movs	r2, #0
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	61fa      	str	r2, [r7, #28]
 800197e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001982:	f7fe fc9d 	bl	80002c0 <__aeabi_uldivmod>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4613      	mov	r3, r2
 800198c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0f1b      	lsrs	r3, r3, #28
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800199e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019ae:	e003      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80019b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3798      	adds	r7, #152	@ 0x98
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	017d7840 	.word	0x017d7840

080019d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e28d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8083 	beq.w	8001afa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019f4:	4b94      	ldr	r3, [pc, #592]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a00:	4b91      	ldr	r3, [pc, #580]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b84      	ldr	r3, [pc, #528]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x124>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d157      	bne.n	8001af8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e25a      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x90>
 8001a56:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0xb4>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a72      	ldr	r2, [pc, #456]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001a88:	4b6f      	ldr	r3, [pc, #444]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b6c      	ldr	r3, [pc, #432]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6b      	ldr	r2, [pc, #428]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f95a 	bl	8000d60 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f956 	bl	8000d60 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	@ 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e21f      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b61      	ldr	r3, [pc, #388]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xdc>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f946 	bl	8000d60 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f942 	bl	8000d60 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e20b      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b57      	ldr	r3, [pc, #348]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x104>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06f      	beq.n	8001be6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b06:	4b50      	ldr	r3, [pc, #320]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d017      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b12:	4b4d      	ldr	r3, [pc, #308]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d105      	bne.n	8001b2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1d3      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f8ef 	bl	8000d60 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f8eb 	bl	8000d60 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1b4      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_RCC_OscConfig+0x278>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f8ce 	bl	8000d60 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f8ca 	bl	8000d60 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e193      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8ae 	bl	8000d60 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f8aa 	bl	8000d60 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e173      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x234>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f897 	bl	8000d60 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f893 	bl	8000d60 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e15c      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b8a      	ldr	r3, [pc, #552]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b83      	ldr	r3, [pc, #524]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7f      	ldr	r3, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a7e      	ldr	r2, [pc, #504]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b79      	ldr	r3, [pc, #484]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f853 	bl	8000d60 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f84f 	bl	8000d60 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e118      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e84 <HAL_RCC_OscConfig+0x4b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31e>
 8001ce4:	4b66      	ldr	r3, [pc, #408]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce8:	4a65      	ldr	r2, [pc, #404]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x340>
 8001cfa:	4b61      	ldr	r3, [pc, #388]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	4a60      	ldr	r2, [pc, #384]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d06:	4b5e      	ldr	r3, [pc, #376]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x358>
 8001d14:	4b5a      	ldr	r3, [pc, #360]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a59      	ldr	r2, [pc, #356]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d20:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	4a56      	ldr	r2, [pc, #344]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f814 	bl	8000d60 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f810 	bl	8000d60 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0d7      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x368>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7fe fffe 	bl	8000d60 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7fe fffa 	bl	8000d60 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c1      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	4a3a      	ldr	r2, [pc, #232]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ad 	beq.w	8001f00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b36      	ldr	r3, [pc, #216]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d145      	bne.n	8001e46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ffce 	bl	8000d60 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7fe ffca 	bl	8000d60 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e093      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b29      	ldr	r3, [pc, #164]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	071b      	lsls	r3, r3, #28
 8001e12:	491b      	ldr	r1, [pc, #108]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ff9f 	bl	8000d60 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ff9b 	bl	8000d60 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e064      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x452>
 8001e44:	e05c      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <HAL_RCC_OscConfig+0x4b4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff88 	bl	8000d60 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe ff84 	bl	8000d60 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04d      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x480>
 8001e72:	e045      	b.n	8001f00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCC_OscConfig+0x538>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d030      	beq.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d129      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d122      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10f      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e042      	b.n	8001fa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fdb0 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	@ 0x24
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fd07 	bl	8002968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d121      	bne.n	800200e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_UART_Transmit_IT+0x26>
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e01a      	b.n	8002010 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	88fa      	ldrh	r2, [r7, #6]
 8001fe4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2221      	movs	r2, #33	@ 0x21
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002008:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b20      	cmp	r3, #32
 8002034:	d112      	bne.n	800205c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_UART_Receive_IT+0x26>
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00b      	b.n	800205e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	461a      	mov	r2, r3
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fab0 	bl	80025b8 <UART_Start_Receive_IT>
 8002058:	4603      	mov	r3, r0
 800205a:	e000      	b.n	800205e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b0ba      	sub	sp, #232	@ 0xe8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800209a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10f      	bne.n	80020ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_UART_IRQHandler+0x66>
 80020ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fb8f 	bl	80027ea <UART_Receive_IT>
      return;
 80020cc:	e25b      	b.n	8002586 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80de 	beq.w	8002294 <HAL_UART_IRQHandler+0x22c>
 80020d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80d1 	beq.w	8002294 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_UART_IRQHandler+0xae>
 80020fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xd2>
 8002122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_UART_IRQHandler+0xf6>
 8002146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f043 0204 	orr.w	r2, r3, #4
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d011      	beq.n	800218e <HAL_UART_IRQHandler+0x126>
 800216a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f043 0208 	orr.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 81f2 	beq.w	800257c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_UART_IRQHandler+0x14e>
 80021a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fb1a 	bl	80027ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c0:	2b40      	cmp	r3, #64	@ 0x40
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_UART_IRQHandler+0x17a>
 80021da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04f      	beq.n	8002282 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fa22 	bl	800262c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f2:	2b40      	cmp	r3, #64	@ 0x40
 80021f4:	d141      	bne.n	800227a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3314      	adds	r3, #20
 80021fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002200:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002204:	e853 3f00 	ldrex	r3, [r3]
 8002208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800220c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3314      	adds	r3, #20
 800221e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002222:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800222e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002232:	e841 2300 	strex	r3, r2, [r1]
 8002236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800223a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1d9      	bne.n	80021f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d013      	beq.n	8002272 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224e:	4a7e      	ldr	r2, [pc, #504]	@ (8002448 <HAL_UART_IRQHandler+0x3e0>)
 8002250:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe ff0f 	bl	800107a <HAL_DMA_Abort_IT>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800226c:	4610      	mov	r0, r2
 800226e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002270:	e00e      	b.n	8002290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f98a 	bl	800258c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002278:	e00a      	b.n	8002290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f986 	bl	800258c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002280:	e006      	b.n	8002290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f982 	bl	800258c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800228e:	e175      	b.n	800257c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	bf00      	nop
    return;
 8002292:	e173      	b.n	800257c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	2b01      	cmp	r3, #1
 800229a:	f040 814f 	bne.w	800253c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800229e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8148 	beq.w	800253c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8141 	beq.w	800253c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022da:	2b40      	cmp	r3, #64	@ 0x40
 80022dc:	f040 80b6 	bne.w	800244c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8145 	beq.w	8002580 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80022fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80022fe:	429a      	cmp	r2, r3
 8002300:	f080 813e 	bcs.w	8002580 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800230a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002316:	f000 8088 	beq.w	800242a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
 8002320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002324:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002346:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800234a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800235e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1d9      	bne.n	800231a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3314      	adds	r3, #20
 800236c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002370:	e853 3f00 	ldrex	r3, [r3]
 8002374:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3314      	adds	r3, #20
 8002386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800238a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800238e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002390:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800239c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e1      	bne.n	8002366 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3314      	adds	r3, #20
 80023a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023ac:	e853 3f00 	ldrex	r3, [r3]
 80023b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3314      	adds	r3, #20
 80023c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e3      	bne.n	80023a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f2:	e853 3f00 	ldrex	r3, [r3]
 80023f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80023f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023fa:	f023 0310 	bic.w	r3, r3, #16
 80023fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800240c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800240e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002410:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002412:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002414:	e841 2300 	strex	r3, r2, [r1]
 8002418:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800241a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e3      	bne.n	80023e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fdb8 	bl	8000f9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002438:	b29b      	uxth	r3, r3
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	b29b      	uxth	r3, r3
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f8ad 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002446:	e09b      	b.n	8002580 <HAL_UART_IRQHandler+0x518>
 8002448:	080026f3 	.word	0x080026f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002454:	b29b      	uxth	r3, r3
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808e 	beq.w	8002584 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8089 	beq.w	8002584 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	330c      	adds	r3, #12
 8002478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247c:	e853 3f00 	ldrex	r3, [r3]
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002496:	647a      	str	r2, [r7, #68]	@ 0x44
 8002498:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800249c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800249e:	e841 2300 	strex	r3, r2, [r1]
 80024a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1e3      	bne.n	8002472 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3314      	adds	r3, #20
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	623b      	str	r3, [r7, #32]
   return(result);
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3314      	adds	r3, #20
 80024ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e3      	bne.n	80024aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	e853 3f00 	ldrex	r3, [r3]
 80024fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0310 	bic.w	r3, r3, #16
 8002506:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002514:	61fa      	str	r2, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	69b9      	ldr	r1, [r7, #24]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	e841 2300 	strex	r3, r2, [r1]
 8002520:	617b      	str	r3, [r7, #20]
   return(result);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e3      	bne.n	80024f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800252e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f833 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800253a:	e023      	b.n	8002584 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800253c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_UART_IRQHandler+0x4f4>
 8002548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800254c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8e0 	bl	800271a <UART_Transmit_IT>
    return;
 800255a:	e014      	b.n	8002586 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800255c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00e      	beq.n	8002586 <HAL_UART_IRQHandler+0x51e>
 8002568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f920 	bl	80027ba <UART_EndTransmit_IT>
    return;
 800257a:	e004      	b.n	8002586 <HAL_UART_IRQHandler+0x51e>
    return;
 800257c:	bf00      	nop
 800257e:	e002      	b.n	8002586 <HAL_UART_IRQHandler+0x51e>
      return;
 8002580:	bf00      	nop
 8002582:	e000      	b.n	8002586 <HAL_UART_IRQHandler+0x51e>
      return;
 8002584:	bf00      	nop
  }
}
 8002586:	37e8      	adds	r7, #232	@ 0xe8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2222      	movs	r2, #34	@ 0x22
 80025e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800262c:	b480      	push	{r7}
 800262e:	b095      	sub	sp, #84	@ 0x54
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263e:	e853 3f00 	ldrex	r3, [r3]
 8002642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800264a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002654:	643a      	str	r2, [r7, #64]	@ 0x40
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800265a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800265c:	e841 2300 	strex	r3, r2, [r1]
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e5      	bne.n	8002634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3314      	adds	r3, #20
 800266e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	e853 3f00 	ldrex	r3, [r3]
 8002676:	61fb      	str	r3, [r7, #28]
   return(result);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800268e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002690:	e841 2300 	strex	r3, r2, [r1]
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e5      	bne.n	8002668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d119      	bne.n	80026d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f023 0310 	bic.w	r3, r3, #16
 80026ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026c4:	61ba      	str	r2, [r7, #24]
 80026c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	6979      	ldr	r1, [r7, #20]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	613b      	str	r3, [r7, #16]
   return(result);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e5      	bne.n	80026a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026e6:	bf00      	nop
 80026e8:	3754      	adds	r7, #84	@ 0x54
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff ff3d 	bl	800258c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b21      	cmp	r3, #33	@ 0x21
 800272c:	d13e      	bne.n	80027ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002736:	d114      	bne.n	8002762 <UART_Transmit_IT+0x48>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d110      	bne.n	8002762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	1c9a      	adds	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	621a      	str	r2, [r3, #32]
 8002760:	e008      	b.n	8002774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	1c59      	adds	r1, r3, #1
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6211      	str	r1, [r2, #32]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10f      	bne.n	80027a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe f91a 	bl	8000a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b08c      	sub	sp, #48	@ 0x30
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b22      	cmp	r3, #34	@ 0x22
 80027fc:	f040 80ae 	bne.w	800295c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002808:	d117      	bne.n	800283a <UART_Receive_IT+0x50>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d113      	bne.n	800283a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	b29b      	uxth	r3, r3
 8002824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002828:	b29a      	uxth	r2, r3
 800282a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	1c9a      	adds	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
 8002838:	e026      	b.n	8002888 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284c:	d007      	beq.n	800285e <UART_Receive_IT+0x74>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <UART_Receive_IT+0x82>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e008      	b.n	800287e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002878:	b2da      	uxtb	r2, r3
 800287a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800287c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29b      	uxth	r3, r3
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4619      	mov	r1, r3
 8002896:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002898:	2b00      	cmp	r3, #0
 800289a:	d15d      	bne.n	8002958 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0220 	bic.w	r2, r2, #32
 80028aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d135      	bne.n	800294e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	613b      	str	r3, [r7, #16]
   return(result);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f023 0310 	bic.w	r3, r3, #16
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	623a      	str	r2, [r7, #32]
 800290a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	69f9      	ldr	r1, [r7, #28]
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	61bb      	str	r3, [r7, #24]
   return(result);
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b10      	cmp	r3, #16
 8002928:	d10a      	bne.n	8002940 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fe2a 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
 800294c:	e002      	b.n	8002954 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe f844 	bl	80009dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e002      	b.n	800295e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3730      	adds	r7, #48	@ 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0c0      	sub	sp, #256	@ 0x100
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	ea40 0301 	orr.w	r3, r0, r1
 8002990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029c0:	f021 010c 	bic.w	r1, r1, #12
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029ce:	430b      	orrs	r3, r1
 80029d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	ea40 0301 	orr.w	r3, r0, r1
 80029ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002c34 <UART_SetConfig+0x2cc>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0xa0>
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8d      	ldr	r3, [pc, #564]	@ (8002c38 <UART_SetConfig+0x2d0>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7fe fe26 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a10:	e003      	b.n	8002a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7fe fe0d 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8002a16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a24:	f040 810c 	bne.w	8002c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a42:	415b      	adcs	r3, r3
 8002a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	eb12 0801 	adds.w	r8, r2, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb43 0901 	adc.w	r9, r3, r1
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	eb18 0303 	adds.w	r3, r8, r3
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a96:	460b      	mov	r3, r1
 8002a98:	18db      	adds	r3, r3, r3
 8002a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002aac:	f7fd fc08 	bl	80002c0 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b61      	ldr	r3, [pc, #388]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	011c      	lsls	r4, r3, #4
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	eb1a 0303 	adds.w	r3, sl, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb4b 0303 	adc.w	r3, fp, r3
 8002b14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	18db      	adds	r3, r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b32:	4613      	mov	r3, r2
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b42:	f7fd fbbd 	bl	80002c0 <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2264      	movs	r2, #100	@ 0x64
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	1acb      	subs	r3, r1, r3
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b62:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002b64:	fba3 2302 	umull	r2, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b70:	441c      	add	r4, r3
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b94:	4641      	mov	r1, r8
 8002b96:	1851      	adds	r1, r2, r1
 8002b98:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	414b      	adcs	r3, r1
 8002b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bac:	4659      	mov	r1, fp
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bc8:	464b      	mov	r3, r9
 8002bca:	460a      	mov	r2, r1
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002be0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002be8:	460b      	mov	r3, r1
 8002bea:	18db      	adds	r3, r3, r3
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bee:	4613      	mov	r3, r2
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bfe:	f7fd fb5f 	bl	80002c0 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	@ 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	@ 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	@ (8002c3c <UART_SetConfig+0x2d4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c30:	e106      	b.n	8002e40 <UART_SetConfig+0x4d8>
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c52:	4642      	mov	r2, r8
 8002c54:	464b      	mov	r3, r9
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	6239      	str	r1, [r7, #32]
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c62:	4641      	mov	r1, r8
 8002c64:	1854      	adds	r4, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb43 0501 	adc.w	r5, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c88:	464b      	mov	r3, r9
 8002c8a:	eb45 0303 	adc.w	r3, r5, r3
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cae:	4629      	mov	r1, r5
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb8:	4621      	mov	r1, r4
 8002cba:	008a      	lsls	r2, r1, #2
 8002cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cc0:	f7fd fafe 	bl	80002c0 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b60      	ldr	r3, [pc, #384]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	61b9      	str	r1, [r7, #24]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d5e:	f7fd faaf 	bl	80002c0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	4b38      	ldr	r3, [pc, #224]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2264      	movs	r2, #100	@ 0x64
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	1acb      	subs	r3, r1, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	3332      	adds	r3, #50	@ 0x32
 8002d7c:	4a33      	ldr	r2, [pc, #204]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d88:	441c      	add	r4, r3
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d92:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	415b      	adcs	r3, r3
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da8:	4641      	mov	r1, r8
 8002daa:	1851      	adds	r1, r2, r1
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	4649      	mov	r1, r9
 8002db0:	414b      	adcs	r3, r1
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	00cb      	lsls	r3, r1, #3
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dca:	4651      	mov	r1, sl
 8002dcc:	00ca      	lsls	r2, r1, #3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	189b      	adds	r3, r3, r2
 8002dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dda:	464b      	mov	r3, r9
 8002ddc:	460a      	mov	r2, r1
 8002dde:	eb42 0303 	adc.w	r3, r2, r3
 8002de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dee:	667a      	str	r2, [r7, #100]	@ 0x64
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	008b      	lsls	r3, r1, #2
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e06:	4641      	mov	r1, r8
 8002e08:	008a      	lsls	r2, r1, #2
 8002e0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e0e:	f7fd fa57 	bl	80002c0 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4b0d      	ldr	r3, [pc, #52]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002e18:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	2164      	movs	r1, #100	@ 0x64
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	3332      	adds	r3, #50	@ 0x32
 8002e2a:	4a08      	ldr	r2, [pc, #32]	@ (8002e4c <UART_SetConfig+0x4e4>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4422      	add	r2, r4
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e46:	46bd      	mov	sp, r7
 8002e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <siprintf>:
 8002e50:	b40e      	push	{r1, r2, r3}
 8002e52:	b500      	push	{lr}
 8002e54:	b09c      	sub	sp, #112	@ 0x70
 8002e56:	ab1d      	add	r3, sp, #116	@ 0x74
 8002e58:	9002      	str	r0, [sp, #8]
 8002e5a:	9006      	str	r0, [sp, #24]
 8002e5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e60:	4809      	ldr	r0, [pc, #36]	@ (8002e88 <siprintf+0x38>)
 8002e62:	9107      	str	r1, [sp, #28]
 8002e64:	9104      	str	r1, [sp, #16]
 8002e66:	4909      	ldr	r1, [pc, #36]	@ (8002e8c <siprintf+0x3c>)
 8002e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e6c:	9105      	str	r1, [sp, #20]
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	a902      	add	r1, sp, #8
 8002e74:	f000 f9a6 	bl	80031c4 <_svfiprintf_r>
 8002e78:	9b02      	ldr	r3, [sp, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	b01c      	add	sp, #112	@ 0x70
 8002e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e84:	b003      	add	sp, #12
 8002e86:	4770      	bx	lr
 8002e88:	2000003c 	.word	0x2000003c
 8002e8c:	ffff0208 	.word	0xffff0208

08002e90 <memset>:
 8002e90:	4402      	add	r2, r0
 8002e92:	4603      	mov	r3, r0
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d100      	bne.n	8002e9a <memset+0xa>
 8002e98:	4770      	bx	lr
 8002e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9e:	e7f9      	b.n	8002e94 <memset+0x4>

08002ea0 <strncmp>:
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	b16a      	cbz	r2, 8002ec0 <strncmp+0x20>
 8002ea4:	3901      	subs	r1, #1
 8002ea6:	1884      	adds	r4, r0, r2
 8002ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d103      	bne.n	8002ebc <strncmp+0x1c>
 8002eb4:	42a0      	cmp	r0, r4
 8002eb6:	d001      	beq.n	8002ebc <strncmp+0x1c>
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d1f5      	bne.n	8002ea8 <strncmp+0x8>
 8002ebc:	1ad0      	subs	r0, r2, r3
 8002ebe:	bd10      	pop	{r4, pc}
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	e7fc      	b.n	8002ebe <strncmp+0x1e>

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	@ (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000003c 	.word	0x2000003c

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2600      	movs	r6, #0
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 fc66 	bl	80037b4 <_init>
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2600      	movs	r6, #0
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08003868 	.word	0x08003868
 8002f0c:	08003868 	.word	0x08003868
 8002f10:	08003868 	.word	0x08003868
 8002f14:	0800386c 	.word	0x0800386c

08002f18 <__retarget_lock_acquire_recursive>:
 8002f18:	4770      	bx	lr

08002f1a <__retarget_lock_release_recursive>:
 8002f1a:	4770      	bx	lr

08002f1c <_free_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4605      	mov	r5, r0
 8002f20:	2900      	cmp	r1, #0
 8002f22:	d041      	beq.n	8002fa8 <_free_r+0x8c>
 8002f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f28:	1f0c      	subs	r4, r1, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bfb8      	it	lt
 8002f2e:	18e4      	addlt	r4, r4, r3
 8002f30:	f000 f8e0 	bl	80030f4 <__malloc_lock>
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <_free_r+0x90>)
 8002f36:	6813      	ldr	r3, [r2, #0]
 8002f38:	b933      	cbnz	r3, 8002f48 <_free_r+0x2c>
 8002f3a:	6063      	str	r3, [r4, #4]
 8002f3c:	6014      	str	r4, [r2, #0]
 8002f3e:	4628      	mov	r0, r5
 8002f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f44:	f000 b8dc 	b.w	8003100 <__malloc_unlock>
 8002f48:	42a3      	cmp	r3, r4
 8002f4a:	d908      	bls.n	8002f5e <_free_r+0x42>
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	1821      	adds	r1, r4, r0
 8002f50:	428b      	cmp	r3, r1
 8002f52:	bf01      	itttt	eq
 8002f54:	6819      	ldreq	r1, [r3, #0]
 8002f56:	685b      	ldreq	r3, [r3, #4]
 8002f58:	1809      	addeq	r1, r1, r0
 8002f5a:	6021      	streq	r1, [r4, #0]
 8002f5c:	e7ed      	b.n	8002f3a <_free_r+0x1e>
 8002f5e:	461a      	mov	r2, r3
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b10b      	cbz	r3, 8002f68 <_free_r+0x4c>
 8002f64:	42a3      	cmp	r3, r4
 8002f66:	d9fa      	bls.n	8002f5e <_free_r+0x42>
 8002f68:	6811      	ldr	r1, [r2, #0]
 8002f6a:	1850      	adds	r0, r2, r1
 8002f6c:	42a0      	cmp	r0, r4
 8002f6e:	d10b      	bne.n	8002f88 <_free_r+0x6c>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	4401      	add	r1, r0
 8002f74:	1850      	adds	r0, r2, r1
 8002f76:	4283      	cmp	r3, r0
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	d1e0      	bne.n	8002f3e <_free_r+0x22>
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	6053      	str	r3, [r2, #4]
 8002f82:	4408      	add	r0, r1
 8002f84:	6010      	str	r0, [r2, #0]
 8002f86:	e7da      	b.n	8002f3e <_free_r+0x22>
 8002f88:	d902      	bls.n	8002f90 <_free_r+0x74>
 8002f8a:	230c      	movs	r3, #12
 8002f8c:	602b      	str	r3, [r5, #0]
 8002f8e:	e7d6      	b.n	8002f3e <_free_r+0x22>
 8002f90:	6820      	ldr	r0, [r4, #0]
 8002f92:	1821      	adds	r1, r4, r0
 8002f94:	428b      	cmp	r3, r1
 8002f96:	bf04      	itt	eq
 8002f98:	6819      	ldreq	r1, [r3, #0]
 8002f9a:	685b      	ldreq	r3, [r3, #4]
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	bf04      	itt	eq
 8002fa0:	1809      	addeq	r1, r1, r0
 8002fa2:	6021      	streq	r1, [r4, #0]
 8002fa4:	6054      	str	r4, [r2, #4]
 8002fa6:	e7ca      	b.n	8002f3e <_free_r+0x22>
 8002fa8:	bd38      	pop	{r3, r4, r5, pc}
 8002faa:	bf00      	nop
 8002fac:	20000250 	.word	0x20000250

08002fb0 <sbrk_aligned>:
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8002ff0 <sbrk_aligned+0x40>)
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	6831      	ldr	r1, [r6, #0]
 8002fb8:	4605      	mov	r5, r0
 8002fba:	b911      	cbnz	r1, 8002fc2 <sbrk_aligned+0x12>
 8002fbc:	f000 fba6 	bl	800370c <_sbrk_r>
 8002fc0:	6030      	str	r0, [r6, #0]
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 fba1 	bl	800370c <_sbrk_r>
 8002fca:	1c43      	adds	r3, r0, #1
 8002fcc:	d103      	bne.n	8002fd6 <sbrk_aligned+0x26>
 8002fce:	f04f 34ff 	mov.w	r4, #4294967295
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
 8002fd6:	1cc4      	adds	r4, r0, #3
 8002fd8:	f024 0403 	bic.w	r4, r4, #3
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d0f8      	beq.n	8002fd2 <sbrk_aligned+0x22>
 8002fe0:	1a21      	subs	r1, r4, r0
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	f000 fb92 	bl	800370c <_sbrk_r>
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d1f2      	bne.n	8002fd2 <sbrk_aligned+0x22>
 8002fec:	e7ef      	b.n	8002fce <sbrk_aligned+0x1e>
 8002fee:	bf00      	nop
 8002ff0:	2000024c 	.word	0x2000024c

08002ff4 <_malloc_r>:
 8002ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff8:	1ccd      	adds	r5, r1, #3
 8002ffa:	f025 0503 	bic.w	r5, r5, #3
 8002ffe:	3508      	adds	r5, #8
 8003000:	2d0c      	cmp	r5, #12
 8003002:	bf38      	it	cc
 8003004:	250c      	movcc	r5, #12
 8003006:	2d00      	cmp	r5, #0
 8003008:	4606      	mov	r6, r0
 800300a:	db01      	blt.n	8003010 <_malloc_r+0x1c>
 800300c:	42a9      	cmp	r1, r5
 800300e:	d904      	bls.n	800301a <_malloc_r+0x26>
 8003010:	230c      	movs	r3, #12
 8003012:	6033      	str	r3, [r6, #0]
 8003014:	2000      	movs	r0, #0
 8003016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800301a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030f0 <_malloc_r+0xfc>
 800301e:	f000 f869 	bl	80030f4 <__malloc_lock>
 8003022:	f8d8 3000 	ldr.w	r3, [r8]
 8003026:	461c      	mov	r4, r3
 8003028:	bb44      	cbnz	r4, 800307c <_malloc_r+0x88>
 800302a:	4629      	mov	r1, r5
 800302c:	4630      	mov	r0, r6
 800302e:	f7ff ffbf 	bl	8002fb0 <sbrk_aligned>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	4604      	mov	r4, r0
 8003036:	d158      	bne.n	80030ea <_malloc_r+0xf6>
 8003038:	f8d8 4000 	ldr.w	r4, [r8]
 800303c:	4627      	mov	r7, r4
 800303e:	2f00      	cmp	r7, #0
 8003040:	d143      	bne.n	80030ca <_malloc_r+0xd6>
 8003042:	2c00      	cmp	r4, #0
 8003044:	d04b      	beq.n	80030de <_malloc_r+0xea>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	4639      	mov	r1, r7
 800304a:	4630      	mov	r0, r6
 800304c:	eb04 0903 	add.w	r9, r4, r3
 8003050:	f000 fb5c 	bl	800370c <_sbrk_r>
 8003054:	4581      	cmp	r9, r0
 8003056:	d142      	bne.n	80030de <_malloc_r+0xea>
 8003058:	6821      	ldr	r1, [r4, #0]
 800305a:	1a6d      	subs	r5, r5, r1
 800305c:	4629      	mov	r1, r5
 800305e:	4630      	mov	r0, r6
 8003060:	f7ff ffa6 	bl	8002fb0 <sbrk_aligned>
 8003064:	3001      	adds	r0, #1
 8003066:	d03a      	beq.n	80030de <_malloc_r+0xea>
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	442b      	add	r3, r5
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	f8d8 3000 	ldr.w	r3, [r8]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	bb62      	cbnz	r2, 80030d0 <_malloc_r+0xdc>
 8003076:	f8c8 7000 	str.w	r7, [r8]
 800307a:	e00f      	b.n	800309c <_malloc_r+0xa8>
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	1b52      	subs	r2, r2, r5
 8003080:	d420      	bmi.n	80030c4 <_malloc_r+0xd0>
 8003082:	2a0b      	cmp	r2, #11
 8003084:	d917      	bls.n	80030b6 <_malloc_r+0xc2>
 8003086:	1961      	adds	r1, r4, r5
 8003088:	42a3      	cmp	r3, r4
 800308a:	6025      	str	r5, [r4, #0]
 800308c:	bf18      	it	ne
 800308e:	6059      	strne	r1, [r3, #4]
 8003090:	6863      	ldr	r3, [r4, #4]
 8003092:	bf08      	it	eq
 8003094:	f8c8 1000 	streq.w	r1, [r8]
 8003098:	5162      	str	r2, [r4, r5]
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	4630      	mov	r0, r6
 800309e:	f000 f82f 	bl	8003100 <__malloc_unlock>
 80030a2:	f104 000b 	add.w	r0, r4, #11
 80030a6:	1d23      	adds	r3, r4, #4
 80030a8:	f020 0007 	bic.w	r0, r0, #7
 80030ac:	1ac2      	subs	r2, r0, r3
 80030ae:	bf1c      	itt	ne
 80030b0:	1a1b      	subne	r3, r3, r0
 80030b2:	50a3      	strne	r3, [r4, r2]
 80030b4:	e7af      	b.n	8003016 <_malloc_r+0x22>
 80030b6:	6862      	ldr	r2, [r4, #4]
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	bf0c      	ite	eq
 80030bc:	f8c8 2000 	streq.w	r2, [r8]
 80030c0:	605a      	strne	r2, [r3, #4]
 80030c2:	e7eb      	b.n	800309c <_malloc_r+0xa8>
 80030c4:	4623      	mov	r3, r4
 80030c6:	6864      	ldr	r4, [r4, #4]
 80030c8:	e7ae      	b.n	8003028 <_malloc_r+0x34>
 80030ca:	463c      	mov	r4, r7
 80030cc:	687f      	ldr	r7, [r7, #4]
 80030ce:	e7b6      	b.n	800303e <_malloc_r+0x4a>
 80030d0:	461a      	mov	r2, r3
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	d1fb      	bne.n	80030d0 <_malloc_r+0xdc>
 80030d8:	2300      	movs	r3, #0
 80030da:	6053      	str	r3, [r2, #4]
 80030dc:	e7de      	b.n	800309c <_malloc_r+0xa8>
 80030de:	230c      	movs	r3, #12
 80030e0:	6033      	str	r3, [r6, #0]
 80030e2:	4630      	mov	r0, r6
 80030e4:	f000 f80c 	bl	8003100 <__malloc_unlock>
 80030e8:	e794      	b.n	8003014 <_malloc_r+0x20>
 80030ea:	6005      	str	r5, [r0, #0]
 80030ec:	e7d6      	b.n	800309c <_malloc_r+0xa8>
 80030ee:	bf00      	nop
 80030f0:	20000250 	.word	0x20000250

080030f4 <__malloc_lock>:
 80030f4:	4801      	ldr	r0, [pc, #4]	@ (80030fc <__malloc_lock+0x8>)
 80030f6:	f7ff bf0f 	b.w	8002f18 <__retarget_lock_acquire_recursive>
 80030fa:	bf00      	nop
 80030fc:	20000248 	.word	0x20000248

08003100 <__malloc_unlock>:
 8003100:	4801      	ldr	r0, [pc, #4]	@ (8003108 <__malloc_unlock+0x8>)
 8003102:	f7ff bf0a 	b.w	8002f1a <__retarget_lock_release_recursive>
 8003106:	bf00      	nop
 8003108:	20000248 	.word	0x20000248

0800310c <__ssputs_r>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	688e      	ldr	r6, [r1, #8]
 8003112:	461f      	mov	r7, r3
 8003114:	42be      	cmp	r6, r7
 8003116:	680b      	ldr	r3, [r1, #0]
 8003118:	4682      	mov	sl, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4690      	mov	r8, r2
 800311e:	d82d      	bhi.n	800317c <__ssputs_r+0x70>
 8003120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003128:	d026      	beq.n	8003178 <__ssputs_r+0x6c>
 800312a:	6965      	ldr	r5, [r4, #20]
 800312c:	6909      	ldr	r1, [r1, #16]
 800312e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003132:	eba3 0901 	sub.w	r9, r3, r1
 8003136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800313a:	1c7b      	adds	r3, r7, #1
 800313c:	444b      	add	r3, r9
 800313e:	106d      	asrs	r5, r5, #1
 8003140:	429d      	cmp	r5, r3
 8003142:	bf38      	it	cc
 8003144:	461d      	movcc	r5, r3
 8003146:	0553      	lsls	r3, r2, #21
 8003148:	d527      	bpl.n	800319a <__ssputs_r+0x8e>
 800314a:	4629      	mov	r1, r5
 800314c:	f7ff ff52 	bl	8002ff4 <_malloc_r>
 8003150:	4606      	mov	r6, r0
 8003152:	b360      	cbz	r0, 80031ae <__ssputs_r+0xa2>
 8003154:	6921      	ldr	r1, [r4, #16]
 8003156:	464a      	mov	r2, r9
 8003158:	f000 fae8 	bl	800372c <memcpy>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	81a3      	strh	r3, [r4, #12]
 8003168:	6126      	str	r6, [r4, #16]
 800316a:	6165      	str	r5, [r4, #20]
 800316c:	444e      	add	r6, r9
 800316e:	eba5 0509 	sub.w	r5, r5, r9
 8003172:	6026      	str	r6, [r4, #0]
 8003174:	60a5      	str	r5, [r4, #8]
 8003176:	463e      	mov	r6, r7
 8003178:	42be      	cmp	r6, r7
 800317a:	d900      	bls.n	800317e <__ssputs_r+0x72>
 800317c:	463e      	mov	r6, r7
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	4632      	mov	r2, r6
 8003182:	4641      	mov	r1, r8
 8003184:	f000 faa8 	bl	80036d8 <memmove>
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	1b9b      	subs	r3, r3, r6
 800318c:	60a3      	str	r3, [r4, #8]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	4433      	add	r3, r6
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	2000      	movs	r0, #0
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	462a      	mov	r2, r5
 800319c:	f000 fad4 	bl	8003748 <_realloc_r>
 80031a0:	4606      	mov	r6, r0
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1e0      	bne.n	8003168 <__ssputs_r+0x5c>
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	4650      	mov	r0, sl
 80031aa:	f7ff feb7 	bl	8002f1c <_free_r>
 80031ae:	230c      	movs	r3, #12
 80031b0:	f8ca 3000 	str.w	r3, [sl]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	e7e9      	b.n	8003196 <__ssputs_r+0x8a>
	...

080031c4 <_svfiprintf_r>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	4698      	mov	r8, r3
 80031ca:	898b      	ldrh	r3, [r1, #12]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	b09d      	sub	sp, #116	@ 0x74
 80031d0:	4607      	mov	r7, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	d510      	bpl.n	80031fa <_svfiprintf_r+0x36>
 80031d8:	690b      	ldr	r3, [r1, #16]
 80031da:	b973      	cbnz	r3, 80031fa <_svfiprintf_r+0x36>
 80031dc:	2140      	movs	r1, #64	@ 0x40
 80031de:	f7ff ff09 	bl	8002ff4 <_malloc_r>
 80031e2:	6028      	str	r0, [r5, #0]
 80031e4:	6128      	str	r0, [r5, #16]
 80031e6:	b930      	cbnz	r0, 80031f6 <_svfiprintf_r+0x32>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	b01d      	add	sp, #116	@ 0x74
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	2340      	movs	r3, #64	@ 0x40
 80031f8:	616b      	str	r3, [r5, #20]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80031fe:	2320      	movs	r3, #32
 8003200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003204:	f8cd 800c 	str.w	r8, [sp, #12]
 8003208:	2330      	movs	r3, #48	@ 0x30
 800320a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033a8 <_svfiprintf_r+0x1e4>
 800320e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003212:	f04f 0901 	mov.w	r9, #1
 8003216:	4623      	mov	r3, r4
 8003218:	469a      	mov	sl, r3
 800321a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321e:	b10a      	cbz	r2, 8003224 <_svfiprintf_r+0x60>
 8003220:	2a25      	cmp	r2, #37	@ 0x25
 8003222:	d1f9      	bne.n	8003218 <_svfiprintf_r+0x54>
 8003224:	ebba 0b04 	subs.w	fp, sl, r4
 8003228:	d00b      	beq.n	8003242 <_svfiprintf_r+0x7e>
 800322a:	465b      	mov	r3, fp
 800322c:	4622      	mov	r2, r4
 800322e:	4629      	mov	r1, r5
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff ff6b 	bl	800310c <__ssputs_r>
 8003236:	3001      	adds	r0, #1
 8003238:	f000 80a7 	beq.w	800338a <_svfiprintf_r+0x1c6>
 800323c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800323e:	445a      	add	r2, fp
 8003240:	9209      	str	r2, [sp, #36]	@ 0x24
 8003242:	f89a 3000 	ldrb.w	r3, [sl]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 809f 	beq.w	800338a <_svfiprintf_r+0x1c6>
 800324c:	2300      	movs	r3, #0
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003256:	f10a 0a01 	add.w	sl, sl, #1
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	9307      	str	r3, [sp, #28]
 800325e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003262:	931a      	str	r3, [sp, #104]	@ 0x68
 8003264:	4654      	mov	r4, sl
 8003266:	2205      	movs	r2, #5
 8003268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326c:	484e      	ldr	r0, [pc, #312]	@ (80033a8 <_svfiprintf_r+0x1e4>)
 800326e:	f7fc ffd7 	bl	8000220 <memchr>
 8003272:	9a04      	ldr	r2, [sp, #16]
 8003274:	b9d8      	cbnz	r0, 80032ae <_svfiprintf_r+0xea>
 8003276:	06d0      	lsls	r0, r2, #27
 8003278:	bf44      	itt	mi
 800327a:	2320      	movmi	r3, #32
 800327c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003280:	0711      	lsls	r1, r2, #28
 8003282:	bf44      	itt	mi
 8003284:	232b      	movmi	r3, #43	@ 0x2b
 8003286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800328a:	f89a 3000 	ldrb.w	r3, [sl]
 800328e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003290:	d015      	beq.n	80032be <_svfiprintf_r+0xfa>
 8003292:	9a07      	ldr	r2, [sp, #28]
 8003294:	4654      	mov	r4, sl
 8003296:	2000      	movs	r0, #0
 8003298:	f04f 0c0a 	mov.w	ip, #10
 800329c:	4621      	mov	r1, r4
 800329e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a2:	3b30      	subs	r3, #48	@ 0x30
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	d94b      	bls.n	8003340 <_svfiprintf_r+0x17c>
 80032a8:	b1b0      	cbz	r0, 80032d8 <_svfiprintf_r+0x114>
 80032aa:	9207      	str	r2, [sp, #28]
 80032ac:	e014      	b.n	80032d8 <_svfiprintf_r+0x114>
 80032ae:	eba0 0308 	sub.w	r3, r0, r8
 80032b2:	fa09 f303 	lsl.w	r3, r9, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	46a2      	mov	sl, r4
 80032bc:	e7d2      	b.n	8003264 <_svfiprintf_r+0xa0>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	1d19      	adds	r1, r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	9103      	str	r1, [sp, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfbb      	ittet	lt
 80032ca:	425b      	neglt	r3, r3
 80032cc:	f042 0202 	orrlt.w	r2, r2, #2
 80032d0:	9307      	strge	r3, [sp, #28]
 80032d2:	9307      	strlt	r3, [sp, #28]
 80032d4:	bfb8      	it	lt
 80032d6:	9204      	strlt	r2, [sp, #16]
 80032d8:	7823      	ldrb	r3, [r4, #0]
 80032da:	2b2e      	cmp	r3, #46	@ 0x2e
 80032dc:	d10a      	bne.n	80032f4 <_svfiprintf_r+0x130>
 80032de:	7863      	ldrb	r3, [r4, #1]
 80032e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e2:	d132      	bne.n	800334a <_svfiprintf_r+0x186>
 80032e4:	9b03      	ldr	r3, [sp, #12]
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032f0:	3402      	adds	r4, #2
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033b8 <_svfiprintf_r+0x1f4>
 80032f8:	7821      	ldrb	r1, [r4, #0]
 80032fa:	2203      	movs	r2, #3
 80032fc:	4650      	mov	r0, sl
 80032fe:	f7fc ff8f 	bl	8000220 <memchr>
 8003302:	b138      	cbz	r0, 8003314 <_svfiprintf_r+0x150>
 8003304:	9b04      	ldr	r3, [sp, #16]
 8003306:	eba0 000a 	sub.w	r0, r0, sl
 800330a:	2240      	movs	r2, #64	@ 0x40
 800330c:	4082      	lsls	r2, r0
 800330e:	4313      	orrs	r3, r2
 8003310:	3401      	adds	r4, #1
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003318:	4824      	ldr	r0, [pc, #144]	@ (80033ac <_svfiprintf_r+0x1e8>)
 800331a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800331e:	2206      	movs	r2, #6
 8003320:	f7fc ff7e 	bl	8000220 <memchr>
 8003324:	2800      	cmp	r0, #0
 8003326:	d036      	beq.n	8003396 <_svfiprintf_r+0x1d2>
 8003328:	4b21      	ldr	r3, [pc, #132]	@ (80033b0 <_svfiprintf_r+0x1ec>)
 800332a:	bb1b      	cbnz	r3, 8003374 <_svfiprintf_r+0x1b0>
 800332c:	9b03      	ldr	r3, [sp, #12]
 800332e:	3307      	adds	r3, #7
 8003330:	f023 0307 	bic.w	r3, r3, #7
 8003334:	3308      	adds	r3, #8
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800333a:	4433      	add	r3, r6
 800333c:	9309      	str	r3, [sp, #36]	@ 0x24
 800333e:	e76a      	b.n	8003216 <_svfiprintf_r+0x52>
 8003340:	fb0c 3202 	mla	r2, ip, r2, r3
 8003344:	460c      	mov	r4, r1
 8003346:	2001      	movs	r0, #1
 8003348:	e7a8      	b.n	800329c <_svfiprintf_r+0xd8>
 800334a:	2300      	movs	r3, #0
 800334c:	3401      	adds	r4, #1
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0c0a 	mov.w	ip, #10
 8003356:	4620      	mov	r0, r4
 8003358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800335c:	3a30      	subs	r2, #48	@ 0x30
 800335e:	2a09      	cmp	r2, #9
 8003360:	d903      	bls.n	800336a <_svfiprintf_r+0x1a6>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0c6      	beq.n	80032f4 <_svfiprintf_r+0x130>
 8003366:	9105      	str	r1, [sp, #20]
 8003368:	e7c4      	b.n	80032f4 <_svfiprintf_r+0x130>
 800336a:	fb0c 2101 	mla	r1, ip, r1, r2
 800336e:	4604      	mov	r4, r0
 8003370:	2301      	movs	r3, #1
 8003372:	e7f0      	b.n	8003356 <_svfiprintf_r+0x192>
 8003374:	ab03      	add	r3, sp, #12
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	462a      	mov	r2, r5
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <_svfiprintf_r+0x1f0>)
 800337c:	a904      	add	r1, sp, #16
 800337e:	4638      	mov	r0, r7
 8003380:	f3af 8000 	nop.w
 8003384:	1c42      	adds	r2, r0, #1
 8003386:	4606      	mov	r6, r0
 8003388:	d1d6      	bne.n	8003338 <_svfiprintf_r+0x174>
 800338a:	89ab      	ldrh	r3, [r5, #12]
 800338c:	065b      	lsls	r3, r3, #25
 800338e:	f53f af2d 	bmi.w	80031ec <_svfiprintf_r+0x28>
 8003392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003394:	e72c      	b.n	80031f0 <_svfiprintf_r+0x2c>
 8003396:	ab03      	add	r3, sp, #12
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	462a      	mov	r2, r5
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <_svfiprintf_r+0x1f0>)
 800339e:	a904      	add	r1, sp, #16
 80033a0:	4638      	mov	r0, r7
 80033a2:	f000 f879 	bl	8003498 <_printf_i>
 80033a6:	e7ed      	b.n	8003384 <_svfiprintf_r+0x1c0>
 80033a8:	0800382c 	.word	0x0800382c
 80033ac:	08003836 	.word	0x08003836
 80033b0:	00000000 	.word	0x00000000
 80033b4:	0800310d 	.word	0x0800310d
 80033b8:	08003832 	.word	0x08003832

080033bc <_printf_common>:
 80033bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c0:	4616      	mov	r6, r2
 80033c2:	4698      	mov	r8, r3
 80033c4:	688a      	ldr	r2, [r1, #8]
 80033c6:	690b      	ldr	r3, [r1, #16]
 80033c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfb8      	it	lt
 80033d0:	4613      	movlt	r3, r2
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033d8:	4607      	mov	r7, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	b10a      	cbz	r2, 80033e2 <_printf_common+0x26>
 80033de:	3301      	adds	r3, #1
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	0699      	lsls	r1, r3, #26
 80033e6:	bf42      	ittt	mi
 80033e8:	6833      	ldrmi	r3, [r6, #0]
 80033ea:	3302      	addmi	r3, #2
 80033ec:	6033      	strmi	r3, [r6, #0]
 80033ee:	6825      	ldr	r5, [r4, #0]
 80033f0:	f015 0506 	ands.w	r5, r5, #6
 80033f4:	d106      	bne.n	8003404 <_printf_common+0x48>
 80033f6:	f104 0a19 	add.w	sl, r4, #25
 80033fa:	68e3      	ldr	r3, [r4, #12]
 80033fc:	6832      	ldr	r2, [r6, #0]
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	42ab      	cmp	r3, r5
 8003402:	dc26      	bgt.n	8003452 <_printf_common+0x96>
 8003404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	3b00      	subs	r3, #0
 800340c:	bf18      	it	ne
 800340e:	2301      	movne	r3, #1
 8003410:	0692      	lsls	r2, r2, #26
 8003412:	d42b      	bmi.n	800346c <_printf_common+0xb0>
 8003414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003418:	4641      	mov	r1, r8
 800341a:	4638      	mov	r0, r7
 800341c:	47c8      	blx	r9
 800341e:	3001      	adds	r0, #1
 8003420:	d01e      	beq.n	8003460 <_printf_common+0xa4>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	6922      	ldr	r2, [r4, #16]
 8003426:	f003 0306 	and.w	r3, r3, #6
 800342a:	2b04      	cmp	r3, #4
 800342c:	bf02      	ittt	eq
 800342e:	68e5      	ldreq	r5, [r4, #12]
 8003430:	6833      	ldreq	r3, [r6, #0]
 8003432:	1aed      	subeq	r5, r5, r3
 8003434:	68a3      	ldr	r3, [r4, #8]
 8003436:	bf0c      	ite	eq
 8003438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800343c:	2500      	movne	r5, #0
 800343e:	4293      	cmp	r3, r2
 8003440:	bfc4      	itt	gt
 8003442:	1a9b      	subgt	r3, r3, r2
 8003444:	18ed      	addgt	r5, r5, r3
 8003446:	2600      	movs	r6, #0
 8003448:	341a      	adds	r4, #26
 800344a:	42b5      	cmp	r5, r6
 800344c:	d11a      	bne.n	8003484 <_printf_common+0xc8>
 800344e:	2000      	movs	r0, #0
 8003450:	e008      	b.n	8003464 <_printf_common+0xa8>
 8003452:	2301      	movs	r3, #1
 8003454:	4652      	mov	r2, sl
 8003456:	4641      	mov	r1, r8
 8003458:	4638      	mov	r0, r7
 800345a:	47c8      	blx	r9
 800345c:	3001      	adds	r0, #1
 800345e:	d103      	bne.n	8003468 <_printf_common+0xac>
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003468:	3501      	adds	r5, #1
 800346a:	e7c6      	b.n	80033fa <_printf_common+0x3e>
 800346c:	18e1      	adds	r1, r4, r3
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	2030      	movs	r0, #48	@ 0x30
 8003472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003476:	4422      	add	r2, r4
 8003478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800347c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003480:	3302      	adds	r3, #2
 8003482:	e7c7      	b.n	8003414 <_printf_common+0x58>
 8003484:	2301      	movs	r3, #1
 8003486:	4622      	mov	r2, r4
 8003488:	4641      	mov	r1, r8
 800348a:	4638      	mov	r0, r7
 800348c:	47c8      	blx	r9
 800348e:	3001      	adds	r0, #1
 8003490:	d0e6      	beq.n	8003460 <_printf_common+0xa4>
 8003492:	3601      	adds	r6, #1
 8003494:	e7d9      	b.n	800344a <_printf_common+0x8e>
	...

08003498 <_printf_i>:
 8003498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	7e0f      	ldrb	r7, [r1, #24]
 800349e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034a0:	2f78      	cmp	r7, #120	@ 0x78
 80034a2:	4691      	mov	r9, r2
 80034a4:	4680      	mov	r8, r0
 80034a6:	460c      	mov	r4, r1
 80034a8:	469a      	mov	sl, r3
 80034aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034ae:	d807      	bhi.n	80034c0 <_printf_i+0x28>
 80034b0:	2f62      	cmp	r7, #98	@ 0x62
 80034b2:	d80a      	bhi.n	80034ca <_printf_i+0x32>
 80034b4:	2f00      	cmp	r7, #0
 80034b6:	f000 80d2 	beq.w	800365e <_printf_i+0x1c6>
 80034ba:	2f58      	cmp	r7, #88	@ 0x58
 80034bc:	f000 80b9 	beq.w	8003632 <_printf_i+0x19a>
 80034c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034c8:	e03a      	b.n	8003540 <_printf_i+0xa8>
 80034ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ce:	2b15      	cmp	r3, #21
 80034d0:	d8f6      	bhi.n	80034c0 <_printf_i+0x28>
 80034d2:	a101      	add	r1, pc, #4	@ (adr r1, 80034d8 <_printf_i+0x40>)
 80034d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003545 	.word	0x08003545
 80034e0:	080034c1 	.word	0x080034c1
 80034e4:	080034c1 	.word	0x080034c1
 80034e8:	080034c1 	.word	0x080034c1
 80034ec:	080034c1 	.word	0x080034c1
 80034f0:	08003545 	.word	0x08003545
 80034f4:	080034c1 	.word	0x080034c1
 80034f8:	080034c1 	.word	0x080034c1
 80034fc:	080034c1 	.word	0x080034c1
 8003500:	080034c1 	.word	0x080034c1
 8003504:	08003645 	.word	0x08003645
 8003508:	0800356f 	.word	0x0800356f
 800350c:	080035ff 	.word	0x080035ff
 8003510:	080034c1 	.word	0x080034c1
 8003514:	080034c1 	.word	0x080034c1
 8003518:	08003667 	.word	0x08003667
 800351c:	080034c1 	.word	0x080034c1
 8003520:	0800356f 	.word	0x0800356f
 8003524:	080034c1 	.word	0x080034c1
 8003528:	080034c1 	.word	0x080034c1
 800352c:	08003607 	.word	0x08003607
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6032      	str	r2, [r6, #0]
 8003538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800353c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003540:	2301      	movs	r3, #1
 8003542:	e09d      	b.n	8003680 <_printf_i+0x1e8>
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1d19      	adds	r1, r3, #4
 800354a:	6031      	str	r1, [r6, #0]
 800354c:	0606      	lsls	r6, r0, #24
 800354e:	d501      	bpl.n	8003554 <_printf_i+0xbc>
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	e003      	b.n	800355c <_printf_i+0xc4>
 8003554:	0645      	lsls	r5, r0, #25
 8003556:	d5fb      	bpl.n	8003550 <_printf_i+0xb8>
 8003558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800355c:	2d00      	cmp	r5, #0
 800355e:	da03      	bge.n	8003568 <_printf_i+0xd0>
 8003560:	232d      	movs	r3, #45	@ 0x2d
 8003562:	426d      	negs	r5, r5
 8003564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003568:	4859      	ldr	r0, [pc, #356]	@ (80036d0 <_printf_i+0x238>)
 800356a:	230a      	movs	r3, #10
 800356c:	e011      	b.n	8003592 <_printf_i+0xfa>
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	0608      	lsls	r0, r1, #24
 8003574:	f853 5b04 	ldr.w	r5, [r3], #4
 8003578:	d402      	bmi.n	8003580 <_printf_i+0xe8>
 800357a:	0649      	lsls	r1, r1, #25
 800357c:	bf48      	it	mi
 800357e:	b2ad      	uxthmi	r5, r5
 8003580:	2f6f      	cmp	r7, #111	@ 0x6f
 8003582:	4853      	ldr	r0, [pc, #332]	@ (80036d0 <_printf_i+0x238>)
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	bf14      	ite	ne
 8003588:	230a      	movne	r3, #10
 800358a:	2308      	moveq	r3, #8
 800358c:	2100      	movs	r1, #0
 800358e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003592:	6866      	ldr	r6, [r4, #4]
 8003594:	60a6      	str	r6, [r4, #8]
 8003596:	2e00      	cmp	r6, #0
 8003598:	bfa2      	ittt	ge
 800359a:	6821      	ldrge	r1, [r4, #0]
 800359c:	f021 0104 	bicge.w	r1, r1, #4
 80035a0:	6021      	strge	r1, [r4, #0]
 80035a2:	b90d      	cbnz	r5, 80035a8 <_printf_i+0x110>
 80035a4:	2e00      	cmp	r6, #0
 80035a6:	d04b      	beq.n	8003640 <_printf_i+0x1a8>
 80035a8:	4616      	mov	r6, r2
 80035aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ae:	fb03 5711 	mls	r7, r3, r1, r5
 80035b2:	5dc7      	ldrb	r7, [r0, r7]
 80035b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035b8:	462f      	mov	r7, r5
 80035ba:	42bb      	cmp	r3, r7
 80035bc:	460d      	mov	r5, r1
 80035be:	d9f4      	bls.n	80035aa <_printf_i+0x112>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d10b      	bne.n	80035dc <_printf_i+0x144>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	07df      	lsls	r7, r3, #31
 80035c8:	d508      	bpl.n	80035dc <_printf_i+0x144>
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	6861      	ldr	r1, [r4, #4]
 80035ce:	4299      	cmp	r1, r3
 80035d0:	bfde      	ittt	le
 80035d2:	2330      	movle	r3, #48	@ 0x30
 80035d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035dc:	1b92      	subs	r2, r2, r6
 80035de:	6122      	str	r2, [r4, #16]
 80035e0:	f8cd a000 	str.w	sl, [sp]
 80035e4:	464b      	mov	r3, r9
 80035e6:	aa03      	add	r2, sp, #12
 80035e8:	4621      	mov	r1, r4
 80035ea:	4640      	mov	r0, r8
 80035ec:	f7ff fee6 	bl	80033bc <_printf_common>
 80035f0:	3001      	adds	r0, #1
 80035f2:	d14a      	bne.n	800368a <_printf_i+0x1f2>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	b004      	add	sp, #16
 80035fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f043 0320 	orr.w	r3, r3, #32
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	4833      	ldr	r0, [pc, #204]	@ (80036d4 <_printf_i+0x23c>)
 8003608:	2778      	movs	r7, #120	@ 0x78
 800360a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	6831      	ldr	r1, [r6, #0]
 8003612:	061f      	lsls	r7, r3, #24
 8003614:	f851 5b04 	ldr.w	r5, [r1], #4
 8003618:	d402      	bmi.n	8003620 <_printf_i+0x188>
 800361a:	065f      	lsls	r7, r3, #25
 800361c:	bf48      	it	mi
 800361e:	b2ad      	uxthmi	r5, r5
 8003620:	6031      	str	r1, [r6, #0]
 8003622:	07d9      	lsls	r1, r3, #31
 8003624:	bf44      	itt	mi
 8003626:	f043 0320 	orrmi.w	r3, r3, #32
 800362a:	6023      	strmi	r3, [r4, #0]
 800362c:	b11d      	cbz	r5, 8003636 <_printf_i+0x19e>
 800362e:	2310      	movs	r3, #16
 8003630:	e7ac      	b.n	800358c <_printf_i+0xf4>
 8003632:	4827      	ldr	r0, [pc, #156]	@ (80036d0 <_printf_i+0x238>)
 8003634:	e7e9      	b.n	800360a <_printf_i+0x172>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	f023 0320 	bic.w	r3, r3, #32
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	e7f6      	b.n	800362e <_printf_i+0x196>
 8003640:	4616      	mov	r6, r2
 8003642:	e7bd      	b.n	80035c0 <_printf_i+0x128>
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	6825      	ldr	r5, [r4, #0]
 8003648:	6961      	ldr	r1, [r4, #20]
 800364a:	1d18      	adds	r0, r3, #4
 800364c:	6030      	str	r0, [r6, #0]
 800364e:	062e      	lsls	r6, r5, #24
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	d501      	bpl.n	8003658 <_printf_i+0x1c0>
 8003654:	6019      	str	r1, [r3, #0]
 8003656:	e002      	b.n	800365e <_printf_i+0x1c6>
 8003658:	0668      	lsls	r0, r5, #25
 800365a:	d5fb      	bpl.n	8003654 <_printf_i+0x1bc>
 800365c:	8019      	strh	r1, [r3, #0]
 800365e:	2300      	movs	r3, #0
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	4616      	mov	r6, r2
 8003664:	e7bc      	b.n	80035e0 <_printf_i+0x148>
 8003666:	6833      	ldr	r3, [r6, #0]
 8003668:	1d1a      	adds	r2, r3, #4
 800366a:	6032      	str	r2, [r6, #0]
 800366c:	681e      	ldr	r6, [r3, #0]
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	2100      	movs	r1, #0
 8003672:	4630      	mov	r0, r6
 8003674:	f7fc fdd4 	bl	8000220 <memchr>
 8003678:	b108      	cbz	r0, 800367e <_printf_i+0x1e6>
 800367a:	1b80      	subs	r0, r0, r6
 800367c:	6060      	str	r0, [r4, #4]
 800367e:	6863      	ldr	r3, [r4, #4]
 8003680:	6123      	str	r3, [r4, #16]
 8003682:	2300      	movs	r3, #0
 8003684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003688:	e7aa      	b.n	80035e0 <_printf_i+0x148>
 800368a:	6923      	ldr	r3, [r4, #16]
 800368c:	4632      	mov	r2, r6
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	47d0      	blx	sl
 8003694:	3001      	adds	r0, #1
 8003696:	d0ad      	beq.n	80035f4 <_printf_i+0x15c>
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	079b      	lsls	r3, r3, #30
 800369c:	d413      	bmi.n	80036c6 <_printf_i+0x22e>
 800369e:	68e0      	ldr	r0, [r4, #12]
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	4298      	cmp	r0, r3
 80036a4:	bfb8      	it	lt
 80036a6:	4618      	movlt	r0, r3
 80036a8:	e7a6      	b.n	80035f8 <_printf_i+0x160>
 80036aa:	2301      	movs	r3, #1
 80036ac:	4632      	mov	r2, r6
 80036ae:	4649      	mov	r1, r9
 80036b0:	4640      	mov	r0, r8
 80036b2:	47d0      	blx	sl
 80036b4:	3001      	adds	r0, #1
 80036b6:	d09d      	beq.n	80035f4 <_printf_i+0x15c>
 80036b8:	3501      	adds	r5, #1
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	9903      	ldr	r1, [sp, #12]
 80036be:	1a5b      	subs	r3, r3, r1
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dcf2      	bgt.n	80036aa <_printf_i+0x212>
 80036c4:	e7eb      	b.n	800369e <_printf_i+0x206>
 80036c6:	2500      	movs	r5, #0
 80036c8:	f104 0619 	add.w	r6, r4, #25
 80036cc:	e7f5      	b.n	80036ba <_printf_i+0x222>
 80036ce:	bf00      	nop
 80036d0:	0800383d 	.word	0x0800383d
 80036d4:	0800384e 	.word	0x0800384e

080036d8 <memmove>:
 80036d8:	4288      	cmp	r0, r1
 80036da:	b510      	push	{r4, lr}
 80036dc:	eb01 0402 	add.w	r4, r1, r2
 80036e0:	d902      	bls.n	80036e8 <memmove+0x10>
 80036e2:	4284      	cmp	r4, r0
 80036e4:	4623      	mov	r3, r4
 80036e6:	d807      	bhi.n	80036f8 <memmove+0x20>
 80036e8:	1e43      	subs	r3, r0, #1
 80036ea:	42a1      	cmp	r1, r4
 80036ec:	d008      	beq.n	8003700 <memmove+0x28>
 80036ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036f6:	e7f8      	b.n	80036ea <memmove+0x12>
 80036f8:	4402      	add	r2, r0
 80036fa:	4601      	mov	r1, r0
 80036fc:	428a      	cmp	r2, r1
 80036fe:	d100      	bne.n	8003702 <memmove+0x2a>
 8003700:	bd10      	pop	{r4, pc}
 8003702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800370a:	e7f7      	b.n	80036fc <memmove+0x24>

0800370c <_sbrk_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d06      	ldr	r5, [pc, #24]	@ (8003728 <_sbrk_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd fa4a 	bl	8000bb0 <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_sbrk_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_sbrk_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000244 	.word	0x20000244

0800372c <memcpy>:
 800372c:	440a      	add	r2, r1
 800372e:	4291      	cmp	r1, r2
 8003730:	f100 33ff 	add.w	r3, r0, #4294967295
 8003734:	d100      	bne.n	8003738 <memcpy+0xc>
 8003736:	4770      	bx	lr
 8003738:	b510      	push	{r4, lr}
 800373a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800373e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003742:	4291      	cmp	r1, r2
 8003744:	d1f9      	bne.n	800373a <memcpy+0xe>
 8003746:	bd10      	pop	{r4, pc}

08003748 <_realloc_r>:
 8003748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374c:	4680      	mov	r8, r0
 800374e:	4615      	mov	r5, r2
 8003750:	460c      	mov	r4, r1
 8003752:	b921      	cbnz	r1, 800375e <_realloc_r+0x16>
 8003754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003758:	4611      	mov	r1, r2
 800375a:	f7ff bc4b 	b.w	8002ff4 <_malloc_r>
 800375e:	b92a      	cbnz	r2, 800376c <_realloc_r+0x24>
 8003760:	f7ff fbdc 	bl	8002f1c <_free_r>
 8003764:	2400      	movs	r4, #0
 8003766:	4620      	mov	r0, r4
 8003768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800376c:	f000 f81a 	bl	80037a4 <_malloc_usable_size_r>
 8003770:	4285      	cmp	r5, r0
 8003772:	4606      	mov	r6, r0
 8003774:	d802      	bhi.n	800377c <_realloc_r+0x34>
 8003776:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800377a:	d8f4      	bhi.n	8003766 <_realloc_r+0x1e>
 800377c:	4629      	mov	r1, r5
 800377e:	4640      	mov	r0, r8
 8003780:	f7ff fc38 	bl	8002ff4 <_malloc_r>
 8003784:	4607      	mov	r7, r0
 8003786:	2800      	cmp	r0, #0
 8003788:	d0ec      	beq.n	8003764 <_realloc_r+0x1c>
 800378a:	42b5      	cmp	r5, r6
 800378c:	462a      	mov	r2, r5
 800378e:	4621      	mov	r1, r4
 8003790:	bf28      	it	cs
 8003792:	4632      	movcs	r2, r6
 8003794:	f7ff ffca 	bl	800372c <memcpy>
 8003798:	4621      	mov	r1, r4
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fbbe 	bl	8002f1c <_free_r>
 80037a0:	463c      	mov	r4, r7
 80037a2:	e7e0      	b.n	8003766 <_realloc_r+0x1e>

080037a4 <_malloc_usable_size_r>:
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f18      	subs	r0, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfbc      	itt	lt
 80037ae:	580b      	ldrlt	r3, [r1, r0]
 80037b0:	18c0      	addlt	r0, r0, r3
 80037b2:	4770      	bx	lr

080037b4 <_init>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr

080037c0 <_fini>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	bf00      	nop
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr
